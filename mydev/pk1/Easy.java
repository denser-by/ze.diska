package mydev.pk1; import java.awt.Frame; import java.awt.Color; import java.awt.Graphics; import java.awt.Panel; import java.awt.Canvas; import java.awt.FlowLayout; import java.awt.BorderLayout; import java.awt.GridLayout; import java.awt.Event; import java.util.Vector; public class Easy { Easy() {} public static void main(String[] args) { Handler am1=new Handler(); am1.setLayout(new BorderLayout()); am1.resize(400,300); am1.setBackground(Color.black); Positive cd; Panel northPanel=new Panel(); northPanel.setLayout(new FlowLayout()); am1.add("North",northPanel); DevItem.registerRedraw(northPanel); cd=new Positive(); DevItem.registerSign(cd); cd.setLength(35); cd.positive(true); cd.setBorderColor(Color.cyan); northPanel.add("North",cd); cd=new DevItem(); cd.setLength(35); cd.setBorderColor(Color.cyan); northPanel.add("North",cd); cd=new DevItem(); cd.setLength(35); cd.setBorderColor(Color.cyan); northPanel.add("North",cd); cd=new DevItem(); cd.setLength(35); cd.setBorderColor(Color.cyan); northPanel.add("North",cd); cd=new DevItem(); cd.setLength(35); cd.setBorderColor(Color.cyan); northPanel.add("North",cd); cd=new DevItem(); cd.setLength(35); cd.setBorderColor(Color.cyan); northPanel.add("North",cd); cd=new DevItem(); cd.setLength(35); cd.setBorderColor(Color.cyan); northPanel.add("North",cd); cd=new DevItem(); cd.setLength(35); cd.setBorderColor(Color.cyan); northPanel.add("North",cd); cd=new DevItem(); cd.setLength(35); cd.setBorderColor(Color.cyan); northPanel.add("North",cd); cd=new DevItem(); cd.setLength(35); cd.setBorderColor(Color.cyan); northPanel.add("North",cd); cd=new DevItem(); cd.setLength(35); cd.setBorderColor(Color.cyan); northPanel.add("North",cd); cd=new DevItem(); cd.setLength(35); cd.setBorderColor(Color.cyan); northPanel.add("North",cd); cd=new DevItem(); cd.setLength(35); cd.setBorderColor(Color.cyan); northPanel.add("North",cd); Panel southPanel=new Panel(); southPanel.setLayout(new FlowLayout()); am1.add("South",southPanel); cd=new Positives(); cd.setLength(25); cd.setActiveColor(Color.black); cd.setBackgroundColor(Color.green); southPanel.add(cd); cd=new Positives(); cd.setLength(25); cd.setActiveColor(Color.black); cd.setBackgroundColor(Color.green); southPanel.add(cd); cd=new Positives(); cd.setLength(25); cd.setActiveColor(Color.black); cd.setBackgroundColor(Color.green); southPanel.add(cd); cd=new Positives(); cd.setLength(25); cd.setActiveColor(Color.black); cd.setBackgroundColor(Color.green); southPanel.add(cd); cd=new Positives(); cd.setLength(25); cd.setActiveColor(Color.black); cd.setBackgroundColor(Color.green); southPanel.add(cd); cd=new Positives(); cd.setLength(25); cd.setActiveColor(Color.black); cd.setBackgroundColor(Color.green); southPanel.add(cd); cd=new Positives(); cd.setLength(25); cd.setActiveColor(Color.black); cd.setBackgroundColor(Color.green); southPanel.add(cd); cd=new Positives(); cd.setLength(25); cd.setActiveColor(Color.black); cd.setBackgroundColor(Color.green); southPanel.add(cd); cd=new Positives(); cd.setLength(25); cd.setActiveColor(Color.black); cd.setBackgroundColor(Color.green); southPanel.add(cd); cd=new Positives(); cd.setLength(25); cd.setActiveColor(Color.black); cd.setBackgroundColor(Color.green); southPanel.add(cd); Sborka bc=new Sborka(); bc.setLength(35); bc.setHeight(135); bc.setBackgroundColor(Color.green); am1.add("East",bc); bc=new Sborka(); bc.setLength(35); bc.setHeight(235); bc.setBackgroundColor(Color.green); am1.add("West",bc); Panel centerPanel=new Panel(); centerPanel.setLayout(new GridLayout(4,4)); am1.add("Center",centerPanel); cd=new DevItemOne(); cd.setLength(99); cd.setBorderWidth(3); cd.setBorderColor(Color.green); centerPanel.add(cd); cd=new DevItemTwa(); cd.setLength(99); cd.setBorderWidth(3); cd.setBorderColor(Color.green); centerPanel.add(cd); cd=new DevItemThre(); cd.setLength(99); cd.setBorderWidth(3); cd.setBorderColor(Color.green); centerPanel.add(cd); cd=new Positive(); cd.setLength(99); cd.positive(false); cd.setBorderWidth(3); cd.setBorderColor(Color.green); centerPanel.add(cd); cd=new DevItemFour(); cd.setLength(99); cd.setBorderWidth(3); cd.setBorderColor(Color.green); centerPanel.add(cd); cd=new DevItemFive(); cd.setLength(99); cd.setBorderWidth(3); cd.setBorderColor(Color.green); centerPanel.add(cd); cd=new DevItemSix(); cd.setLength(99); cd.setBorderWidth(3); cd.setBorderColor(Color.green); centerPanel.add(cd); cd=new Positive(); cd.setLength(99); cd.positive(true); cd.setBorderWidth(3); cd.setBorderColor(Color.green); centerPanel.add(cd); cd=new DevItemSvn(); cd.setLength(99); cd.setBorderWidth(3); cd.setBorderColor(Color.green); centerPanel.add(cd); cd=new DevItemEiht(); cd.setLength(99); cd.setBorderWidth(3); cd.setBorderColor(Color.green); centerPanel.add(cd); cd=new DevItemNine(); cd.setLength(99); cd.setBorderWidth(3); cd.setBorderColor(Color.green); centerPanel.add(cd); cd=new DevItemMult(); cd.setLength(99); cd.setBorderWidth(3); cd.setBorderColor(Color.green); centerPanel.add(cd); cd=new DevItemNol(); cd.setLength(99); cd.setBorderWidth(3); cd.setBorderColor(Color.green); centerPanel.add(cd); cd=new DevItemDot(); cd.setLength(99); cd.setBorderWidth(3); cd.setBorderColor(Color.green); centerPanel.add(cd); cd=new DevItemEq(); cd.setLength(99); cd.setBorderWidth(3); cd.setBorderColor(Color.green); centerPanel.add(cd); cd=new DevItemDiv(); cd.setLength(99); cd.setBorderWidth(3); cd.setBorderColor(Color.green); centerPanel.add(cd); am1.pack(); am1.show(); Thread t1;(t1=new Thread(am1)).start(); try { t1.join();} catch(InterruptedException ex) { ex.getMessage();} am1.hide(); am1.dispose(); System.exit(1-1);}} class Positive extends Canvas { final int MIN_LENGTH=10; final int MAX_LENGTH=199; final int MIN_BORDER=0; final int MAX_BORDER=5; boolean initialized; int length; int height; Color borderColor; Color backgroundColor; Color activeColor; boolean positive; int borderWidth; boolean lnd501; public Positive() { this.initialized=false; this.length=20; this.height=20; this.borderColor=Color.yellow; this.backgroundColor=Color.blue; this.activeColor=Color.white; this.positive=false; this.borderWidth=1; lnd501=false;} static int pressed=0; public void onPressed() { pressed++; onPressedRedef();} public void onPressedRedef() { Numbers.instance().inputOp(positive ? "+" : "-");} Event copy; public boolean handleEvent(Event evt) { boolean res=false; if(copy !=null && copy !=evt) { copy=evt; res=((Canvas) this).handleEvent(evt);} if(evt.id==Event.MOUSE_DOWN) { lnd501=true; onPressed(); if(Sborka.sborks.size() > 0) { Sborka first=(Sborka) Sborka.sborks.elementAt(0); Sborka second=(Sborka) Sborka.sborks.elementAt(1); if(first.height < 10) { second.setHeight(first.height+second.height); first.setHeight(0); Sborka.sborks.removeAllElements(); Sborka.sborks.addElement(second); Sborka.sborks.addElement(first);} else { second.setHeight(second.height+10); first.setHeight(first.height-10);}} repaint();} if(evt.id==Event.MOUSE_UP) { if(lnd501==true) { lnd501=false; repaint();}} return res;} public void setBorderWidth(int borderWidth) { if(borderWidth < MIN_BORDER) borderWidth=MIN_BORDER; if(borderWidth > MAX_BORDER) borderWidth=MAX_BORDER; this.borderWidth=borderWidth;} public void setLength(int length) { if(length < MIN_LENGTH) length=MIN_LENGTH; if(length > MAX_LENGTH) length=MAX_LENGTH; this.length=length; this.height=length; resize(length,height);} public boolean isPositive() { return positive;} public boolean positive(boolean positive) { return(this.positive=positive);} public void setBorderColor(Color borderColor) { this.borderColor=borderColor;} public void setBackgroundColor(Color backgroundColor) { this.backgroundColor=backgroundColor;} public void setActiveColor(Color activeColor) { this.activeColor=activeColor;} public void paint(Graphics cs) { if(!initialized) { resize(length,height);} if(!lnd501) { cs.setColor(backgroundColor); cs.fillRect(0,0,length-1,height-1);} cs.setColor(borderColor); for(int i=0; i < borderWidth; i++) cs.drawRect(0+i,0+i,length-1-i-i,height-1-i-i); paintValue(cs);} public void paintValue(Graphics cs) { cs.setColor(activeColor); if(length >= 15) cs.drawLine(0+borderWidth+1+1,length / 2-1,0+borderWidth+1+length-2 * borderWidth-1-1-1-1,length / 2-1); cs.drawLine(0+borderWidth+1,length / 2,0+borderWidth+1+length-2 * borderWidth-1-1-1,length / 2); if(length >= 15) cs.drawLine(0+borderWidth+1+1,length / 2+1,0+borderWidth+1+length-2 * borderWidth-1-1-1-1,length / 2+1); if(positive) { if(length >= 15) cs.drawLine(length / 2-1,0+borderWidth+1+1,length / 2-1,0+borderWidth+1+length-2 * borderWidth-1-1-1-1); cs.drawLine(length / 2,0+borderWidth+1,length / 2,0+borderWidth+1+length-2 * borderWidth-1-1-1); if(length >= 15) cs.drawLine(length / 2+1,0+borderWidth+1+1,length / 2+1,0+borderWidth+1+length-2 * borderWidth-1-1-1-1);}}} class Handler extends Frame implements Runnable { Event copy; boolean toExit; public Handler() { super("Numbers"); this.toExit=false; setResizable(false);} public boolean handleEvent(Event evt) { boolean result=false; if(copy !=null && evt !=copy) { copy=evt; result=handleEvent(evt);} if(evt.id==Event.WINDOW_DESTROY) { toExit=true;} return result;} public void run() { while(!toExit) { try { Thread.sleep(666);} catch(InterruptedException ex) { ex.getMessage();}}}} class DevItem extends Positive { static final Vector items=new Vector(); static final Positive pk0=new DevItemNol(); static final Positive pk1=new DevItemOne(); static final Positive pk2=new DevItemTwa(); static final Positive pk3=new DevItemThre(); static final Positive pk4=new DevItemFour(); static final Positive pk5=new DevItemFive(); static final Positive pk6=new DevItemSix(); static final Positive pk7=new DevItemSvn(); static final Positive pk8=new DevItemEiht(); static final Positive pk9=new DevItemNine(); static final Positive pkt=new DevItemDot(); int digit; static final int NOT=-10; DevItem() { digit=NOT; items.addElement(this);} public void paintValue(Graphics cs) { if(digit > NOT) switch(digit) { case 0 : pk0.paintValue(cs); break; case 1 : pk1.paintValue(cs); break; case 2 : pk2.paintValue(cs); break; case 3 : pk3.paintValue(cs); break; case 4 : pk4.paintValue(cs); break; case 5 : pk5.paintValue(cs); break; case 6 : pk6.paintValue(cs); break; case 7 : pk7.paintValue(cs); break; case 8 : pk8.paintValue(cs); break; case 9 : pk9.paintValue(cs); break; case 10 : pkt.paintValue(cs); break; case-1 : pk1.paintValue(cs); break; case-2 : pk2.paintValue(cs); break; case-3 : pk3.paintValue(cs); break; case-4 : pk4.paintValue(cs); break; case-5 : pk5.paintValue(cs); break; case-6 : pk6.paintValue(cs); break; case-7 : pk7.paintValue(cs); break; case-8 : pk8.paintValue(cs); break; case-9 : pk9.paintValue(cs); break; default : break;}} static void redraw(Object[] arg) { boolean stillNol=true; boolean positive=true; for(int i=0; i < arg.length; i++) { if(stillNol && arg[i] instanceof Integer &&((Integer) arg[i]).intValue() !=0) stillNol=false; if(stillNol && arg[i] instanceof String &&((String) arg[i]).equals(".")) { stillNol=false; if(i > 0) { DevItem p=(DevItem) items.elementAt(i-1); p.digit=((Integer) arg[i-1]).intValue(); p.repaint();}} Positive px=(Positive) items.elementAt(i); if(!stillNol) { if(arg[i] instanceof String &&((String) arg[i]).equals("."))((DevItem) px).digit=10; else {((DevItem) px).digit=((Integer) arg[i]).intValue(); if(positive &&((Integer) arg[i]).intValue() < 0) positive=false;}} else((DevItem) px).digit=NOT; px.repaint();} sign.positive(positive); sign.repaint();} static Panel digitPanel=null; static void registerRedraw(Panel dp) { digitPanel=dp;} static Positive sign=null; static void registerSign(Positive sgn) { sign=sgn;}} class DevItemOne extends Positive { public void onPressedRedef() { Numbers.instance().input(1);} public void paintValue(Graphics cs) { cs.setColor(activeColor); if(length >= 15) cs.drawLine(0+borderWidth+1+length / 5,length / 2-1,length * 3 / 5-1,0+borderWidth+1); cs.drawLine(0+borderWidth+1+length / 5,length / 2,length * 3 / 5,0+borderWidth+1); if(length >= 15) cs.drawLine(0+borderWidth+1+length / 5,length / 2+1,length * 3 / 5+1,0+borderWidth+1); if(length >= 15) cs.drawLine(length * 3 / 5-1,0+borderWidth+1+1,length * 2 / 5-1,0+borderWidth+1+length-2 * borderWidth-1-1-1-1); cs.drawLine(length * 3 / 5,0+borderWidth+1,length * 2 / 5,0+borderWidth+1+length-2 * borderWidth-1-1-1); if(length >= 15) cs.drawLine(length * 3 / 5+1,0+borderWidth+1+1,length * 2 / 5+1,0+borderWidth+1+length-2 * borderWidth-1-1-1-1);}} class DevItemEiht extends Positive { public void onPressedRedef() { Numbers.instance().input(8);} public void paintValue(Graphics cs) { cs.setColor(activeColor); if(length >= 15) cs.drawLine(length / 2+length / 5-1,0+borderWidth+1+1,length / 2+length / 5-1,0+borderWidth+1+length-2 * borderWidth-1-1-1-1); cs.drawLine(length / 2+length / 5,0+borderWidth+1,length / 2+length / 5,0+borderWidth+1+length-2 * borderWidth-1-1-1); if(length >= 15) cs.drawLine(length / 2+length / 5+1,0+borderWidth+1+1,length / 2+length / 5+1,0+borderWidth+1+length-2 * borderWidth-1-1-1-1); if(length >= 15) cs.drawLine(length / 2-length / 5-1,0+borderWidth+1+1,length / 2-length / 5-1,0+borderWidth+1+length-2 * borderWidth-1-1-1-1); cs.drawLine(length / 2-length / 5,0+borderWidth+1,length / 2-length / 5,0+borderWidth+1+length-2 * borderWidth-1-1-1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+1,length / 2-length / 5+1,0+borderWidth+1+length-2 * borderWidth-1-1-1-1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+length / 2-1,length / 2+length / 5-1,0+borderWidth+1+length / 2-1); cs.drawLine(length / 2-length / 5,0+borderWidth+1+length / 2,length / 2+length / 5,0+borderWidth+1+length / 2); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+length / 2+1,length / 2+length / 5-1,0+borderWidth+1+length / 2+1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+1-1,length / 2+length / 5-1,0+borderWidth+1+1-1); cs.drawLine(length / 2-length / 5,0+borderWidth+1+1,length / 2+length / 5,0+borderWidth+1+1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+1+1,length / 2+length / 5-1,0+borderWidth+1+1+1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,length-borderWidth-1-1-1-1,length / 2+length / 5-1,length-borderWidth-1-1-1-1); cs.drawLine(length / 2-length / 5,length-borderWidth-1-1-1,length / 2+length / 5,length-borderWidth-1-1-1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,length-borderWidth-1-1-1+1,length / 2+length / 5-1,length-borderWidth-1-1-1+1);}} class DevItemSvn extends Positive { public void onPressedRedef() { Numbers.instance().input(7);} public void paintValue(Graphics cs) { cs.setColor(activeColor); if(length >= 15) cs.drawLine(0+borderWidth+1+length / 5+1,0+borderWidth+1+1-1,length * 3 / 5+length / 5-1,0+borderWidth+1+1-1); cs.drawLine(0+borderWidth+1+length / 5,0+borderWidth+1+1,length * 3 / 5+length / 5,0+borderWidth+1+1); if(length >= 15) cs.drawLine(0+borderWidth+1+length / 5+1,0+borderWidth+1+1+1,length * 3 / 5+length / 5-1,0+borderWidth+1+1+1); if(length >= 15) cs.drawLine(length * 3 / 5+length / 5-1,0+borderWidth+1+1,length / 2-1,0+borderWidth+1+length-2 * borderWidth-1-1-1-1); cs.drawLine(length * 3 / 5+length / 5,0+borderWidth+1,length / 2,0+borderWidth+1+length-2 * borderWidth-1-1-1); if(length >= 15) cs.drawLine(length * 3 / 5+length / 5+1,0+borderWidth+1+1,length / 2+1,0+borderWidth+1+length-2 * borderWidth-1-1-1-1);}} class DevItemNine extends Positive { public void onPressedRedef() { Numbers.instance().input(9);} public void paintValue(Graphics cs) { cs.setColor(activeColor); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+1-1,length / 2+length / 5-1,0+borderWidth+1+1-1); cs.drawLine(length / 2-length / 5,0+borderWidth+1+1,length / 2+length / 5,0+borderWidth+1+1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+1+1,length / 2+length / 5-1,0+borderWidth+1+1+1); if(length >= 15) cs.drawLine(length / 2-length / 5-1,0+borderWidth+1+1,length / 2-length / 5-1,0+borderWidth+1+length / 2-1); cs.drawLine(length / 2-length / 5,0+borderWidth+1,length / 2-length / 5,0+borderWidth+1+length / 2); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+1,length / 2-length / 5+1,0+borderWidth+1+length / 2-1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+length / 2-1,length / 2+length / 5-1,0+borderWidth+1+length / 2-1); cs.drawLine(length / 2-length / 5,0+borderWidth+1+length / 2,length / 2+length / 5,0+borderWidth+1+length / 2); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+length / 2+1,length / 2+length / 5-1,0+borderWidth+1+length / 2+1); if(length >= 15) cs.drawLine(length / 2+length / 5-1,0+borderWidth+1+1,length / 2+length / 5-1,0+borderWidth+1+length / 2-1); cs.drawLine(length / 2+length / 5,0+borderWidth+1,length / 2+length / 5,0+borderWidth+1+length / 2); if(length >= 15) cs.drawLine(length / 2+length / 5+1,0+borderWidth+1+1,length / 2+length / 5+1,0+borderWidth+1+length / 2-1); if(length >= 15) cs.drawLine(length / 2+length / 5-1,0+borderWidth+1+length / 2+1,length / 2-1,length-borderWidth-1-1-1); cs.drawLine(length / 2+length / 5,0+borderWidth+1+length / 2,length / 2,length-borderWidth-1-1); if(length >= 15) cs.drawLine(length / 2+length / 5+1,0+borderWidth+1+length / 2+1,length / 2+1,length-borderWidth-1-1-1);}} class DevItemSix extends Positive { public void onPressedRedef() { Numbers.instance().input(6);} public void paintValue(Graphics cs) { cs.setColor(activeColor); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+length / 2-1,length / 2+length / 5-1,0+borderWidth+1+length / 2-1); cs.drawLine(length / 2-length / 5,0+borderWidth+1+length / 2,length / 2+length / 5,0+borderWidth+1+length / 2); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+length / 2+1,length / 2+length / 5-1,0+borderWidth+1+length / 2+1); if(length >= 15) cs.drawLine(length / 2+length / 5,0+borderWidth+1+1,length / 2-length / 5+1,length / 2+1+1+1); cs.drawLine(length / 2+length / 5,0+borderWidth+1,length / 2-length / 5,length / 2+1+1+1); if(length >= 15) cs.drawLine(length / 2+length / 5-1,0+borderWidth+1,length / 2-length / 5-1,length / 2+1+1+1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,length-borderWidth-1-1-1-1,length / 2+length / 5-1,length-borderWidth-1-1-1-1); cs.drawLine(length / 2-length / 5,length-borderWidth-1-1-1,length / 2+length / 5,length-borderWidth-1-1-1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,length-borderWidth-1-1-1+1,length / 2+length / 5-1,length-borderWidth-1-1-1+1); if(length >= 15) cs.drawLine(length / 2-length / 5-1,length-borderWidth-1-1-1-1,length / 2-length / 5-1,length / 2+1+1+1+1); cs.drawLine(length / 2-length / 5,length-borderWidth-1-1-1,length / 2-length / 5,length / 2+1+1+1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,length-borderWidth-1-1-1-1,length / 2-length / 5+1,length / 2+1+1+1+1); if(length >= 15) cs.drawLine(length / 2+length / 5-1,length-borderWidth-1-1-1-1,length / 2+length / 5-1,length / 2+1+1+1+1); cs.drawLine(length / 2+length / 5,length-borderWidth-1-1-1,length / 2+length / 5,length / 2+1+1+1); if(length >= 15) cs.drawLine(length / 2+length / 5+1,length-borderWidth-1-1-1-1,length / 2+length / 5+1,length / 2+1+1+1+1);}} class DevItemFour extends Positive { public void onPressedRedef() { Numbers.instance().input(4);} public void paintValue(Graphics cs) { cs.setColor(activeColor); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+length / 2-1,length / 2+length / 5-1,0+borderWidth+1+length / 2-1); cs.drawLine(length / 2-length / 5,0+borderWidth+1+length / 2,length / 2+length / 5,0+borderWidth+1+length / 2); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+length / 2+1,length / 2+length / 5-1,0+borderWidth+1+length / 2+1); if(length >= 15) cs.drawLine(length / 2+length / 5,0+borderWidth+1+1,length / 2-length / 5+1,length / 2+1+1+1); cs.drawLine(length / 2+length / 5,0+borderWidth+1,length / 2-length / 5,length / 2+1+1+1); if(length >= 15) cs.drawLine(length / 2+length / 5-1,0+borderWidth+1,length / 2-length / 5-1,length / 2+1+1+1); if(length >= 15) cs.drawLine(length / 2+length / 5-1,length-borderWidth-1-1-1-1,length / 2+length / 5-1,length / 2-length / 5+1+1+1+1); cs.drawLine(length / 2+length / 5,length-borderWidth-1-1-1,length / 2+length / 5,length / 2-length / 5+1+1+1); if(length >= 15) cs.drawLine(length / 2+length / 5+1,length-borderWidth-1-1-1-1,length / 2+length / 5+1,length / 2-length / 5+1+1+1+1);}} class DevItemThre extends Positive { public void onPressedRedef() { Numbers.instance().input(3);} public void paintValue(Graphics cs) { cs.setColor(activeColor); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+1-1,length / 2+length / 5-1,0+borderWidth+1+1-1); cs.drawLine(length / 2-length / 5,0+borderWidth+1+1,length / 2+length / 5,0+borderWidth+1+1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+1+1,length / 2+length / 5-1,0+borderWidth+1+1+1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+length / 2-1,length / 2+length / 5-1,0+borderWidth+1+length / 2-1); cs.drawLine(length / 2-length / 5,0+borderWidth+1+length / 2,length / 2+length / 5,0+borderWidth+1+length / 2); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+length / 2+1,length / 2+length / 5-1,0+borderWidth+1+length / 2+1); if(length >= 15) cs.drawLine(length / 2+length / 5,0+borderWidth+1+1,length / 2-length / 5+1,length / 2+1+1+1); cs.drawLine(length / 2+length / 5,0+borderWidth+1,length / 2-length / 5,length / 2+1+1+1); if(length >= 15) cs.drawLine(length / 2+length / 5-1,0+borderWidth+1,length / 2-length / 5-1,length / 2+1+1+1); if(length >= 15) cs.drawLine(length / 2+length / 5-1,length / 2+1+1+1,length / 2-length / 5,length-borderWidth-1-1-1); cs.drawLine(length / 2+length / 5,length / 2+1+1+1,length / 2-length / 5,length-borderWidth-1-1); if(length >= 15) cs.drawLine(length / 2+length / 5,length / 2+1+1+1+1,length / 2-length / 5+1,length-borderWidth-1-1);}} class DevItemTwa extends Positive { public void onPressedRedef() { Numbers.instance().input(2);} public void paintValue(Graphics cs) { cs.setColor(activeColor); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+1-1,length / 2+length / 5-1,0+borderWidth+1+1-1); cs.drawLine(length / 2-length / 5,0+borderWidth+1+1,length / 2+length / 5,0+borderWidth+1+1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+1+1,length / 2+length / 5-1,0+borderWidth+1+1+1); if(length >= 15) cs.drawLine(length / 2+length / 5-1,length / 2,length / 2-length / 5,length-borderWidth-1-1-1); cs.drawLine(length / 2+length / 5,length / 2,length / 2-length / 5,length-borderWidth-1-1); if(length >= 15) cs.drawLine(length / 2+length / 5,length / 2+1,length / 2-length / 5+1,length-borderWidth-1-1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,length-borderWidth-1-1-1-1,length / 2+length / 5-1,length-borderWidth-1-1-1-1); cs.drawLine(length / 2-length / 5,length-borderWidth-1-1-1,length / 2+length / 5,length-borderWidth-1-1-1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,length-borderWidth-1-1-1+1,length / 2+length / 5-1,length-borderWidth-1-1-1+1); if(length >= 15) cs.drawLine(length / 2+length / 5-1,length / 2-1,length / 2+length / 5-1,0+borderWidth+1+1+1); cs.drawLine(length / 2+length / 5,length / 2,length / 2+length / 5,0+borderWidth+1+1); if(length >= 15) cs.drawLine(length / 2+length / 5+1,length / 2-1,length / 2+length / 5+1,0+borderWidth+1+1+1);}} class DevItemFive extends Positive { public void onPressedRedef() { Numbers.instance().input(5);} public void paintValue(Graphics cs) { cs.setColor(activeColor); if(length >= 15) cs.drawLine(length * 3 / 5+1,borderWidth+1+1-1,length * 6 / 7-1,borderWidth+1+1-1); cs.drawLine(length * 3 / 5,borderWidth+1+1,length * 6 / 7,borderWidth+1+1); if(length >= 15) cs.drawLine(length * 3 / 5+1,borderWidth+1+1+1,length * 6 / 7-1,borderWidth+1+1+1); if(length >= 15) cs.drawLine(length * 3 / 5+1,0+borderWidth+1+1,length / 2+1,length / 2-1); cs.drawLine(length * 3 / 5,0+borderWidth+1,length / 2,length / 2); if(length >= 15) cs.drawLine(length * 3 / 5-1,0+borderWidth+1+1,length / 2-1,length / 2-1); if(length >= 15) cs.drawLine(length / 2+1,length / 2-1,length * 6 / 7-1,length / 2-1); cs.drawLine(length / 2,length / 2,length * 6 / 7,length / 2); if(length >= 15) cs.drawLine(length / 2+1,length / 2+1,length * 6 / 7-1,length / 2+1); if(length >= 15) cs.drawLine(length / 2-length / 11+1,length-2 * borderWidth-1-1,length * 6 / 7-length / 11-1,length-2 * borderWidth-1-1); cs.drawLine(length / 2-length / 11,length-2 * borderWidth-1,length * 6 / 7-length / 11,length-2 * borderWidth-1); if(length >= 15) cs.drawLine(length / 2-length / 11+1,length-2 * borderWidth-1+1,length * 6 / 7-length / 11-1,length-2 * borderWidth-1+1); if(length >= 15) cs.drawLine(length * 6 / 7-length / 11-1,length-2 * borderWidth-1-1,length * 6 / 7-1,length / 2+1); cs.drawLine(length * 6 / 7-length / 11,length-2 * borderWidth-1,length * 6 / 7,length / 2); if(length >= 15) cs.drawLine(length * 6 / 7-length / 11+1,length-2 * borderWidth-1-1,length * 6 / 7+1,length / 2+1);}} class DevItemMult extends Positive { public void onPressedRedef() { Numbers.instance().inputOp("*");} public void paintValue(Graphics cs) { cs.setColor(activeColor); if(length >= 15) cs.drawLine(length / 5,length / 5+1,4 * length / 5-1,4 * length / 5); cs.drawLine(length / 5,length / 5,4 * length / 5,4 * length / 5); if(length >= 15) cs.drawLine(length / 5+1,length / 5,4 * length / 5,4 * length / 5-1); if(length >= 15) cs.drawLine(4 * length / 5-1,length / 5,length / 5,4 * length / 5-1); cs.drawLine(4 * length / 5,length / 5,length / 5,4 * length / 5); if(length >= 15) cs.drawLine(4 * length / 5,length / 5+1,length / 5+1,4 * length / 5);}} class DevItemDiv extends Positive { public void onPressedRedef() { Numbers.instance().inputOp("/");} public void paintValue(Graphics cs) { cs.setColor(activeColor); if(length >= 15) cs.drawLine(3 * length / 5-1,length / 7,2 * length / 5,6 * length / 7-1); cs.drawLine(3 * length / 5,length / 7,2 * length / 5,6 * length / 7); if(length >= 15) cs.drawLine(3 * length / 5,length / 7+1,2 * length / 5+1,6 * length / 7);}} class DevItemEq extends Positive { public void onPressedRedef() { Numbers.instance().inputEq();} public void paintValue(Graphics cs) { cs.setColor(activeColor); if(length >= 15) cs.drawLine(length / 7+1,2 * length / 5-1,6 * length / 7-1,2 * length / 5-1); cs.drawLine(length / 7,2 * length / 5,6 * length / 7,2 * length / 5); if(length >= 15) cs.drawLine(length / 7+1,2 * length / 5+1,6 * length / 7-1,2 * length / 5+1); if(length >= 15) cs.drawLine(length / 7+1,3 * length / 5-1,6 * length / 7-1,3 * length / 5-1); cs.drawLine(length / 7,3 * length / 5,6 * length / 7,3 * length / 5); if(length >= 15) cs.drawLine(length / 7+1,3 * length / 5+1,6 * length / 7-1,3 * length / 5+1);}} class DevItemNol extends Positive { public void onPressedRedef() { Numbers.instance().input(0);} public void paintValue(Graphics cs) { cs.setColor(activeColor); if(length >= 15) cs.drawLine(length / 2+length / 5-1,0+borderWidth+1+1,length / 2+length / 5-1,0+borderWidth+1+length-2 * borderWidth-1-1-1-1); cs.drawLine(length / 2+length / 5,0+borderWidth+1,length / 2+length / 5,0+borderWidth+1+length-2 * borderWidth-1-1-1); if(length >= 15) cs.drawLine(length / 2+length / 5+1,0+borderWidth+1+1,length / 2+length / 5+1,0+borderWidth+1+length-2 * borderWidth-1-1-1-1); if(length >= 15) cs.drawLine(length / 2-length / 5-1,0+borderWidth+1+1,length / 2-length / 5-1,0+borderWidth+1+length-2 * borderWidth-1-1-1-1); cs.drawLine(length / 2-length / 5,0+borderWidth+1,length / 2-length / 5,0+borderWidth+1+length-2 * borderWidth-1-1-1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+1,length / 2-length / 5+1,0+borderWidth+1+length-2 * borderWidth-1-1-1-1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+1-1,length / 2+length / 5-1,0+borderWidth+1+1-1); cs.drawLine(length / 2-length / 5,0+borderWidth+1+1,length / 2+length / 5,0+borderWidth+1+1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+1+1,length / 2+length / 5-1,0+borderWidth+1+1+1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,length-borderWidth-1-1-1-1,length / 2+length / 5-1,length-borderWidth-1-1-1-1); cs.drawLine(length / 2-length / 5,length-borderWidth-1-1-1,length / 2+length / 5,length-borderWidth-1-1-1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,length-borderWidth-1-1-1+1,length / 2+length / 5-1,length-borderWidth-1-1-1+1);}} class DevItemDot extends Positive { public void onPressedRedef() { Numbers.instance().inputDot();} public void paintValue(Graphics cs) { cs.setColor(activeColor); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+length / 2-1,length / 2+length / 5-1,0+borderWidth+1+length / 2-1); cs.drawLine(length / 2-length / 5,0+borderWidth+1+length / 2,length / 2+length / 5,0+borderWidth+1+length / 2); if(length >= 15) cs.drawLine(length / 2-length / 5+1,0+borderWidth+1+length / 2+1,length / 2+length / 5-1,0+borderWidth+1+length / 2+1); if(length >= 15) cs.drawLine(length / 2-length / 5-1,length-borderWidth-1-1-1-1,length / 2-length / 5-1,length / 2+1+1+1+1); cs.drawLine(length / 2-length / 5,length-borderWidth-1-1-1,length / 2-length / 5,length / 2+1+1+1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,length-borderWidth-1-1-1-1,length / 2-length / 5+1,length / 2+1+1+1+1); if(length >= 15) cs.drawLine(length / 2-length / 5,length-borderWidth-1-1-1-1,length / 2+length / 5-1,length / 2+1+1+1); cs.drawLine(length / 2-length / 5,length-borderWidth-1-1-1,length / 2+length / 5,length / 2+1+1+1); if(length >= 15) cs.drawLine(length / 2-length / 5+1,length-borderWidth-1-1-1,length / 2+length / 5,length / 2+1+1+1+1);}} class Sborka extends Canvas { final int MIN_LENGTH=10; final int MAX_LENGTH=199; final int MIN_BORDER=0; final int MAX_BORDER=5; boolean initialized; private int length; int height; private Color borderColor; private Color backgroundColor; private int borderWidth; static Vector sborks=new Vector(); public Sborka() { super(); this.initialized=false; this.length=20; this.borderColor=Color.yellow; this.backgroundColor=Color.blue; this.borderWidth=1; sborks.addElement(this);} public void setBorderWidth(int borderWidth) { if(borderWidth < MIN_BORDER) borderWidth=MIN_BORDER; if(borderWidth > MAX_BORDER) borderWidth=MAX_BORDER; this.borderWidth=borderWidth;} public void setLength(int length) { if(length < MIN_LENGTH) length=MIN_LENGTH; if(length > MAX_LENGTH) length=MAX_LENGTH; this.length=length; this.height=length; resize(length,height);} public void setHeight(int height) { this.height=height; resize(length,height);} public void setBorderColor(Color borderColor) { this.borderColor=borderColor;} public void setBackgroundColor(Color backgroundColor) { this.backgroundColor=backgroundColor;} public void paint(Graphics cs) { if(!initialized) { resize(length,height);} cs.setColor(backgroundColor); cs.fillRect(0,0,length-1,height-1); cs.setColor(borderColor); for(int i=0; i < borderWidth; i++) cs.drawRect(0+i,0+i,length-1-i-i,height-1-i-i); paintValue(cs);} public void paintValue(Graphics cs) {}} class Positives extends Positive { static Vector items=new Vector(); Positives() { items.addElement(this);} public void onPressedRedef() { recalc();} void recalc() { int n=1; for(int i=10; i > 0; i--) { Positive px=(Positive) items.elementAt(i-1); px.positive((pressed & n) > 0); n *= 2; px.repaint();}}} class Numbers { static Object it; Object[] cur1; Object[] cur2; String op; int idx; boolean containsDot; Numbers() { cur1=new Object[11]; cur2=new Object[11]; idx=10; for(int i=0; i < 11; i++) { cur1[i]=new Integer(0); cur2[i]=new Integer(0);} containsDot=false; op=null;} static Numbers instance() { if(it==null) it=new Numbers(); return(Numbers) it;} public void input(int value) { if(idx < 0) return; for(int i=0; i < 10; i++) cur1[i]=cur1[i+1]; cur1[10]=new Integer(value); idx--; prinRecords(); DevItem.redraw(cur1);} public void inputDot() { if(idx < 0) return; if(containsDot) return; for(int i=0; i < 10; i++) cur1[i]=cur1[i+1]; cur1[10]=new String("."); idx--; containsDot=true; prinRecords(); DevItem.redraw(cur1);} public void inputOp(String ops) { if(op !=null) return; op=ops; for(int i=0; i < 11; i++) { cur2[i]=cur1[i]; cur1[i]=new Integer(0);} containsDot=false; idx=10; prinRecords();} public void inputEq() { if(op==null) return; Object[] mcR=null; boolean c1Pos=isPositive(cur1); boolean c2Pos=isPositive(cur2); if(op.equals("+")) { if(c1Pos) { if(c2Pos) { mcR=addPositives(cur1,cur2);} else { if(gtMod(cur1,cur2) > 0) { ngt(cur2); mcR=subPositives(cur1,cur2);} else { ngt(cur2); mcR=subPositives(cur2,cur1); ngt(mcR);}}} else { if(c2Pos) { if(gtMod(cur2,cur1) > 0) { ngt(cur1); mcR=subPositives(cur2,cur1);} else { ngt(cur1); mcR=subPositives(cur1,cur2); ngt(mcR);}} else { ngt(cur1); ngt(cur2); mcR=addPositives(cur1,cur2); ngt(mcR);}}} else if(op.equals("-")) { if(c1Pos) { if(c2Pos) { if(gtMod(cur2,cur1) > 0) { mcR=subPositives(cur2,cur1);} else { mcR=subPositives(cur1,cur2); ngt(mcR);}} else { ngt(cur2); mcR=addPositives(cur1,cur2); ngt(mcR);}} else { if(c2Pos) { ngt(cur1); mcR=addPositives(cur1,cur2);} else { if(gtMod(cur2,cur1) > 0) { ngt(cur1); ngt(cur2); mcR=subPositives(cur2,cur1); ngt(mcR);} else { ngt(cur1); ngt(cur2); mcR=subPositives(cur1,cur2);}}}} else if(op.equals("*")) { if(c1Pos) { if(c2Pos) { mcR=multPositives(cur2,cur1);} else { ngt(cur2); mcR=multPositives(cur2,cur1); ngt(mcR);}} else { if(c2Pos) { ngt(cur1); mcR=multPositives(cur2,cur1); ngt(mcR);} else { ngt(cur1); ngt(cur2); mcR=multPositives(cur2,cur1);}}} else if(op.equals("/")) { if(c1Pos) { if(c2Pos) { mcR=divPositives(cur2,cur1);} else { ngt(cur2); mcR=divPositives(cur2,cur1); ngt(mcR);}} else { if(c2Pos) { ngt(cur1); mcR=divPositives(cur2,cur1); ngt(mcR);} else { ngt(cur1); ngt(cur2); mcR=divPositives(cur2,cur1);}}} idx=0-1; containsDot=false; for(int i=0; i < 11; i++) { cur1[i]=mcR[i]; cur2[i]=mcR[i]; if(mcR[i] instanceof String &&((String) mcR[i]).equals(".")) containsDot=true;} op=null; prinRecords(); DevItem.redraw(cur1);} Object[] addPositives(Object[] cur11,Object[] cur22) { Object[] mcR=null; boolean d=false; Integer[] ic1=intPart(cur11); Integer[] dc1=decPart(cur11); Integer[] ic2=intPart(cur22); Integer[] dc2=decPart(cur22); if(d) prin("ic1",ic1); if(d) prin("ic2",ic2); Integer[] rr=new Integer[1]; Integer[] icR=add(ic1,ic2,rr); if(d) prin("icR",icR); if(d) prin("dc1",dc1); if(d) prin("dc2",dc2); Integer[] dcR=add(dc1,dc2,rr); if(d) prin("dcR",dcR); mcR=merge(icR,rr[0].intValue(),dcR); rightShift(mcR); if(d) prin("mcR",mcR); if(d) System.out.println(""); return mcR;} Object[] subPositives(Object[] cur11,Object[] cur22) { Object[] mcR=null; boolean d=false; Integer[] ic1=intPart(cur11); Integer[] dc1=decPart(cur11); Integer[] ic2=intPart(cur22); Integer[] dc2=decPart(cur22); if(d) prin("ic1",ic1); if(d) prin("ic2",ic2); Integer[] rr=new Integer[1]; Integer[] icR=sub(ic1,ic2,rr); if(d) prin("icR",icR); if(d) prin("dc1",dc1); if(d) prin("dc2",dc2); Integer[] dcR=sub(dc1,dc2,rr); if(d) prin("dcR",dcR); mcR=merge(icR,rr[0].intValue(),dcR); rightShift(mcR); if(d) prin("mcR",mcR); if(d) System.out.println(""); return mcR;} Object[] divPositives(Object[] cur11,Object[] divider) { int dn=calcPoints(divider); int decNum=calcPoints(cur11)-dn; cur11=noPoints(cur11); divider=noPoints(divider); while(dn--> 0) { putItem(cur11,new Integer(0)); decNum++;} int missed=0; while(gtMod(cur11,divider) < 0) { putItem(cur11,new Integer(0)); missed++;} if(missed > 0 && decNum < 0) { missed+=decNum; decNum=0;} boolean decNumPositive=decNum > 0; int one; boolean started=false; boolean first=true; Object[] mcR=new Object[cur11.length]; Object[] copy=new Object[cur11.length]; Object[] mt=new Object[copy.length]; for(int i=0; i < mcR.length; i++) { mcR[i]=new Integer(0); copy[i]=new Integer(0); mt[i]=new Integer(0);} if(missed > 0) { putItem(mcR,new Integer(0)); putItem(mcR,new String(".")); while(--missed > 0) putItem(mcR,new Integer(0)); if(decNumPositive) decNum=-1; else decNum=1;} else if(decNum > 0) { putItem(mcR,new Integer(0)); putItem(mcR,new String(".")); while(--decNum > 1) putItem(mcR,new Integer(0)); if(decNumPositive) decNum=-1; else decNum=1;} int startIdx=0; for(int i=0; startIdx <= 0 && i < cur11.length; i++) if(((Integer) cur11[i]).intValue() !=0) startIdx=i; int mlt; for(int k=0; k < 31; k++) { if(isNol(copy) && startIdx >= cur11.length) { k+=100; continue;} one=0; while(gtMod(copy,divider) < 0) { if(startIdx < cur11.length) { putItem(copy,cur11[startIdx++]); if(started && one > 0) putItem(mcR,new Integer(0)); one++;} else { putItem(copy,new Integer(0)); if(first) { putItem(mcR,new Integer(0)); first=false;} if(decNum==0) putItem(mcR,new String(".")); if(decNumPositive) decNum--; else decNum++;}} mlt=0; do { mlt+=1; mt[mt.length-1]=new Integer(mlt);} while(gtMod(multPositives(divider,mt),copy) <= 0); mlt--; mt[mt.length-1]=new Integer(mlt); copy=subPositives(copy,multPositives(divider,mt)); started=true; first=false; putItem(mcR,new Integer(mlt)); while(startIdx < cur11.length && isNol(copy) &&((Integer) cur11[startIdx]).intValue()==0) { putItem(mcR,new Integer(0)); startIdx++;}} return mcR;} boolean isNol(Object[] copy) { boolean res=true; for(int i=0; res && i < copy.length; i++) if(((Integer) copy[i]).intValue() !=0) res=false; return res;} Object[] multPositives(Object[] cur11,Object[] cur22) { Object[] mcR=null; int decNum=calcPoints(cur11)+calcPoints(cur22); cur11=noPoints(cur11); cur22=noPoints(cur22); Integer[] summary=new Integer[cur11.length+cur22.length]; for(int i=0; i < summary.length; i++) summary[i]=new Integer(0); for(int i=cur11.length-1; i >= 0; i--) { for(int j=cur22.length-1; j >= 0; j--) { int idx=summary.length-1-cur22.length+1+j-cur11.length+1+i; summary[idx]=new Integer(((Integer) summary[idx]).intValue()+((Integer) cur11[i]).intValue() *((Integer) cur22[j]).intValue());}} int rest=0; for(int i=summary.length-1; i >= 0; i--) { int c=((Integer) summary[i]).intValue()+rest; int m=c-c / 10 * 10; rest=(c-m) / 10; summary[i]=new Integer(m);} mcR=new Object[cur11.length]; for(int i=0; i < mcR.length; i++) mcR[i]=new Integer(0); boolean ready=false; for(int i=0; i < summary.length; i++) { if(!ready && !summary[i].equals(new Integer(0))) ready=true; if(ready) putItem(mcR,summary[i]);} if(decNum > 0) repoint(mcR,decNum); return mcR;} Object[] noPoints(Object[] its) { Object[] res=new Object[its.length]; for(int i=0; i < res.length; i++) res[i]=new Integer(0); for(int i=0; i < res.length; i++) if(its[i] instanceof Integer) putItem(res,its[i]); return res;} int calcPoints(Object[] its) { int res=0; boolean spf=false; for(int i=0; i < its.length; i++) { if(spf) res+=1; if(its[i] instanceof String &&((String) its[i]).equals(".")) spf=true;} return res;} void prinRecords() { if(1+1 > 1-1) return; for(int i=0; i < 11; i++) System.out.print(" "+cur1[i]); System.out.print("  "); for(int i=0; i < 11; i++) System.out.print(" "+cur2[i]); System.out.println(" op="+op);} void rightShift(Object[] test) { boolean hasDot=false; for(int i=0; hasDot==false && i < test.length; i++) if(test[i] instanceof String &&((String) test[i]).equals(".")) hasDot=true; if(hasDot) while(test[test.length-1] instanceof Integer &&((Integer) test[test.length-1]).intValue()==0) { for(int i=test.length-1; i > 0; i--) test[i]=test[i-1]; test[0]=new Integer(0);} if(hasDot) while(test[test.length-1] instanceof String &&((String) test[test.length-1]).equals(".")) { for(int i=test.length-1; i > 0; i--) test[i]=test[i-1]; test[0]=new Integer(0);}} Object[] merge(Integer[] icR,int r,Integer[] dcR) { boolean hasNotNolDcr=false; for(int i=0; hasNotNolDcr==false && i < dcR.length; i++) if(dcR[i].intValue() !=0) hasNotNolDcr=true; if(r !=0) { Integer[] rr=new Integer[1]; Integer[] nk=new Integer[icR.length]; for(int i=0; i < nk.length; i++) nk[i]=new Integer(i < nk.length-1 ? 0 : 1); if(r < 0) icR=sub(icR,nk,rr); if(r > 0) icR=add(icR,nk,rr);} Object[] rcv=new Object[icR.length]; for(int i=0; i < rcv.length; i++) rcv[i]=new Integer(icR[i].intValue()); if(hasNotNolDcr) { putItem(rcv,"."); for(int i=0; i < dcR.length; i++) putItem(rcv,dcR[i]);} return rcv;} void repoint(Object[] rcv,int decNum) { for(int i=0; i < rcv.length-1-decNum; i++) rcv[i]=rcv[i+1]; rcv[rcv.length-1-decNum]=new String(".");} void putItem(Object[] rcv,Object item) { if(rcv[0] instanceof Integer &&((Integer) rcv[0]).intValue()==0 && !(rcv[1] instanceof String && rcv[1].equals("."))) { for(int i=0; i < rcv.length-1; i++) rcv[i]=rcv[i+1]; rcv[rcv.length-1]=item;}} void prin(String name,Object[] ic1) { System.out.print(""+name+"={"); for(int i=0; i < ic1.length; i++) System.out.print((i==0 ? "" : " ")+ic1[i]); System.out.print("} ");} void ngt(Object[] ic) { for(int i=0; i < ic.length; i++) if(ic[i] instanceof Integer) ic[i]=new Integer(-((Integer) ic[i]).intValue());} boolean isPositive(Object[] ic) { boolean pos=true; for(int i=0; pos && i < ic.length; i++) if(ic[i] instanceof Integer) if(((Integer) ic[i]).intValue() < 0) pos=false; return pos;} Integer[] add(Object[] ic1,Object[] ic2,Object[] r) { int pos1=ic1.length-1; int pos2=ic2.length-1; int next=0; Integer[] icR=new Integer[11]; for(int i=0; i < icR.length; i++) { int crx=0; if(pos1 >= 0) crx+=((Integer) ic1[pos1--]).intValue(); if(pos2 >= 0) crx+=((Integer) ic2[pos2--]).intValue(); if(next > 0) crx+=1; next=0; if(crx >= 10) { next=1; crx-=10;} icR[10-i]=new Integer(crx);} r[0]=new Integer(next); return icR;} Integer[] sub(Object[] ic1,Object[] ic2,Object[] r) { int pos1=ic1.length-1; int pos2=ic2.length-1; int prev=0; Integer[] icR=new Integer[11]; for(int i=0; i < icR.length; i++) { int crx=0; if(pos1 >= 0) crx+=((Integer) ic1[pos1--]).intValue(); if(pos2 >= 0) crx-=((Integer) ic2[pos2--]).intValue(); if(prev > 0) crx-=1; prev=0; if(crx < 0) { prev=1; crx+=10;} icR[10-i]=new Integer(crx);} r[0]=new Integer(-prev); return icR;} int gtMod(Object[] ic11,Object[] ic22) { Integer[] ic1=intPart(ic11); Integer[] dc1=decPart(ic11); Integer[] ic2=intPart(ic22); Integer[] dc2=decPart(ic22); for(int i=0; i < ic1.length; i++) { int first=((Integer) ic1[i]).intValue(); int second=((Integer) ic2[i]).intValue(); if(first > 0 && first > second) return 1; if(first < 0 && first < second) return 1; if(first > 0 && first < second) return-1; if(first < 0 && first > second) return-1; if(first==0 && second !=0) return-1; if(first !=0 && second==0) return 1;} for(int i=0; i < dc1.length; i++) { int first=((Integer) dc1[i]).intValue(); int second=((Integer) dc2[i]).intValue(); if(first > 0 && first > second) return 1; if(first < 0 && first < second) return 1; if(first > 0 && first < second) return-1; if(first < 0 && first > second) return-1; if(first==0 && second !=0) return-1; if(first !=0 && second==0) return 1;} return 1-1;} void ngt(Integer[] ic) { for(int i=0; i < ic.length; i++) ic[i]=new Integer(-ic[i].intValue());} int gt(Integer[] ic1,Integer[] ic2) { for(int i=0; i < ic1.length; i++) { if(ic1[i].intValue() > ic2[i].intValue()) return 1; if(ic1[i].intValue() < ic2[i].intValue()) return-1;} return 1-1;} Integer[] intPart(Object[] whole) { int dotPos=-1; for(int i=0; dotPos==-1 && i < whole.length; i++) if(whole[i] instanceof String &&((String) whole[i]).equals(".")) dotPos=i; if(dotPos >= 0) { Integer[] ar=new Integer[whole.length]; for(int j=0; j < ar.length; j++) if(j < whole.length-dotPos) ar[j]=new Integer(0); else ar[j]=new Integer(((Integer) whole[j-whole.length+dotPos]).intValue()); return ar;} Integer[] ar=new Integer[whole.length]; for(int j=0; j < ar.length; j++) ar[j]=new Integer(((Integer) whole[j]).intValue()); return ar;} Integer[] decPart(Object[] whole) { int dotPos=-1; for(int i=0; dotPos==-1 && i < whole.length; i++) if(whole[i] instanceof String &&((String) whole[i]).equals(".")) dotPos=i; if(dotPos !=-1) { Integer[] ar=new Integer[whole.length]; for(int j=0; j < ar.length; j++) if(j < whole.length-dotPos-1) ar[j]=new Integer(((Integer) whole[dotPos+j+1]).intValue()); else ar[j]=new Integer(0); return ar;} Integer[] ar=new Integer[whole.length]; for(int j=0; j < ar.length; j++) ar[j]=new Integer(0); return ar;}}
