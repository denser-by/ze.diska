package mydev.classes; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.util.Hashtable; import java.util.Vector; import mydev.vutils.Files; import mydev.vutils.Filter; import mydev.vutils.Join; import mydev.vutils.Time; import mydev.oneway.OneWay; public class Classes { final String START="48,80677,1380057488548"; Files files; Filter filter; Join join; byte[] data; public Classes() { this.files=new Files(); this.filter=new Filter(); this.join=new Join(); this.data=new byte[0];} public String[] allSrc(String srcRoot) { String[] all=files.tree(srcRoot); String[] srcs1=filter.endsWith(all,".java"); return srcs1;} public String[] allCls(String srcRoot) { String[] all=files.tree(srcRoot); String[] srcs5=filter.endsWith(all,".class"); return srcs5;} public long sizeof(String[] files) { long onno=0L; for(int k=0; k < files.length; k++) onno+=sizeof_worthy(files[k]); return onno;} public static void main(String[] args) throws IOException { Classes trend=new Classes(); if(args.length >= 1) { Time time=new Time(); time.start(); ClassesMeta cmt=new ClassesMeta(); cmt.srcRoot=trend.files.absPath(args[0]); if(!cmt.srcRoot.endsWith(""+trend.files.c())) cmt.srcRoot+=trend.files.c(); cmt.srcFiles=trend.allSrc(cmt.srcRoot); cmt.clsFiles=trend.allCls(cmt.srcRoot); cmt.srcFilesSize=trend.sizeof(cmt.srcFiles); cmt.clsFilesSize=trend.sizeof(cmt.clsFiles); trend.calc(cmt.srcFiles,cmt); System.out.println("K------------------------------------------------------------------------------"); String on=trend.build(trend.data,cmt.clsFiles.length,cmt.clsFilesSize); System.out.println(""+on); time.trust(); System.out.println("                                                 Zatrachana : "+time.ess());} else System.out.println("No params at all...");} public void calc(String[] srcs,ClassesMeta cm) throws IOException { Hashtable ht=new Hashtable(); int pe=0; System.out.println(""); for(int i=0; i < srcs.length; i++) { OneWay ow=new OneWay(); byte[] data=read(srcs[i]); String[] pieces=null; try { pieces=ow.check(data,1); } catch(Exception ex) { pe++; System.out.print("  "+srcs[i]); System.out.println("  FAIL");} if(pieces !=null) for(int j=0; j < pieces.length; j++) { String item=pieces[j]; if(item !=null) { Long num=(Long) ht.get(item); long next=num !=null ? num.longValue() : 0L; ht.put(item,new Long(next+1));} } } System.out.println("Parsing errors : "+pe); System.out.println("K------------------------------------------------------------------------------"); cm.print(); System.out.println("K------------------------------------------------------------------------------"); Long ifNum=(Long) ht.get("if"); Long caseNum=(Long) ht.get("case"); Long forNum=(Long) ht.get("for"); Long whileNum=(Long) ht.get("while"); Long returnNum=(Long) ht.get("return"); Long incrNum=(Long) ht.get("++"); Long decrNum=(Long) ht.get("--"); Long andNum=(Long) ht.get("&&"); Long orNum=(Long) ht.get("||"); System.out.print("| if:"+ifNum); System.out.print("  case:"+caseNum); System.out.print("  for:"+forNum); System.out.print("  while:"+whileNum); System.out.print("  ++:"+incrNum); System.out.print("  --:"+decrNum); System.out.print("  &&:"+andNum); System.out.print("  ||:"+orNum); System.out.println(""); Long c1Num=(Long) ht.get("=="); Long c2Num=(Long) ht.get("!="); Long c3Num=(Long) ht.get(">"); Long c4Num=(Long) ht.get(">="); Long c5Num=(Long) ht.get("<"); Long c6Num=(Long) ht.get("<="); Long c7Num=(Long) ht.get("="); Long c8Num=(Long) ht.get("!"); Long opNum=(Long) ht.get(";"); System.out.print("| = :"+c7Num); System.out.print("  ==:"+c1Num); System.out.print("  !=:"+c2Num); System.out.print("  > :"+c3Num); System.out.print("  >=:"+c4Num); System.out.print("  < :"+c5Num); System.out.print("  <=:"+c6Num); System.out.print("  ! :"+c8Num); System.out.println(""); Long ebNum=(Long) ht.get("}"); Long be1Num=(Long) ht.get("]"); Long be2Num=(Long) ht.get(")"); Long p1Num=(Long) ht.get("+"); Long p2Num=(Long) ht.get("-"); Long p3Num=(Long) ht.get("*"); Long p4Num=(Long) ht.get("/"); long p14=p1Num.longValue()+p2Num.longValue()+p3Num.longValue()+p4Num.longValue(); Long importNum=(Long) ht.get("import"); Long classNum=(Long) ht.get("class"); Long interfaceNum=(Long) ht.get("interface"); Long qNum=(Long) ht.get("?"); Long commaNum=(Long) ht.get(","); Long dqNum=(Long) ht.get("""); Long sqNum=(Long) ht.get("'"); System.out.print("| {}:"+ebNum); System.out.print("  []:"+be1Num); System.out.print("  ():"+be2Num); System.out.print("  */+-:"+p14); System.out.print("  ? :"+qNum); System.out.print("  , :"+commaNum); System.out.print("  " :"+dqNum); System.out.print("  ' :"+sqNum); System.out.println(""); Long mainNum=(Long) ht.get("main"); System.out.print("| ; :"+opNum); System.out.print("  main:"+mainNum); System.out.print("  return:"+returnNum); System.out.print("  import:"+importNum); System.out.print("  class:"+classNum); System.out.print("  interface:"+interfaceNum); System.out.println(""); Long dotNum=(Long) ht.get("."); Long byteNum=(Long) ht.get("byte"); Long shortNum=(Long) ht.get("short"); Long intNum=(Long) ht.get("int"); Long longNum=(Long) ht.get("long"); Long StringNum=(Long) ht.get("String"); System.out.print("| . :"+dotNum); System.out.print("  byte:"+byteNum); System.out.print("  short:"+shortNum); System.out.print("  int:"+intNum); System.out.print("  long:"+longNum); System.out.print("  String:"+StringNum); System.out.println("");} String prepare(String path) { int idx=path.lastIndexOf("/"); int idx2=path.lastIndexOf("\\"); int max=idx2 > idx ? idx2 : idx; int dot=path.lastIndexOf(".class"); return path.substring(max+1,dot);} public byte[] read(String fPath) throws IOException { File fOpen=new File(fPath); FileInputStream fos=new FileInputStream(fOpen); Hashtable ht=new Hashtable(); int htKey=0; int vPower=0; int count; byte[] buf=new byte[4096]; do { count=fos.read(buf); if(count > 0) vPower+=count; if(count < 1) continue; if(count <= 4096) { byte[] zzz=new byte[count]; System.arraycopy(buf,0,zzz,0,count); ht.put((Object) new Integer(htKey++),(Object) zzz);}} while(count > 0); fos.close(); byte[] total=new byte[vPower]; int totalIdx=0; for(int i=0; i < htKey; i++) { byte[] cur=(byte[]) ht.get((Object) new Integer(i)); int curLen=cur.length; System.arraycopy(cur,0,total,totalIdx,curLen); totalIdx+=curLen;} return total;} public void write(String fPath,byte[] bCont) throws IOException { File wOpen=new File(fPath); FileOutputStream os=new FileOutputStream(wOpen); os.write(bCont); os.flush(); os.close();} public long sizeof_worthy(String fPath) { File fOpen=new File(fPath); FileInputStream fos=null; try { fos=new FileInputStream(fOpen);} catch(IOException ex) { fos=null;} long vPower=0L; if(fos !=null) { int count=0; byte[] buf=new byte[4096 * 4096]; do { try { count=fos.read(buf);} catch(IOException ex) {} if(count > 0) vPower+=(long) count;} while(count > 0); try { fos.close();} catch(IOException ex) {}} return vPower;} public String build(byte[] data,int allClasses,long allSize) { StringBuffer buf=new StringBuffer(); buf.append("  Trend : ").append("\n"); char[] dataCh=new char[data.length]; for(int i=0; i < data.length; i++) { dataCh[i]=(char) data[i];} String dataStr=START; int idx=dataStr.indexOf(","); int idx2=dataStr.lastIndexOf(","); Long prevShtuk=new Long(dataStr.substring(0,idx)); Long prevBytez=new Long(dataStr.substring(idx+1,idx2)); Long prevTime=new Long(dataStr.substring(idx2+1)); long timeDeltaMin=(System.currentTimeMillis()-prevTime.longValue()) /(60 * 1000); if(allClasses !=prevShtuk.longValue()) { long shtuk1000Min=1000L * timeDeltaMin /((long) allClasses-prevShtuk.longValue()); buf.append("    1000 shtuchek in approx. ").append(shtuk1000Min).append(" min");} else { buf.append("    1000 shtuchek in approx. ").append(" limitless...");} buf.append("\n"); if(allSize !=prevBytez.longValue()) { long size1000000Min=1000000L * timeDeltaMin /((long) allSize-prevBytez.longValue()); buf.append("    1000000 bytevz in approx. ").append(size1000000Min).append(" min");} else { buf.append("    1000000 bytevz in approx. ").append(" limitless...");} return buf.toString();}} class ClassesMeta { String srcRoot; String[] srcFiles; long srcFilesSize; String[] clsFiles; long clsFilesSize; ClassesMeta() {} void print() { System.out.println("| srcRoot "+srcRoot); System.out.println("| *.java  "+srcFiles.length+" files "+srcFilesSize+" bytes"); System.out.println("| *.class "+clsFiles.length+" files "+clsFilesSize+" bytes");}}
