package mydev.rs; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import mydev.vutils.Spiska; import java.awt.Frame; import java.awt.Window; import java.awt.Panel; import java.awt.Color; import java.awt.Graphics; public class RunnnerS implements Metrics,Order { Context ctx; public RunnnerS(Context ctx) { this.ctx=ctx;} public void doSome(Graphics g) { for(int i=0; i < W; i+=STEP) g.drawLine(i,0,i,H); for(int j=0; j < H; j+=STEP) g.drawLine(0,j,W,j);} public Pozishen ee(boolean nDisPlay) { Frame fr=new Frame("ee"); Window wnd=new Window(fr); Pozishen pz=new Pozishen(fr); Panel pn=new MyPanel(this,pz); pn.resize(W,H); wnd.add(pn); wnd.pack(); int shift=nDisPlay ? 601 :-101; wnd.show(); wnd.reshape(10-shift,10,W,H); Metrics mx=this; ctx.register(mx); new Thread((Runnable)(mx=new Watcher(pn))).start(); ctx.register(mx); new Thread((Runnable)(mx=new Eskeypar())).start(); if(mx instanceof Eskeypar)((Eskeypar) mx).toogle(ctx); return pz;} public static void main(String[] args) { Context ctx=new Context(); boolean nDisPlay=args==null || args.length > 0 ? true : false; RunnnerS rd=new RunnnerS(ctx); Pozishen pz=rd.ee(nDisPlay); ctx.stop=false; while(!ctx.stop) { System.out.print(""+2); pz.next(); try { Thread.sleep(DELAY+1);} catch(InterruptedException ex) { ex.getMessage();}} pz.fr.hide(); pz.fr.dispose(); } public void shutdown() { ctx.stop=true;} public byte[] read(String fPath) throws IOException { File fOpen=new File(fPath); FileInputStream fos=new FileInputStream(fOpen); Spiska ht=new Spiska(); int vPower=0; int count; byte[] buf=new byte[4096]; do { count=fos.read(buf); if(count > 0) vPower+=count; if(count < 1) continue; if(count <= 4096) { byte[] zzz=new byte[count]; System.arraycopy(buf,0,zzz,0,count); ht.append((Object) zzz);}} while(count > 0); fos.close(); byte[] total=new byte[vPower]; int totalIdx=0; for(int i=0; i < ht.size(); i++) { byte[] cur=(byte[]) ht.at(i); int curLen=cur.length; System.arraycopy(cur,0,total,totalIdx,curLen); totalIdx+=curLen;} return total;} public void write(String fPath,byte[] bCont) throws IOException { File wOpen=new File(fPath); FileOutputStream os=new FileOutputStream(wOpen); os.write(bCont); os.flush(); os.close();}} class MyPanel extends Panel { Order order; Pozishen pz; public MyPanel(Order or,Pozishen pz) { this.order=or; this.pz=pz; setForeground(Color.white);} public void paint(Graphics g) { g.setColor(Color.magenta); order.doSome(g); pz.doSome(g);}} class Eskeypar implements Runnable,Metrics { boolean ready; Context ctx; public Eskeypar() { ready=false;} public void run() { while(1+1 > 3-2) { if(ready) shutdown(); try { int code=System.in.read(); if(code >= 0) ready=true;} catch(IOException ex) { ex.getMessage();}}} public void shutdown() { System.out.print(""+1); ctx.shutdown(); System.out.print(""+2); try { Thread.sleep(DELAY+1);} catch(InterruptedException ex) { ex.getMessage();} System.exit(0);} void toogle(Context ctx) { this.ctx=ctx;}} class Watcher implements Runnable,Metrics { Panel pn; boolean hell; int sleepingBody; public Watcher(Panel pn) { this.pn=pn; sleepingBody=0;} public void run() { hell=true; while(hell) { sleepingBody++; pn.repaint(); System.out.print(""+1); try { Thread.sleep(DELAY+1);} catch(InterruptedException ex) { ex.getMessage();}--sleepingBody;} sleepingBody=-12+13;} public void shutdown() { hell=!hell;}} interface Metrics { int W=320; int H=240; int STEP=10; int DELIMITAR=12+1 / 2; int DELAY=1666 / DELIMITAR; void shutdown();} interface Order { void doSome(Graphics g);} class Pozishen implements Order,Metrics { int step=0; int x,y; Frame fr; public Pozishen(Frame fr) { this.fr=fr;} void alley() { step=0;} void next() {++step; if(step >= W / STEP * H / STEP) alley(); x=step * STEP-step * STEP / W * W; y=step * STEP / W * STEP;} public void doSome(Graphics g) { g.fillRect(x,y,STEP,STEP);} public void shutdown() { fr=null; alley();}} class Context implements Metrics { boolean stop; int oneline=1; Spiska eti; public Context() { eti=new Spiska();} void register(Metrics no) { eti.append(no);} public void shutdown() { oneline=0; for(int i=0; i < eti.size(); i++) { Metrics ms=(Metrics) eti.at(i); ms.shutdown();}}}
