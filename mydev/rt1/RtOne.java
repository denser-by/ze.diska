package mydev.rt1; import java.awt.BorderLayout; import java.awt.Button; import java.awt.Canvas; import java.awt.Color; import java.awt.Event; import java.awt.FileDialog; import java.awt.FlowLayout; import java.awt.Font; import java.awt.Frame; import java.awt.Graphics; import java.awt.Image; import java.awt.Label; import java.awt.Menu; import java.awt.MenuBar; import java.awt.MenuItem; import java.awt.Panel; import java.awt.Point; import java.awt.Toolkit; import java.awt.Window; import java.awt.image.ColorModel; import java.awt.image.ImageConsumer; import java.awt.image.ImageObserver; import java.awt.image.MemoryImageSource; import java.util.Hashtable; public class RtOne extends Frame { Window wnd; private CnvInput cnvInput1; private CnvResult cnvResult1; private Label fileInfo; private MenuItem itOpen; private MenuItem err; private MenuItem idx; private PanelStart ps; private Label requestInfo; private Button start; private Button p0,p1,p2,p3,p30,p40,p50; private MenuItem test; private MenuItem upd; public RtOne(String title) { super(title);} public static void main(String[] args) { Frame fr=new RtOne("RtOne");((RtOne) fr).runApp1();} private MenuBar createMenu1() { MenuBar mb=new MenuBar(); Menu a1=new Menu("File"); a1.add(itOpen=new MenuItem("Open")); a1.add(upd=new MenuItem("Update")); a1.add(err=new MenuItem("Exit")); mb.add(a1); Menu a2=new Menu("About"); a2.add(idx=new MenuItem("Index")); mb.add(a2); return mb;} private void exitApp1() { hide(); dispose();} public boolean handleEvent(Event et) { if(et.id==Event.ACTION_EVENT && et.target==itOpen) openFile1(); if(et.id==Event.ACTION_EVENT && et.target==upd) openFile1Upd(); if(et.id==Event.ACTION_EVENT && et.target==start) processStart1(); if(et.id==Event.ACTION_EVENT && et.target==p0) compute(0); if(et.id==Event.ACTION_EVENT && et.target==p1) compute(1); if(et.id==Event.ACTION_EVENT && et.target==p2) compute(2); if(et.id==Event.ACTION_EVENT && et.target==p3) compute(3); if(et.id==Event.ACTION_EVENT && et.target==p30) compute(30); if(et.id==Event.ACTION_EVENT && et.target==p40) compute(40); if(et.id==Event.ACTION_EVENT && et.target==p50) compute(50); if(et.id==Event.WINDOW_DESTROY) exitApp1(); if(et.id==Event.ACTION_EVENT && et.target==err) exitApp1(); if(et.id==Event.ACTION_EVENT && et.target==idx) { requestInfo.setText("five minutes were spending"); fileInfo.setText("123dis");} return super.handleEvent(et);} private void compute(int cval) { Comparer.dtx=cval; cnvResult1.invalidate(); cnvResult1.repaint();} private void openFile1() { FileDialog fd=new FileDialog(this,"Select Image File"); fd.show(true); String dir=fd.getDirectory(); String file=fd.getFile(); fileInfo.setText(dir+file); cnvInput1.loadItem(dir+file); cnvInput1.update();} private void openFile1Upd() { cnvInput1.update();} private void processStart1() { cnvInput1.createItem(); cnvInput1.update();} private void runApp1() { setMenuBar(createMenu1()); wnd=new Window(this); setLayout(new BorderLayout()); cnvResult1=new CnvResult(); ImageSelector is=new ImageSelector(cnvResult1); add("West",cnvInput1=new CnvInput(is)); add("East",cnvResult1); add("South",fileInfo=new Label()); fileInfo.setBackground(Color.black); fileInfo.setForeground(Color.white); add("North",requestInfo=new Label()); requestInfo.setBackground(Color.black); requestInfo.setForeground(Color.white); requestInfo.setText("Choose image for processing.."); add("Center",ps=new PanelStart()); ps.add(start=new Button("Start")); ps.add(p0=new Button("similar 0")); ps.add(p1=new Button("similar 1")); ps.add(p2=new Button("similar 2")); ps.add(p3=new Button("similar 3")); ps.add(p30=new Button("similar 30")); ps.add(p40=new Button("similar 40")); ps.add(p50=new Button("similar 50")); pack(); show(); resize(800+100,600); move(100,100);}} class CnvInput extends Canvas implements ImageObserver { final int BR=10; final int DT=5; Image img1; Image img2; NskConsumer nskConsumer; ImageSelector resp; Point selection; Point selectionStart; Point selectionStop; public CnvInput(ImageSelector resp) { super(); this.resp=resp; resize(400,300); setBackground(Color.yellow);} public boolean imageUpdate(Image img,int p1,int p2,int p3,int p4,int p5) { boolean imageUpdate=super.imageUpdate(img,p1,p2,p3,p4,p5); update(); return imageUpdate;} public void createItem() { img1=createImage(640,480); Graphics cs=img1.getGraphics(); cs.setColor(Color.white); cs.fillRect(0,0,640,480); cs.setColor(Color.black); for(int i=0; i < 480; i+=2) cs.drawLine(0,i,640-1,i); cs.setColor(Color.white); cs.fillRect(147,101,280-147,163-101); cs.setColor(Color.yellow); cs.setFont(new Font(cs.getFont().getFamily(),Font.BOLD,36)); cs.drawString("123dis",147+(280-147) / 47,101+(163-101) * 7 / 11); img2=createImage(1000,1000); nskConsumer=null;} public void loadItem(String img) { img1=Toolkit.getDefaultToolkit().getImage(img); img2=createImage(1000,1000); nskConsumer=null;} public boolean mouseDown(Event evt,int p1,int p2) { selectionStart=new Point(p1,p2); selectionStop=null; selection=null; boolean mouseDown=super.mouseDown(evt,p1,p2); update(); return mouseDown;} public boolean mouseDrag(Event evt,int p1,int p2) { selection=new Point(p1,p2); boolean mouseDrag=super.mouseDrag(evt,p1,p2); update(); return mouseDrag;} public boolean mouseUp(Event evt,int p1,int p2) { selectionStop=new Point(p1,p2); selection=null; boolean mouseUp=super.mouseUp(evt,p1,p2); update(); if(selectionStart !=null && selectionStop !=null) selectionComplete(selectionStart,selectionStop,nskConsumer); return mouseUp;} public void paint(Graphics cs) { super.paint(cs); if(img1 !=null && img2 !=null) img2.getGraphics().drawImage(img1,0,0,this); if(img2 !=null) cs.drawImage(img2,BR,BR,this); if(img1 !=null) if(nskConsumer==null) img1.getSource().startProduction(nskConsumer=new NskConsumer()); if(selectionStart !=null && selectionStop !=null) { cs.setColor(Color.black); rectoongle(cs,selectionStart,selectionStop);} if(selectionStart !=null && selection !=null) { cs.setColor(Color.white); rectoongle(cs,selectionStart,selection);}} private void rectoongle(Graphics cs,Point s1,Point s2) { int x1,x2,y1,y2; x1=s1.x >= s2.x ? s1.x : s2.x; x2=s1.x < s2.x ? s1.x : s2.x; y1=s1.y >= s2.y ? s1.y : s2.y; y2=s1.y < s2.y ? s1.y : s2.y; if(x1-x2 < DT) return; if(y1-y2 < DT) return; cs.drawLine(x1,y1,x2,y1); cs.drawLine(x2,y1,x2,y2); cs.drawLine(x2,y2,x1,y2); cs.drawLine(x1,y2,x1,y1);} private void selectionComplete(Point s1,Point s2,NskConsumer nskConsumer) { int x1,x2,y1,y2; x1=s1.x >= s2.x ? s1.x : s2.x; x2=s1.x < s2.x ? s1.x : s2.x; y1=s1.y >= s2.y ? s1.y : s2.y; y2=s1.y < s2.y ? s1.y : s2.y; if(nskConsumer !=null) { nskConsumer.start(10,10); x1=x1 < nskConsumer.getxStart() ? nskConsumer.getxStart() : x1; x2=x2 < nskConsumer.getxStart() ? nskConsumer.getxStart() : x2; y1=y1 < nskConsumer.getyStart() ? nskConsumer.getyStart() : y1; y2=y2 < nskConsumer.getyStart() ? nskConsumer.getyStart() : y2; x1=x1 > nskConsumer.getxStop() ? nskConsumer.getxStop() : x1; x2=x2 > nskConsumer.getxStop() ? nskConsumer.getxStop() : x2; y1=y1 > nskConsumer.getyStop() ? nskConsumer.getyStop() : y1; y2=y2 > nskConsumer.getyStop() ? nskConsumer.getyStop() : y2; if(x1-x2 >= DT && y1-y2 >= DT) { Image ix=createImage(x1-x2,y1-y2); ix.getGraphics().drawImage(img2,0,0,this); nskConsumer.regme(x1,y1,x2,y2); resp.deliver(nskConsumer);} else { Image mf=createImage(nskConsumer.w1,nskConsumer.h1); mf.getGraphics().drawImage(img2,0,0,this); nskConsumer.regme(nskConsumer.w1+10,nskConsumer.h1+10,10,10); resp.deliver(nskConsumer,s2);}}} public void update() { repaint();}} class CnvResult extends Canvas implements ImageObserver { private Image created; private NskConsumer nskConsumer; private Point s2; public CnvResult() { super(); resize(400,300); setBackground(Color.green);} public boolean imageUpdate(Image p0,int p1,int p2,int p3,int p4,int p5) { return true;} public void paint(Graphics cs) { super.paint(cs); if(false && created !=null) cs.drawImage(created,10,10,this); if(nskConsumer !=null) created=nskConsumer.createImage(this,s2); if(created !=null) { cs.drawImage(created,nskConsumer.getx2()+10,nskConsumer.gety2()+10,this); for(int i=0; i < nskConsumer.w1; i++) for(int j=0; j < nskConsumer.h1; j++) if(nskConsumer.check(i,j)) { Image im1=nskConsumer.createImage(this,i,j); cs.drawImage(im1,10+i,10+j,this);}} if(nskConsumer !=null) { cs.drawLine(nskConsumer.getx1()+10,nskConsumer.gety1()+10,nskConsumer.getx2()+10,nskConsumer.gety1()+10); cs.drawLine(nskConsumer.getx2()+10,nskConsumer.gety1()+10,nskConsumer.getx2()+10,nskConsumer.gety2()+10); cs.drawLine(nskConsumer.getx2()+10,nskConsumer.gety2()+10,nskConsumer.getx1()+10,nskConsumer.gety2()+10); cs.drawLine(nskConsumer.getx1()+10,nskConsumer.gety2()+10,nskConsumer.getx1()+10,nskConsumer.gety1()+10);}} public void setNskConsumer(NskConsumer trans) { this.nskConsumer=trans;} public void update() { repaint();} public void setMouseUp(Point point) { this.s2=point;}} class ImageSelector implements Runnable { CnvResult cr; NskConsumer trans; Point point; public ImageSelector(CnvResult cr) { super(); this.cr=cr;} public void deliver(NskConsumer nskConsumer,Point s2) { point=s2; deliver(nskConsumer);} public void deliver(NskConsumer nskConsumer) { trans=nskConsumer; new Thread(this).start();} public void run() { cr.setNskConsumer(trans); cr.setMouseUp(point); point=null; cr.update();}} class NskConsumer implements ImageConsumer { int w1; int h1; Hashtable ht1; ColorModel cm1; int status1; int px1[][]; byte xp1[][]; int hs1; Image img; int x1; int y1; int x2; int y2; int xStart; int yStart; public NskConsumer() { super();} public boolean check(int sx,int sy) { int oki=0; int fails=0; for(int i=0; i < x2-x1; i++) for(int j=0; j < y2-y1; j++) if(px1[sx+i][sy+j]==px1[x2+i][y2+j]) oki++; else fails++; if(oki+fails==0) fails=1; return 100 * fails /(oki+fails) < 7 ? true : false;} public Image createImage(CnvResult com,Point s2) { int bits=32; int redMask=16711680; int greenMask=65280; int blueMask=255; java.awt.image.DirectColorModel dcm=new java.awt.image.DirectColorModel(bits,redMask,greenMask,blueMask); MemoryImageSource mw1=new MemoryImageSource(x1-x2,y1-y2,dcm,extract(px1,s2),0,x1-x2); Image img=com.createImage(mw1); return img;} public Image createImage(CnvResult cnvResult,int i,int j) { return null;} private int[] extr(int[][] pk12) { int[] rs=new int[w1 * h1]; int ix=0; for(int j=0; j < h1; j++) for(int i=0; i < w1; i++) rs[ix++]=pk12[i][j]; return rs;} private int[] extract(int[][] pk12,Point s2) { int[] rs=new int[(x1-x2) *(y1-y2)]; int ix=0; for(int j=y2; j < y1; j++) for(int i=x2; i < x1; i++) rs[ix++]=s2==null ? pk12[i][j] : Comparer.compare(pk12[i][j],pk12[s2.x][s2.y]) ? pk12[i][j] : 0+188 * 255 * 255+45 * 255+32; return rs;} public int getx1() { return x1;} public int getx2() { return x2;} public int getxStart() { return xStart;} public int getxStop() { return xStart+w1-1;} public int gety1() { return y1;} public int gety2() { return y2;} public int getyStart() { return yStart;} public int getyStop() { return yStart+h1-1;} public void imageComplete(int status) { this.status1=status;} public void regme(int x1,int y1,int x2,int y2) { this.x1=x1-10; this.y1=y1-10; this.x2=x2-10; this.y2=y2-10;} public void setColorModel(ColorModel cm) { this.cm1=cm;} public void setDimensions(int w,int h) { this.w1=w; this.h1=h;} public void setHints(int hs) { this.hs1=hs;} public void setPixels(int x,int y,int w,int h,ColorModel cm,byte[] px,int of,int scs) { if(xp1==null) xp1=new byte[w1][h1]; for(int i=0; i < w; i++) for(int j=0; j < h; j++) xp1[x+i][y+j]=px[j * w+i];} public void setPixels(int x,int y,int w,int h,ColorModel cm,int[] px,int of,int scs) { if(px1==null) px1=new int[w1][h1]; for(int i=0; i < w; i++) for(int j=0; j < h; j++) px1[x+i][y+j]=px[j * w+i];} public void setProperties(Hashtable ht) { this.ht1=ht;} public void start(int x,int y) { this.xStart=x; this.yStart=y;}} class PanelStart extends Panel { public PanelStart() { super(); setLayout(new FlowLayout()); setBackground(Color.black);}} class Comparer { static int maxD=0; static int dtx=-1; public static boolean compare(int c1,int c2) { int c1r,c1g,c1b; int c2r,c2g,c2b; int d1,d2,d3; c1b=c1-c1 / 255 * 255; c1-=c1b; c1 /= 255; c1g=c1-c1 / 255 * 255; c1-=c1g; c1 /= 255; c1r=c1-c1 / 255 * 255; c2b=c2-c2 / 255 * 255; c2-=c2b; c2 /= 255; c2g=c2-c2 / 255 * 255; c2-=c2g; c2 /= 255; c2r=c2-c2 / 255 * 255; d1=c1r > c2r ? c1r-c2r : c2r-c1r; d2=c1g > c2g ? c1g-c2g : c2g-c1g; d3=c1b > c2b ? c1b-c2b : c2b-c1b; if(d1 > maxD) maxD=d1; if(d2 > maxD) maxD=d2; if(d3 > maxD) maxD=d3; if(dtx >= 0) return 100 * d1 / 255 < dtx && 100 * d2 / 255 < dtx && 100 * d3 / 255 < dtx; return 100 * d1 / 255 < 7 && 100 * d2 / 255 < 7 && 100 * d3 / 255 < 7;}}
