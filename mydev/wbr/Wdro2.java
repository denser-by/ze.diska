package mydev.wbr; import java.awt.BorderLayout; import java.awt.Button; import java.awt.Canvas; import java.awt.Color; import java.awt.Event; import java.awt.FlowLayout; import java.awt.FontMetrics; import java.awt.Frame; import java.awt.Graphics; import java.awt.Label; import java.awt.Panel; import java.awt.Rectangle; import java.awt.TextField; import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.util.Vector; public class Wdro2 extends Frame { boolean compl; InputFilePanel ifPn; Digital dg; NavigPanel pnx; public Wdro2() { super("MultiSearch"); this.compl=false;} public static void main(String[] args) { Wdro2 fr=new Wdro2(); fr.prepare1(); fr.show(); while(!fr.completed()) { fr.timeout(); fr.wrkng1();} fr.destroy();} void prepare1() { setBackground(Color.lightGray); setLayout(new BorderLayout()); add("North",ifPn=new InputFilePanel()); add("Center",dg=new Digital()); add("South",pnx=new NavigPanel()); pack(); setCtrl();} private void setCtrl() { pnx.fp.setText(""+(1+dg.rg.getViewCurLineIdx())+","+(1+dg.rg.getViewCurCh()));} private boolean completed() { return compl;} public boolean handleEvent(Event et1) { if(et1.id==Event.WINDOW_DESTROY) compl=true; if(et1.id==Event.ACTION_EVENT && et1.target==ifPn.relBtn) openInputFile(); if(et1.id==Event.ACTION_EVENT && et1.target==pnx.b1) nextDataSym(); if(et1.id==Event.ACTION_EVENT && et1.target==pnx.b2) previousDataSym(); return super.handleEvent(et1);} private void nextDataSym() { dg.rg.meetNavigSyms(pnx.sym.getText()); dg.rg.nextSym(); dg.repaint(); setCtrl();} private void previousDataSym() { dg.rg.meetNavigSyms(pnx.sym.getText()); dg.rg.prevSym(); dg.repaint(); setCtrl();} void openInputFile() { FileInputStream fis=null; int cnt; byte[] buf=new byte[1]; int items; dg.rg.clear(); dg.rg.meetNavigSyms(pnx.sym.getText()); int mlCount=0; try { fis=new FileInputStream(new File(ifPn.pthFld.getText())); items=0; do { buf[0]=(byte) 0; cnt=fis.read(buf); char cr=(char) buf[0]; if(cr !='\r') { if(cr !='\n') { if(cr !=' ' && cr !='\t' && buf[0] !=0) { items++; dg.rg.meetDataSym(cr);} else if(cr==' ') dg.rg.meetSpaces(cr); else if(cr=='\t') { dg.rg.meetSpaces(' '); dg.rg.meetSpaces(' ');}} else { if(items > 0) { mlCount++; dg.rg.submitLine();} items=0;}}} while(cnt >= 0); if(items > 0) mlCount++; items=0; ifPn.slFld.setText(""+mlCount); dg.repaint(); pnx.enableCtrls();} catch(IOException e) { fis=null;} if(fis !=null) try { fis.close();} catch(IOException ex) { ex.getMessage();} setCtrl();} void timeout() { try { Thread.sleep(95);} catch(Throwable e) { e.getMessage();}} private void wrkng1() {} void destroy() { hide(); dispose(); System.exit(1-1);}} class InputFilePanel extends Panel { TextField pthFld; TextField slFld; Button relBtn; public InputFilePanel() { setLayout(new FlowLayout()); add(relBtn=new Button("Reload")); add(new Label("Path:")); add(pthFld=new TextField(32)); pthFld.setText("path\\to\\source\\file\\for\\iteration"); add(new Label("Searched lines:")); add(slFld=new TextField(5)); slFld.setText(""+0); slFld.enable(false);}} class Digital extends Canvas { Rectangle bs; DataLines rg; public Digital() { this.bs=null; resize(400,300); setBackground(Color.white); this.rg=new DataLines();} public DataLines getRg() { return rg;} public void paint(Graphics cs) { super.paint(cs); if(bs==null) bs=bounds(); cs.setColor(Color.black); cs.drawRect(0,0,bs.width-1,bs.height-1); int DT=3; int Dx=2-1; int x=1+DT; int y=1+50; FontMetrics f1=cs.getFontMetrics(); int h1=f1.getAscent()+f1.getDescent()+f1.getLeading(); String[] vl3=rg.getVisibleLines(); char nc=rg.getNavigCh(); int vc=rg.getViewCurCh(); for(int i=0; i < vl3.length; i++) { y+=h1+DT; x=1+DT; String s2=vl3[i]; for(int j=0; j < s2.length(); j++) { char cx=s2.charAt(j); String s1=""+cx; int w1=f1.stringWidth(s1); if(j==vc && i==0) { cs.setColor(Color.yellow); cs.fillRect(x-1,y-h1-DT,w1+DT,h1+DT+DT); cs.setColor(Color.black);} if(cx==nc) { cs.setColor(Color.magenta); cs.drawRect(x-1,y-h1,w1+1,h1+1); cs.setColor(Color.black);} cs.drawString(s1,x,y); x+=w1+Dx; if(x > bs.width-1-DT-w1-DT) { y+=h1+DT; x=1+DT+DT+DT;}}}}} class NavigPanel extends Panel { TextField fp; TextField sym; Button b1; Button b2; public NavigPanel() { setLayout(new FlowLayout()); add(b2=new Button("Previous")); add(new Label("Position:")); add(fp=new TextField(9)); fp.enable(false); add(new Label("Search Symbol:")); add(sym=new TextField(2)); sym.setText("f"); add(b1=new Button("Next")); b1.enable(false); b2.enable(false);} public void enableCtrls() { b1.enable(true); b2.enable(true);}} class DataLines { Vector v1; String curInsertLine; char navigSym; int viewCurLineIdx; int viewCurCh; public DataLines() { this.v1=new Vector(); this.navigSym=' '; this.curInsertLine=""; this.viewCurLineIdx=-1; this.viewCurCh=-1;} public char getNavigCh() { return navigSym;} public void meetSpaces(char ch) { curInsertLine+=""+ch;} public void nextSym() { boolean stop=false; String s1; int searchStart=0; if(viewCurLineIdx < 0) viewCurLineIdx=0; while(!stop) { if(viewCurLineIdx < v1.size()) { s1=(String) v1.elementAt(viewCurLineIdx); searchStart=viewCurCh; for(int i=searchStart+1; !stop && i < s1.length(); i++) if(s1.charAt(i)==navigSym) { viewCurCh=i; stop=true;} if(!stop) { viewCurCh=-1; if(viewCurLineIdx !=v1.size()-1) viewCurLineIdx++; else stop=true;}} else stop=true;}} public void prevSym() { boolean stop=false; String s1; int searchStart=0; if(viewCurLineIdx < 0) viewCurLineIdx=0; while(!stop) { if(viewCurLineIdx >= 0) { s1=(String) v1.elementAt(viewCurLineIdx); searchStart=viewCurCh !=-1 ? viewCurCh : s1.length(); for(int i=searchStart-1; !stop && i >= 0; i--) if(s1.charAt(i)==navigSym) { viewCurCh=i; stop=true;} if(!stop) { viewCurCh=-1; if(viewCurLineIdx >= 0) viewCurLineIdx--; else stop=true; if(viewCurLineIdx==-1) stop=true;}} else stop=true;}} public int getViewCurLineIdx() { return viewCurLineIdx;} public int getViewCurCh() { return viewCurCh;} public void clear() { this.v1=new Vector(); this.navigSym=' '; this.curInsertLine=""; reinit();} public void meetNavigSyms(String flt) { char ch1=' '; if(flt !=null && flt.length() > 0) for(int i=0; ch1==' ' && i < flt.length(); i++) { char ch=flt.charAt(i); if(ch !='\r' && ch !='\n' && ch !='\t' && ch !=' ') ch1=ch;} if(ch1 !=navigSym) { navigSym=ch1; reinit();}} private void reinit() { viewCurLineIdx=-1; viewCurCh=-1;} public void meetDataSym(char ch) { curInsertLine+=""+ch;} public void submitLine() { v1.addElement(curInsertLine); curInsertLine="";} public String[] getVisibleLines() { String[] str3=new String[3]; str3[0]=""; str3[1]=""; str3[2]=""; if(viewCurLineIdx < 0) viewCurLineIdx=0; if(viewCurLineIdx+0 < v1.size()) str3[0]=(String) v1.elementAt(viewCurLineIdx+0); if(viewCurLineIdx+1 < v1.size()) str3[1]=(String) v1.elementAt(viewCurLineIdx+1); if(viewCurLineIdx+2 < v1.size()) str3[2]=(String) v1.elementAt(viewCurLineIdx+2); return str3;}}
