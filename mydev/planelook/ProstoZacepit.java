package mydev.planelook; import java.awt.Color; import mydev.about.Canvas; import mydev.about.FourCornersConture2D; import mydev.about.Line2D; import mydev.about.Paint; import mydev.about.Point2D; import mydev.about.Rectangle2D; public class ProstoZacepit extends Rectangle2D { final static int ID_FW=1; final static int ID_BW=1+1; final static int ID_LT=1+1+1; final static int ID_RT=1+1+1+1; final static int ID_ZI=1+1+1+1+1; final static int ID_ZO=1+1+1+1+1+1; final static Color BTN_BACK=Color.darkGray; final static Color BTN_FACE=Color.white; final static Color BTN_PRESS=Color.black; private Canvas cs; private Paint pn; private short cx; private short cy; protected short caBot; protected short caRight; protected int side; protected int step; protected short pressForward; protected short pressBackward; protected short pressLeft; protected short pressRight; protected short pressIncrease; protected short pressDecrease; protected short active; private Color hPen1; private Color hPen12; private Color hPen2; private Color hPrevPen; private boolean needRepaint; private FourCornersConture2D[] contures; private Reaction react; public ProstoZacepit(Point2D uc,int panelWidth,int panelHeight,int borderColor,Reaction react) { super(uc,panelWidth,panelHeight,borderColor,false); this.pressForward=0x7fff; this.pressBackward=(short) Long.MIN_VALUE; drop(); this.active=0; this.caRight=(short) panelWidth; this.caBot=(short) panelHeight; this.side=12; this.step=side * 3 / 7; this.needRepaint=false; this.contures=new FourCornersConture2D[5+1+1]; this.react=react;} public void toPen(Canvas ics,Paint pn) { super.toPen(ics,pn); drawItems(ics,pn);} public void setReact(Reaction react) { this.react=react;} protected void drawItems(Canvas ics,Paint pn) { this.cs=ics; this.pn=pn; if(hPen1==null) { hPen1=BTN_FACE; hPen12=RGB(10,242,255); hPen2=BTN_PRESS;} hPrevPen=hPen2; buttonForwards(35-44-1,1+1+15+10); buttonBackwards(35-44-1,5+15+10); buttonLeft(5+1-44-1,-50+1+1+1+15+10); buttonRight(65-1-44-1,-20-1+15+10);} public Color RGB(int r,int g,int b) { return new Color(b,g,r);} protected void LineTo(int x,int y) { Line2D line=new Line2D(new Point2D(cx,cy),new Point2D(x,y)); line.toPen(cs,pn); cx=(short) x; cy=(short) y;} protected void MoveToEx(int x,int y) { cx=(short) x; cy=(short) y;} protected Color Sq4Points(float x1,float y1,float x2,float y2,float x3,float y3,float x4,float y4,Color col,int id) { Color c11=pn.getColor(); pn.setColor(col); FourCornersConture2D ps=contures[id]; if(ps==null) { ps=new FourCornersConture2D(x1,y1,x2,y2,x3,y3,x4,y4,col.getRGB(),true,col.getRGB()); contures[id]=ps;} ps.toPen(cs,pn); return c11;} protected void buttonRight(int sx,int sy) { Sq4Points(-sx+caRight / 2-side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+step,-sx+caRight / 2+side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+step,-sx+caRight / 2+side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+2 * side+step,-sx+caRight / 2-side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+2 * side+step,BTN_BACK,ID_RT); pn.setColor(pressRight==1 ? hPen2 : active==4 ? hPen12 : hPen1); MoveToEx(-sx+caRight / 2-side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+step); LineTo(-sx+caRight / 2+side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+step); LineTo(-sx+caRight / 2+side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+2 * side+step); LineTo(-sx+caRight / 2-side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+2 * side+step); LineTo(-sx+caRight / 2-side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+step); MoveToEx(-sx+caRight / 2-side-step+3 * side,-sy+caBot / 2-step / 2+step+side); LineTo(-sx+caRight / 2-side-step+3 * side+2 * side-step,-sy+caBot / 2-step / 2+step+side); MoveToEx(-sx+caRight / 2-step-step / 2+3 * side-1,-sy+caBot / 2+step); LineTo(-sx+caRight / 2+step / 2+3 * side,-sy+caBot / 2-step / 2+step+side); LineTo(-sx+caRight / 2-step-step / 2+3 * side,-sy+caBot / 2+2 * side); pn.setColor(hPrevPen);} protected void buttonLeft(int sx,int sy) { Sq4Points(-sx+caRight / 2-side-step-2 * side,-sy+caBot / 2-step / 2+step,-sx+caRight / 2+side-step-2 * side,-sy+caBot / 2-step / 2+step,-sx+caRight / 2+side-step-2 * side,-sy+caBot / 2-step / 2+2 * side+step,-sx+caRight / 2-side-step-2 * side,-sy+caBot / 2-step / 2+2 * side+step,BTN_BACK,ID_LT); pn.setColor(pressLeft==1 ? hPen2 : active==3 ? hPen12 : hPen1); MoveToEx(-sx+caRight / 2-side-step-2 * side,-sy+caBot / 2-step / 2+step); LineTo(-sx+caRight / 2+side-step-2 * side,-sy+caBot / 2-step / 2+step); LineTo(-sx+caRight / 2+side-step-2 * side,-sy+caBot / 2-step / 2+2 * side+step); LineTo(-sx+caRight / 2-side-step-2 * side,-sy+caBot / 2-step / 2+2 * side+step); LineTo(-sx+caRight / 2-side-step-2 * side,-sy+caBot / 2-step / 2+step); MoveToEx(-sx+caRight / 2-side-step / 2-2 * side,-sy+caBot / 2-step / 2+step+side); LineTo(-sx+caRight / 2-side-step / 2-2 * side+2 * side-step,-sy+caBot / 2-step / 2+step+side); MoveToEx(-sx+caRight / 2-step-2 * side+1,-sy+caBot / 2+step); LineTo(-sx+caRight / 2-side-step / 2-2 * side,-sy+caBot / 2-step / 2+step+side); LineTo(-sx+caRight / 2-step-2 * side,-sy+caBot / 2+2 * side); pn.setColor(hPrevPen);} protected void buttonBackwards(int sx,int sy) { Sq4Points(-sx+caRight / 2-side,-sy+caBot / 2-step / 2-2 * side+2 * side+step,-sx+caRight / 2+side,-sy+caBot / 2-step / 2-2 * side+2 * side+step,-sx+caRight / 2+side,-sy+caBot / 2-step / 2+2 * side+step,-sx+caRight / 2-side,-sy+caBot / 2-step / 2+2 * side+step,BTN_BACK,ID_BW); pn.setColor(pressBackward==1 ? hPen2 : active==2 ? hPen12 : hPen1); MoveToEx(-sx+caRight / 2-side,-sy+caBot / 2-step / 2-2 * side+2 * side+step); LineTo(-sx+caRight / 2+side,-sy+caBot / 2-step / 2-2 * side+2 * side+step); LineTo(-sx+caRight / 2+side,-sy+caBot / 2-step / 2+2 * side+step); LineTo(-sx+caRight / 2-side,-sy+caBot / 2-step / 2+2 * side+step); LineTo(-sx+caRight / 2-side,-sy+caBot / 2-step / 2-2 * side+2 * side+step); MoveToEx(-sx+caRight / 2,-sy+caBot / 2-step+2 * side+step); LineTo(-sx+caRight / 2,-sy+caBot / 2-step-2 * side+step+2 * side+step); MoveToEx(-sx+caRight / 2-side+step / 2,-sy+caBot / 2-step / 2-side+2 * side+step); LineTo(-sx+caRight / 2,-sy+caBot / 2-step+2 * side+step+1); LineTo(-sx+caRight / 2+side-step / 2,-sy+caBot / 2-step / 2-side+2 * side+step); pn.setColor(hPrevPen);} protected void buttonForwards(int sx,int sy) { Sq4Points(-sx+caRight / 2-side,-sy+caBot / 2-step / 2-2 * side,-sx+caRight / 2+side,-sy+caBot / 2-step / 2-2 * side,-sx+caRight / 2+side,-sy+caBot / 2-step / 2,-sx+caRight / 2-side,-sy+caBot / 2-step / 2,BTN_BACK,ID_FW); pn.setColor(pressForward==1 ? hPen2 : active==1 ? hPen12 : hPen1); MoveToEx(-sx+caRight / 2-side,-sy+caBot / 2-step / 2-2 * side); LineTo(-sx+caRight / 2+side,-sy+caBot / 2-step / 2-2 * side); LineTo(-sx+caRight / 2+side,-sy+caBot / 2-step / 2); LineTo(-sx+caRight / 2-side,-sy+caBot / 2-step / 2); LineTo(-sx+caRight / 2-side,-sy+caBot / 2-step / 2-2 * side); MoveToEx(-sx+caRight / 2,-sy+caBot / 2-step); LineTo(-sx+caRight / 2,-sy+caBot / 2-step-2 * side+step); MoveToEx(-sx+caRight / 2-side+step / 2,-sy+caBot / 2-step / 2-side); LineTo(-sx+caRight / 2,-sy+caBot / 2-step-2 * side+step); LineTo(-sx+caRight / 2+side-step / 2,-sy+caBot / 2-step / 2-side); pn.setColor(hPrevPen);} public void prepareUpdate() { needRepaint=true;} public void mouseMove(int mx,int my) { active=0; Point2D curPoint=new Point2D(mx,my); if(contures !=null) for(int i=0; i < contures.length; i++) { FourCornersConture2D fc=contures[i]; if(fc !=null && fc.isInside(curPoint)) active=(short) i;} prepareUpdate();} public void mouseDown(int mx,int my) { drop(); switch(active) { case 1 : pressForward=1; break; case 2 : pressBackward=1; break; case 3 : pressLeft=1; break; case 4 : pressRight=1; break; case 5 : pressIncrease=1; break; case 6 : pressDecrease=1; break;} prepareUpdate(); processClick();} private void processClick() { if(react !=null) { if(isForward()) react.toTop(); if(isBackward()) react.toBottom(); if(isLeft()) react.toLeft(); if(isRight()) react.toRight();}} public void mouseUp(int mx,int my) { drop(); prepareUpdate();} public void drop() { pressForward=0; pressIncrease=0; pressDecrease=0; pressLeft=0; pressRight=0; pressBackward=0;} public boolean isForward() { return pressForward==1;} public boolean isBackward() { return pressBackward==1;} public boolean isLeft() { return pressLeft==1;} public boolean isRight() { return pressRight==1;} public boolean isIncr() { return pressIncrease==1;} public boolean isDecr() { return pressDecrease==1;}}