package mydev.planelook; import java.awt.Color; import mydev.about.CanvasAdapter; import mydev.about.FourCornersConture2D; import mydev.about.PaintAdapter; import mydev.about.Point2D; public class ProstoZacepit extends CommonMovings { final static Color BTN_BACK=Color.darkGray; final static Color BTN_FACE=Color.white; final static Color BTN_PRESS=Color.black; private Reaction react; protected short pressIncrease; protected short pressDecrease; public ProstoZacepit(Point2D uc,int panelWidth,int panelHeight,int borderColor,Reaction react) { super(uc,panelWidth,panelHeight,borderColor,false); this.pressForward=0x7fff; this.pressBackward=(short) Long.MIN_VALUE; drop(); this.active=0; this.caRight=(short) panelWidth; this.caBot=(short) panelHeight; this.side=12; this.step=side * 3 / 7; this.needRepaint=false; this.contures=new FourCornersConture2D[5+1+1]; this.react=react;} protected Color getBtnBack() { return BTN_BACK;} protected Color getBtnFace() { return BTN_FACE;} protected Color getBtnPress() { return BTN_PRESS;} public void toPen(CanvasAdapter ics,PaintAdapter pn) { super.toPen(ics,pn); drawItems(ics,pn);} public void setReact(Reaction react) { this.react=react;} protected void drawItems(CanvasAdapter ics,PaintAdapter pn) { this.cs=ics; this.pn=pn; buttonUp(35-44-1,1+1+15+10); buttonDown(35-44-1,5+15+10); buttonLeft(5+1-44-1,-50+1+1+1+15+10); buttonRight(65-1-44-1,-20-1+15+10);} public void prepareUpdate() { needRepaint=true;} public boolean mouseMove(int mx,int my) { active=0; Point2D curPoint=new Point2D(mx,my); if(contures !=null) for(int i=0; i < contures.length; i++) { FourCornersConture2D fc=contures[i]; if(fc !=null && fc.isInside(curPoint)) active=(short) i;} prepareUpdate(); return active !=0;} public void mouseDown(int mx,int my) { drop(); switch(active) { case 1 : pressForward=1; break; case 2 : pressBackward=1; break; case 3 : pressLeft=1; break; case 4 : pressRight=1; break; case 5 : pressIncrease=1; break; case 6 : pressDecrease=1; break;} prepareUpdate(); processClick();} private void processClick() { if(react !=null) { if(isForward()) react.toTop(); if(isBackward()) react.toBottom(); if(isLeft()) react.toLeft(); if(isRight()) react.toRight();}} public void mouseUp(int mx,int my) { drop(); prepareUpdate();} public void drop() { pressForward=0; pressIncrease=0; pressDecrease=0; pressLeft=0; pressRight=0; pressBackward=0;} public boolean isForward() { return pressForward==1;} public boolean isBackward() { return pressBackward==1;} public boolean isLeft() { return pressLeft==1;} public boolean isRight() { return pressRight==1;} public boolean isIncr() { return pressIncrease==1;} public boolean isDecr() { return pressDecrease==1;}}