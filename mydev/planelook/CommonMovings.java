package mydev.planelook; import java.awt.Color; import mydev.about.CanvasAdapter; import mydev.about.FourCornersConture2D; import mydev.about.Line2D; import mydev.about.PaintAdapter; import mydev.about.Point2D; import mydev.about.Rectangle2D; public abstract class CommonMovings extends Rectangle2D { final static int ID_UP=1; final static int ID_DN=1+1; final static int ID_LT=1+1+1; final static int ID_RT=1+1+1+1; final static int ID_ZI=1+1+1+1+1; final static int ID_ZO=1+1+1+1+1+1; protected short active; protected short caBot; protected short caRight; protected int side; protected int step; protected Color hPen1; protected Color hPen12; protected Color hPen2; protected Color hPrevPen; protected short pressForward; protected short pressBackward; protected short pressLeft; protected short pressRight; protected short pressTop; protected short pressBottom; protected short pressCtrl; private short cx; private short cy; protected CanvasAdapter cs; protected PaintAdapter pn; protected FourCornersConture2D[] contures; protected boolean needRepaint; public CommonMovings(Point2D uc,int panelWidth,int panelHeight,int color,boolean solid) { super(uc,panelWidth,panelHeight,color,solid); this.contures=new FourCornersConture2D[5+1+1]; this.active=0; this.pressForward=0x7fff; this.pressBackward=(short) Long.MIN_VALUE; drop(); this.caRight=(short) panelWidth; this.caBot=(short) panelHeight; this.side=caBot / 5; this.step=side * 3 / 7; this.pressCtrl=0; if(hPen1==null) { hPen1=getBtnFace(); hPen12=RGB(10,242,255); hPen2=getBtnPress();} hPrevPen=hPen2;} public void drop() { pressForward=0; pressTop=0; pressBottom=0; pressLeft=0; pressRight=0; pressBackward=0;} public Color RGB(int r,int g,int b) { return new Color(b,g,r);} protected void LineTo(int x,int y) { Line2D line=new Line2D(new Point2D(cx,cy),new Point2D(x,y),getBtnFace().getRGB()); line.toPen(cs,pn); cx=(short) x; cy=(short) y;} protected void MoveToEx(int x,int y) { cx=(short) x; cy=(short) y;} protected Color Sq4Points(float x1,float y1,float x2,float y2,float x3,float y3,float x4,float y4,Color col,int id) { Color c11=new Color(pn.getColor()); pn.setColor(col.getRGB()); FourCornersConture2D ps=contures[id]; if(ps==null) { ps=new FourCornersConture2D(x1,y1,x2,y2,x3,y3,x4,y4,col.getRGB(),true,col.getRGB()); contures[id]=ps;} ps.toPen(cs,pn); return c11;} protected abstract Color getBtnBack(); protected abstract Color getBtnFace(); protected abstract Color getBtnPress(); protected void buttonLeft(int sx,int sy) { Sq4Points(-sx+caRight / 2-side-step-2 * side,-sy+caBot / 2-step / 2+step,-sx+caRight / 2+side-step-2 * side,-sy+caBot / 2-step / 2+step,-sx+caRight / 2+side-step-2 * side,-sy+caBot / 2-step / 2+2 * side+step,-sx+caRight / 2-side-step-2 * side,-sy+caBot / 2-step / 2+2 * side+step,getBtnBack(),ID_LT); pn.setColor((pressLeft==1 ? hPen2 : active==3 ? hPen12 : hPen1).getRGB()); MoveToEx(-sx+caRight / 2-side-step-2 * side,-sy+caBot / 2-step / 2+step); LineTo(-sx+caRight / 2+side-step-2 * side,-sy+caBot / 2-step / 2+step); LineTo(-sx+caRight / 2+side-step-2 * side,-sy+caBot / 2-step / 2+2 * side+step); LineTo(-sx+caRight / 2-side-step-2 * side,-sy+caBot / 2-step / 2+2 * side+step); LineTo(-sx+caRight / 2-side-step-2 * side,-sy+caBot / 2-step / 2+step); MoveToEx(-sx+caRight / 2-side-step / 2-2 * side,-sy+caBot / 2-step / 2+step+side); LineTo(-sx+caRight / 2-side-step / 2-2 * side+2 * side-step,-sy+caBot / 2-step / 2+step+side); MoveToEx(-sx+caRight / 2-step-2 * side+1,-sy+caBot / 2+step); LineTo(-sx+caRight / 2-side-step / 2-2 * side,-sy+caBot / 2-step / 2+step+side); LineTo(-sx+caRight / 2-step-2 * side,-sy+caBot / 2+2 * side); pn.setColor(hPrevPen.getRGB());} protected void buttonRight(int sx,int sy) { Sq4Points(-sx+caRight / 2-side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+step,-sx+caRight / 2+side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+step,-sx+caRight / 2+side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+2 * side+step,-sx+caRight / 2-side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+2 * side+step,getBtnBack(),ID_RT); pn.setColor((pressRight==1 ? hPen2 : active==4 ? hPen12 : hPen1).getRGB()); MoveToEx(-sx+caRight / 2-side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+step); LineTo(-sx+caRight / 2+side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+step); LineTo(-sx+caRight / 2+side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+2 * side+step); LineTo(-sx+caRight / 2-side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+2 * side+step); LineTo(-sx+caRight / 2-side+step+2 * side,-sy+caBot / 2-step / 2-2 * side+2 * side+step); MoveToEx(-sx+caRight / 2-side-step+3 * side,-sy+caBot / 2-step / 2+step+side); LineTo(-sx+caRight / 2-side-step+3 * side+2 * side-step,-sy+caBot / 2-step / 2+step+side); MoveToEx(-sx+caRight / 2-step-step / 2+3 * side-1,-sy+caBot / 2+step); LineTo(-sx+caRight / 2+step / 2+3 * side,-sy+caBot / 2-step / 2+step+side); LineTo(-sx+caRight / 2-step-step / 2+3 * side,-sy+caBot / 2+2 * side); pn.setColor(hPrevPen.getRGB());} protected void buttonBackwards() { Sq4Points(caRight / 2-side+2 * side+step,caBot / 2-step / 2-2 * side,caRight / 2+side+2 * side+step,caBot / 2-step / 2-2 * side,caRight / 2+side+2 * side+step,caBot / 2-step / 2,caRight / 2-side+2 * side+step,caBot / 2-step / 2,getBtnBack(),ID_ZO); pn.setColor((pressBackward==1 ? hPen2 : active==6 ? hPen12 : hPen1).getRGB()); MoveToEx(caRight / 2-side+2 * side+step,caBot / 2-step / 2-2 * side); LineTo(caRight / 2+side+2 * side+step,caBot / 2-step / 2-2 * side); LineTo(caRight / 2+side+2 * side+step,caBot / 2-step / 2); LineTo(caRight / 2-side+2 * side+step,caBot / 2-step / 2); LineTo(caRight / 2-side+2 * side+step,caBot / 2-step / 2-2 * side); MoveToEx(caRight / 2-side+step / 2+2 * side+step,caBot / 2-step / 2-side); LineTo(caRight / 2+2 * side+step,caBot / 2-step+1); LineTo(caRight / 2+side-step / 2+2 * side+step,caBot / 2-step / 2-side); MoveToEx(caRight / 2-side+step / 2+2 * side+step,caBot / 2-2 * side); LineTo(caRight / 2+2 * side+step,caBot / 2-step-side+step / 2+1); LineTo(caRight / 2+side-step / 2+2 * side+step,caBot / 2-2 * side); pn.setColor(hPrevPen.getRGB());} protected void buttonForwards() { Sq4Points(caRight / 2-side-2 * side-step,caBot / 2-step / 2-2 * side,caRight / 2+side-2 * side-step,caBot / 2-step / 2-2 * side,caRight / 2+side-2 * side-step,caBot / 2-step / 2,caRight / 2-side-2 * side-step,caBot / 2-step / 2,getBtnBack(),ID_ZI); pn.setColor((pressForward==1 ? hPen2 : active==5 ? hPen12 : hPen1).getRGB()); MoveToEx(caRight / 2-side-2 * side-step,caBot / 2-step / 2-2 * side); LineTo(caRight / 2+side-2 * side-step,caBot / 2-step / 2-2 * side); LineTo(caRight / 2+side-2 * side-step,caBot / 2-step / 2); LineTo(caRight / 2-side-2 * side-step,caBot / 2-step / 2); LineTo(caRight / 2-side-2 * side-step,caBot / 2-step / 2-2 * side); MoveToEx(caRight / 2-side+step / 2-2 * side-step,caBot / 2-step / 2-side); LineTo(caRight / 2-2 * side-step,caBot / 2-step-2 * side+step); LineTo(caRight / 2+side-step / 2-2 * side-step,caBot / 2-step / 2-side); MoveToEx(caRight / 2-side+step / 2-2 * side-step,caBot / 2-step / 2-side+side-step / 2); LineTo(caRight / 2-2 * side-step,caBot / 2-step-2 * side+step+side-step / 2); LineTo(caRight / 2+side-step / 2-2 * side-step,caBot / 2-step / 2-side+side-step / 2); pn.setColor(hPrevPen.getRGB());} protected void buttonUp(int sx,int sy) { Sq4Points(-sx+caRight / 2-side,-sy+caBot / 2-step / 2-2 * side,-sx+caRight / 2+side,-sy+caBot / 2-step / 2-2 * side,-sx+caRight / 2+side,-sy+caBot / 2-step / 2,-sx+caRight / 2-side,-sy+caBot / 2-step / 2,getBtnBack(),ID_UP); pn.setColor((pressTop==1 ? hPen2 : active==1 ? hPen12 : hPen1).getRGB()); MoveToEx(-sx+caRight / 2-side,-sy+caBot / 2-step / 2-2 * side); LineTo(-sx+caRight / 2+side,-sy+caBot / 2-step / 2-2 * side); LineTo(-sx+caRight / 2+side,-sy+caBot / 2-step / 2); LineTo(-sx+caRight / 2-side,-sy+caBot / 2-step / 2); LineTo(-sx+caRight / 2-side,-sy+caBot / 2-step / 2-2 * side); MoveToEx(-sx+caRight / 2,-sy+caBot / 2-step); LineTo(-sx+caRight / 2,-sy+caBot / 2-step-2 * side+step); MoveToEx(-sx+caRight / 2-side+step / 2,-sy+caBot / 2-step / 2-side); LineTo(-sx+caRight / 2,-sy+caBot / 2-step-2 * side+step); LineTo(-sx+caRight / 2+side-step / 2,-sy+caBot / 2-step / 2-side); pn.setColor(hPrevPen.getRGB());} protected void buttonDown(int sx,int sy) { Sq4Points(-sx+caRight / 2-side,-sy+caBot / 2-step / 2-2 * side+2 * side+step,-sx+caRight / 2+side,-sy+caBot / 2-step / 2-2 * side+2 * side+step,-sx+caRight / 2+side,-sy+caBot / 2-step / 2+2 * side+step,-sx+caRight / 2-side,-sy+caBot / 2-step / 2+2 * side+step,getBtnBack(),ID_DN); pn.setColor((pressBottom==1 ? hPen2 : active==2 ? hPen12 : hPen1).getRGB()); MoveToEx(-sx+caRight / 2-side,-sy+caBot / 2-step / 2-2 * side+2 * side+step); LineTo(-sx+caRight / 2+side,-sy+caBot / 2-step / 2-2 * side+2 * side+step); LineTo(-sx+caRight / 2+side,-sy+caBot / 2-step / 2+2 * side+step); LineTo(-sx+caRight / 2-side,-sy+caBot / 2-step / 2+2 * side+step); LineTo(-sx+caRight / 2-side,-sy+caBot / 2-step / 2-2 * side+2 * side+step); MoveToEx(-sx+caRight / 2,-sy+caBot / 2-step+2 * side+step); LineTo(-sx+caRight / 2,-sy+caBot / 2-step-2 * side+step+2 * side+step); MoveToEx(-sx+caRight / 2-side+step / 2,-sy+caBot / 2-step / 2-side+2 * side+step); LineTo(-sx+caRight / 2,-sy+caBot / 2-step+2 * side+step+1); LineTo(-sx+caRight / 2+side-step / 2,-sy+caBot / 2-step / 2-side+2 * side+step); pn.setColor(hPrevPen.getRGB());}}
