package mydev.planelook; import java.awt.Color; import mydev.about.CanvasAdapter; import mydev.about.FourCornersConture2D; import mydev.about.PaintAdapter; import mydev.about.Point2D; public class MovingsCtrl extends CommonMovings { private Reaction react; final static Color BTN_BACK=Color.darkGray; final static Color BTN_FACE=Color.white; final static Color BTN_PRESS=Color.black; public MovingsCtrl(Point2D uc,int panelWidth,int panelHeight,int borderColor,Reaction react) { super(uc,panelWidth,panelHeight,borderColor,false); this.react=react;} public void toPen(CanvasAdapter ics,PaintAdapter pn) { super.toPen(ics,pn); drawItems(ics,pn);} protected Color getBtnBack() { return BTN_BACK;} protected Color getBtnFace() { return BTN_FACE;} protected Color getBtnPress() { return BTN_PRESS;} protected void drawItems(CanvasAdapter ics,PaintAdapter pn) { this.cs=ics; this.pn=pn; buttonForwards(); buttonBackwards(); buttonLeft(0,0); buttonRight(0,0); buttonUp(0,0); buttonDown(0,0);} public boolean isForward() { return pressForward==1;} public boolean isBackward() { return pressBackward==1;} public boolean isLeft() { return pressLeft==1;} public boolean isRight() { return pressRight==1;} public boolean isTop() { return pressTop==1;} public boolean isBottom() { return pressBottom==1;} public int mouseMove(int mx,int my) { active=0; Point2D curPoint=new Point2D(mx,my); if(contures !=null) for(int i=0; i < contures.length; i++) { FourCornersConture2D fc=contures[i]; if(fc !=null && fc.isInside(curPoint)) active=(short) i;} return active;} public void mouseDown(int mx,int my) { drop(); switch(active) { case 1 : pressTop=1; break; case 2 : pressBottom=1; break; case 3 : pressLeft=1; break; case 4 : pressRight=1; break; case 5 : pressForward=1; break; case 6 : pressBackward=1; break;} processClick();} public void mouseUp(int mx,int my) { drop();} private void processClick() { if(react !=null) { if(isTop()) react.toTop(); if(isBottom()) react.toBottom(); if(isLeft()) react.toLeft(); if(isRight()) react.toRight(); if(isForward()) react.toForward(); if(isBackward()) react.toBackward();}} public void keyPressLeft(int v) { pressLeft=(short) v;} public void keyPressRight(int v) { pressRight=(short) v;} public void keyPressUp(int v) { pressTop=(short) v;} public void keyPressDown(int v) { pressBottom=(short) v;} public void keyPressForward(int v) { pressForward=(short) v; System.out.println("key-press-forward "+v);} public void keyPressBackward(int v) { pressBackward=(short) v; System.out.println("key-press-backward "+v);}}
