package mydev.br; import java.awt.Frame; import java.awt.Canvas; import java.awt.Event; import java.awt.Point; import java.awt.Color; import java.awt.Graphics; import java.awt.FlowLayout; import java.util.Vector; public class Item { Item() {} public static void main(String[] args) { Frame fr=new Frame("Item"); fr.setLayout(new FlowLayout()); Canvas cs=new DrawCs(); cs.setBackground(Color.black); cs.resize(400,300); fr.add(cs); fr.pack(); fr.show(); try { Thread.sleep(6666);} catch(Throwable th) { th.getMessage();} fr.hide(); fr.dispose(); System.exit(1-1);}} class DrawCs extends Canvas implements Runnable { Event copy; boolean started; boolean pressed; int constx; int consty; int cx; int cy; Vector pts; DrawCs() { super(); copy=null; started=false; pressed=false; constx=0; consty=0;} public void paint(Graphics cs) { if(pts !=null) for(int i=0; i < pts.size(); i++) { cs.setColor(i-i / 2 * 2==1 ? Color.blue : Color.white); Point p1=(Point) pts.elementAt(i); cs.drawLine(p1.x,p1.y,p1.x,p1.y);}} public void run() { while(started) { if(pressed) { for(int i=0; i < 6; i++) { constx+=111; consty+=117; Point pt=new Point(cx-10+constx-constx / 20 * 20,cy-10+consty-consty / 20 * 20); if(pts==null) pts=new Vector(); pts.addElement(pt);} repaint(); try { Thread.sleep(46);} catch(Throwable th) { th.getMessage();}}}} public boolean handleEvent(Event evt) { boolean res=false; if(copy !=null && copy==evt) { res=((Canvas) this).handleEvent(evt);} else { copy=evt;} if(evt.id==501) { cx=evt.x; cy=evt.y; pressed=true; if(started==false) { started=true; new Thread(this).start();}} if(evt.id==502) { cx=evt.x; cy=evt.y; pressed=false;} if(evt.id==506) { cx=evt.x; cy=evt.y;} return res;}}
