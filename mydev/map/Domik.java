package mydev.map; import java.awt.Canvas; import java.awt.Color; import java.awt.Event; import java.awt.FlowLayout; import java.awt.Frame; import java.awt.Graphics; public class Domik extends Frame { boolean exit; public Domik(String capt) { super(capt); exit=false;} public static void main(String[] args) { Domik fr=new Domik("Living Click Ctrl-Click Shift-Click Ctrl-Shift-Click"); FlowLayout fl=new FlowLayout(); fr.setLayout(fl); fr.add(new Printer()); fr.pack(); fr.show(); while(!fr.exit) try { Thread.sleep(220);} catch(InterruptedException e) { e.getMessage();} fr.hide(); fr.dispose(); System.exit(1-1); System.out.println("destroy");} public boolean handleEvent(Event et) { if(et.id==Event.WINDOW_DESTROY) exit=true; return super.handleEvent(et);}} class Printer extends Canvas { Graphics cs1; Color[] arr; short sx; short sy; short x1; short y1; short x2; short y2; short x3; short y3; short x4; short y4; public Printer() { super(); resize(640,480); arr=new Color[640 * 480]; clear(); init();} private void clear() { for(int i=0; i < 640; i++) for(int j=0; j < 480; j++) arr[j * 640+i]=Color.black;} public void setArr(Color[] ar) { this.arr=ar;} Color RGB(int r,int g,int b) { return new Color(b,g,r);} void prepare() { Color c1; short fw=640; short fh=480; Color[] pv=arr; int i; int j; short fwx=25; short fhx=14; Color[] pvx=new Color[fwx * fhx]; c1=RGB(10,242,255); line(pv,fw,fh,0,0,fw-1,0,c1); line(pv,fw,fh,0,fh-1,fw-1,fh-1,c1); line(pv,fw,fh,0,0,0,fh-1,c1); line(pv,fw,fh,fw-1,0,fw-1,fh-1,c1); c1=RGB(0,0,255); for(j=0; j < fhx; j++) for(i=0; i < fwx; i++) if(i > 9 && i < 16) pvx[j * fwx+i]=RGB(10,242,255); else if(j > 3 && j < 6) pvx[j * fwx+i]=RGB(122,122,122); else if(j > 8 && j < 10) pvx[j * fwx+i]=RGB(122,122,122); else pvx[j * fwx+i]=c1; c1=RGB(127,0,0); line(pvx,fwx,fhx,0,0,fwx-1,0,c1); line(pvx,fwx,fhx,0,fhx-1,fwx-1,fhx-1,c1); line(pvx,fwx,fhx,0,0,0,fhx-1,c1); line(pvx,fwx,fhx,fwx-1,0,fwx-1,fhx-1,c1); c1=RGB(10,242,255); line(pv,fw,fh,fw / 2+20,fh / 2+5,fw-20,fh / 2+30,c1); c1=RGB(10,0,255); line(pv,fw,fh,fw / 2-20,fh / 2+5,20,fh / 2+30,c1); c1=RGB(110,110,155); line(pv,fw,fh,fw / 2-20,fh / 2-5,20,fh / 2-30,c1); c1=RGB(210,110,155); line(pv,fw,fh,fw / 2+20,fh / 2-5,fw-20,fh / 2-30,c1); c1=RGB(10,242,255); line(pv,fw,fh,fw / 2+10,fh / 2+5,fw / 2+50,fh / 2+130,c1); c1=RGB(10,0,255); line(pv,fw,fh,fw / 2-10,fh / 2+5,fw / 2-50,fh / 2+130,c1); c1=RGB(110,110,155); line(pv,fw,fh,fw / 2-10,fh / 2-5,fw / 2-50,fh / 2-130,c1); c1=RGB(210,110,155); line(pv,fw,fh,fw / 2+10,fh / 2-5,fw / 2+50,fh / 2-130,c1); line(pv,fw,fh,0,0,400-1,300-1,c1); line(pv,fw,fh,400-1,0,0,300-1,c1); for(j=0; j < fhx; j++) for(i=0; i < fwx; i++) pv[+(sy+j) * fw+sx+i]=pvx[j * fwx+i]; tvset(pv,fw,fh,x1,y1,x2,y2,x3,y3,x4,y4,pvx,fwx,fhx);} private void init() { sx=(short) 32; sy=(short) 17; x1=(short)(60+60); y1=(short) 90; x2=(short)(150+60-25-10); y2=(short)(30+25); x3=(short)(150+60+55); y3=(short)(90-5); x4=(short)(60+60+30); y4=(short)(190+30);} void tvset(Color[] pv,short w,short h,short x1,short y1,short x2,short y2,short x3,short y3,short x4,short y4,Color[] pvx,short wx,short hx) { int aa; int aa_; int fx1; int fy1; int fx2; int fy2; int fx3; int fy3; int fx4; int fy4; int dx; int dy; int dx2; int dy2; short br; int width; int height; int width2; int height2; int dx_; int dy_; int dx2_; int dy2_; short dr; int width_; int height_; int width2_; int height2_; Color c; int minx; int maxx; int miny; int maxy; int i; int j; int drr; int brr; aa=0; aa_=0; br=0; brr=0; dr=0; drr=0; width=x2-x1; height=y2-y1; dx=x1 >= x2 ?-1 : 1; dy=y1 >= y2 ?-1 : 1; width2=x3-x4; height2=y3-y4; dx2=x4 >= x3 ?-1 : 1; dy2=y4 >= y3 ?-1 : 1; br=0; if(width * dx >= height * dy && width * dx >= width2 * dx2 && width * dx >= height2 * dy2) { aa=width; brr=dx;} else if(height * dy >= width * dx && height * dy >= width2 * dx2 && height * dy >= height2 * dy2) { aa=height; brr=dy;} else if(width2 * dx2 >= height * dy && width2 * dx2 >= width * dx && width2 * dx2 >= height2 * dy2) { aa=width2; brr=dx2;} else if(height2 * dy2 >= width * dx && height2 * dy2 >= width2 * dx2 && height2 * dy2 >= height * dy) { aa=height2; brr=dy2;} width_=x4-x1; height_=y4-y1; dx_=x1 >= x4 ?-1 : 1; dy_=y1 >= y4 ?-1 : 1; width2_=x3-x2; height2_=y3-y2; dx2_=x2 >= x3 ?-1 : 1; dy2_=y2 >= y3 ?-1 : 1; if(width_ * dx_ >= height_ * dy_ && width_ * dx_ >= width2_ * dx2_ && width_ * dx_ >= height2_ * dy2_) { aa_=width_; drr=dx_;} else if(height_ * dy_ >= width_ * dx_ && height_ * dy_ >= width2_ * dx2_ && height_ * dy_ >= height2_ * dy2_) { aa_=height_; drr=dy_;} else if(width2_ * dx2_ >= height_ * dy_ && width2_ * dx2_ >= width_ * dx_ && width2_ * dx2_ >= height2_ * dy2_) { aa_=width2_; drr=dx2_;} else if(height2_ * dy2_ >= width_ * dx_ && height2_ * dy2_ >= width2_ * dx2_ && height2_ * dy2_ >= height_ * dy_) { aa_=height2_; drr=dy2_;} br=0; while(aa !=br) { dr=0; while(aa_ !=dr) { fx3=(short)(x1+(float) dr / aa_ * width_)+(short)((float) br / aa *((short)(x2+(float) dr / aa_ * width2_)-(short)(x1+(float) dr / aa_ * width_))); fy3=(short)(y1+(float) dr / aa_ * height_)+(short)((float) br / aa *((short)(y2+(float) dr / aa_ * height2_)-(short)(y1+(float) dr / aa_ * height_))); fx4=(short)(x1+(float)(dr+1) / aa_ * width_)+(short)((float)(br+1) / aa *((short)(x2+(float)(dr+1) / aa_ * width2_)-(short)(x1+(float)(dr+1) / aa_ * width_))); fy4=(short)(y1+(float)(dr+1) / aa_ * height_)+(short)((float)(br+1) / aa *((short)(y2+(float)(dr+1) / aa_ * height2_)-(short)(y1+(float)(dr+1) / aa_ * height_))); minx=fx4 < fx3 ? fx4 : fx3; maxx=fx4 > fx3 ? fx4 : fx3; miny=fy4 < fy3 ? fy4 : fy3; maxy=fy4 > fy3 ? fy4 : fy3; for(j=0; j <= maxy-miny; j++) for(i=0; i <= maxx-minx; i++) { int pvi=(miny+j) * w+(minx+i); int pvxi=((short)((float)(dr+j) / aa_ *(hx-1))) * wx+(short)((float)(br+i) / aa * wx); if(pvi < pv.length && pvxi < pvx.length) pv[pvi]=pvx[pvxi];} dr+=drr;} fx3=(short)(x1+(float) dr / aa_ * width_)+(short)((float) br / aa *((short)(x2+(float) dr / aa_ * width2_)-(short)(x1+(float) dr / aa_ * width_))); fy3=(short)(y1+(float) dr / aa_ * height_)+(short)((float) br / aa *((short)(y2+(float) dr / aa_ * height2_)-(short)(y1+(float) dr / aa_ * height_))); fx4=(short)(x1+(float)(dr+1) / aa_ * width_)+(short)((float)(br+1) / aa *((short)(x2+(float)(dr+1) / aa_ * width2_)-(short)(x1+(float)(dr+1) / aa_ * width_))); fy4=(short)(y1+(float)(dr+1) / aa_ * height_)+(short)((float)(br+1) / aa *((short)(y2+(float)(dr+1) / aa_ * height2_)-(short)(y1+(float)(dr+1) / aa_ * height_))); minx=fx4 < fx3 ? fx4 : fx3; maxx=fx4 > fx3 ? fx4 : fx3; miny=fy4 < fy3 ? fy4 : fy3; maxy=fy4 > fy3 ? fy4 : fy3; for(j=0; j <= maxy-miny; j++) for(i=0; i <= maxx-minx; i++) { int pvi=(miny+j) * w+(minx+i); int pvxi=((short)((float)(dr+j) / aa_ *(hx-1))) * wx+(short)((float)(br+i) / aa *(wx-1)); if(pvi < pv.length && pvxi < pvx.length) pv[pvi]=pvx[pvxi];} br+=brr;} fx3=(short)(x1+(float) dr / aa_ * width_)+(short)((float) br / aa *((short)(x2+(float) dr / aa_ * width2_)-(short)(x1+(float) dr / aa_ * width_))); fy3=(short)(y1+(float) dr / aa_ * height_)+(short)((float) br / aa *((short)(y2+(float) dr / aa_ * height2_)-(short)(y1+(float) dr / aa_ * height_))); fx4=(short)(x1+(float)(dr+1) / aa_ * width_)+(short)((float)(br+1) / aa *((short)(x2+(float)(dr+1) / aa_ * width2_)-(short)(x1+(float)(dr+1) / aa_ * width_))); fy4=(short)(y1+(float)(dr+1) / aa_ * height_)+(short)((float)(br+1) / aa *((short)(y2+(float)(dr+1) / aa_ * height2_)-(short)(y1+(float)(dr+1) / aa_ * height_))); minx=fx4 < fx3 ? fx4 : fx3; maxx=fx4 > fx3 ? fx4 : fx3; miny=fy4 < fy3 ? fy4 : fy3; maxy=fy4 > fy3 ? fy4 : fy3; for(j=0; j <= maxy-miny; j++) for(i=0; i <= maxx-minx; i++) { int pvi=(miny+j) * w+(minx+i); int pvxi=((short)((float)(dr+j) / aa_ *(hx-1))) * wx+(short)((float)(br+i) / aa *(wx-1)); if(pvi < pv.length && pvxi < pvx.length) pv[pvi]=pvx[pvxi];}} private void line(Color[] pv,short w,short h,int x1,int y1,int x2,int y2,Color c) { int dx; int dy; short br; int width; int height; if(x1 >= 0 && x1 < w && x2 >= 0 && x2 < w && y1 >= 0 && y1 < h && y2 >= 0 && y2 < h) { width=x2-x1; height=y2-y1; dx=x1 >= x2 ?-1 : 1; dy=y1 >= y2 ?-1 : 1; br=0; if(dx * width > dy * height) { while(width !=br) { pv[((short)(y1+(float) br / width * height)) * w+(x1+br)]=c; br+=dx;} pv[((short)(y1+(float) br / width * height)) * w+(x1+br)]=c;} else { while(height !=br) { pv[(y1+br) * w+(short)(x1+(float) br / height * width)]=c; br+=dy;} pv[(y1+br) * w+(short)(x1+(float) br / height * width)]=c;}}} public void paint(Graphics cs) { super.paint(cs); if(cs1==null) prepare(); cs1=cs; for(short i=0; i < 640; i++) for(short j=0; j < 480; j++) if(arr !=null && j * 640+i <= arr.length) { Color c1=arr[j * 640+i]; if(c1 !=null) drawPoint(i,j,c1);}} private void drawPoint(short x,short y,Color c1) { short y1=y; cs1.setColor(c1); cs1.drawLine(x,y,x+0,y1);} public boolean mouseUp(Event et,int mx,int my) { if((et.modifiers & Event.SHIFT_MASK) > 0 &&(et.modifiers & Event.CTRL_MASK) > 0) { x1=(short) mx; y1=(short) my; redraw();} else if((et.modifiers & Event.CTRL_MASK) > 0) { x2=(short) mx; y2=(short) my; redraw();} else if((et.modifiers & Event.SHIFT_MASK) > 0) { x4=(short) mx; y4=(short) my; redraw();} else { x3=(short) mx; y3=(short) my; redraw();} return super.mouseUp(et,mx,my);} private void redraw() { clear(); prepare(); repaint();}}
