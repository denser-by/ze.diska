package mydev.rice3; import java.awt.BorderLayout; import java.awt.Button; import java.awt.Choice; import java.awt.Color; import java.awt.Component; import java.awt.Dimension; import java.awt.Event; import java.awt.FlowLayout; import java.awt.Frame; import java.awt.GridLayout; import java.awt.Label; import java.awt.LayoutManager; import java.awt.List; import java.awt.Panel; import java.awt.Point; import java.awt.Scrollbar; import java.awt.TextArea; import java.awt.TextField; import java.io.File; import java.io.IOException; import mydev.aaa.Sleeper; import mydev.about.CanvasAdapter; import mydev.about.PaintAdapter; import mydev.anim.ColorsLogo; import mydev.bbb.Enter2; import mydev.bbb.Location; import mydev.onewayc.OneWayConv; import mydev.uix.AbstractApproach; import mydev.uix.AbstractApproachProvider; import mydev.uix.AbstractParallelPanel; import mydev.uix.AmountPanel; import mydev.uix.AveragePanel; import mydev.uix.Better; import mydev.uix.ChoiceFactory; import mydev.uix.CommonCanvas; import mydev.uix.CommonDataArrayPanel; import mydev.uix.CommonLogPanel; import mydev.uix.CommonLogo; import mydev.uix.CommonSouthPanel; import mydev.uix.ControlsPanel; import mydev.uix.GeoLayoutBuilder; import mydev.uix.HeaderPathPanel; import mydev.uix.IgnorePanel; import mydev.uix.LabeledEditPair; import mydev.uix.LabeledPanel; import mydev.uix.ListPanel; import mydev.uix.LoggingVkusnjashki; import mydev.uix.LongTermCtrl; import mydev.uix.MultyButtonTiersBuilder; import mydev.uix.PagesPanel; import mydev.uix.Params; import mydev.uix.PieChartUnity; import mydev.uix.ProgressBar; import mydev.uix.ProgressChecker; import mydev.uix.ProgressMultiTasking; import mydev.uix.PropertySetPanel; import mydev.uix.Props; import mydev.uix.SidePanelFactory; import mydev.uix.SizePanel; import mydev.uix.Timer; import mydev.uix.ToogleMultyButton; import mydev.uix.YellowAutoButton; import mydev.vutils.AverageRec; import mydev.vutils.Data; import mydev.vutils.Ester; import mydev.vutils.ExpectHere; import mydev.vutils.Files; import mydev.vutils.Filter; import mydev.vutils.Join; import mydev.vutils.Karta; import mydev.vutils.MegaAverageRec; import mydev.vutils.Metr; import mydev.vutils.Order; import mydev.vutils.Queue; import mydev.vutils.ReadyFree; import mydev.vutils.Stack; import mydev.vutils.Time; import mydev.vutils.TimeTracking; public class Hunger extends Frame implements ProcRunnable,LongTermCtrl { DtPathPanel pathPanel; SourceLeftDtPanel leftPanel; RightTasksClassesPanel rightPanel; ParallelDtPanel quadePanel; DtSouthPanel southPanel; DtLogPanel logPanel; String pathParam; String leftPanelParam; MultySrcProcessor spCurrent; OneWayProxyCheck check; TripleRunner runner=new TripleRunner(this); Queue reqProc=new Queue(); MainClsProcessorDtHolder spCurrentHolder=new MainClsProcessorDtHolder(); AzRegistryDt registry; public Hunger(String title) { super(title); setLayout(new BorderLayout()); setBackground(Color.gray); this.registry=new AzRegistryDt(); this.spCurrent=new MultySrcProcessor();} public static void main(String[] args) throws IOException { Hunger main=new Hunger("Leaves Days PrimerNo"); if(args.length > 0) { String param=args[0]; String line=main.getContentOneLine(param); main.setPathParam(param); System.out.println(line); return;} else System.out.println("Please specify source file as a parameter."); main.show(); main.start(); main.pack(); main.reMoveRnd(); main.resize(Enter2.instance().getMainWindowLargeWidth(),Enter2.instance().getMainWindowLargeHeight()); Sleeper sleeper=new Sleeper(); if(Props.mainLower) Thread.currentThread().setPriority(Thread.MIN_PRIORITY); while(Better.working) { main.refreshUpdatable(); TimeTracking.memTrack(); sleeper.sleep(Timer.DEF_REF_TIME);} main.hide(); main.dispose(); System.exit(1-1);} private String getContentOneLine(String param) throws IOException { return check.getContentOneLine(param);} public boolean hasLongTermContin() { return pathPanel.hasLongTermContin();} public void setPathParam(String path) { this.pathParam=path; File file=new File(path); String fullPath=file.getAbsolutePath(); if(file.isDirectory()) updateInfo(null,null,null,true); else { String item=file.getName(); leftPanelParam=item; leftPanel.getTrioListPanel().getAiListPanelSubscriber().addItem(item,fullPath);}} protected void reMoveRnd() { Location ol=Enter2.instance().location(); Point p=ol.getRandomExternalPos((short) Location.MAIN_WINDOWS_WIDTH_LARGE,(short) Location.MAIN_WINDOWS_HEIGHT_LARGE); move(p.x,p.y);} static boolean notEq(Dimension d1,Dimension other) { if(d1.width !=other.width) return true; if(d1.height !=other.height) return true; return false;} public boolean handleEvent(Event et) { if(et.id==Event.WINDOW_DESTROY) new Better().exitApplicationLoop(); if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getSingleBtn()) { pathPanel.changeQuadeState(); cRemake(); pack(); invalidate(); repaint();} if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getBtScan()) { leftPanel.clearAvgPanel(); registry.clearResults(); rightPanel.clearRecount(); updateInfo(null,null,null,true); quadePanel.clearAverage();} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getTrioListPanel().getAiListPanelSubscriber().getCbCancelIgnore()) leftPanel.getTrioListPanel().getAiListPanelSubscriber().onCancelIgnore(); if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getTrioListPanel().getAiListPanelReenock().getCbCancelIgnore()) leftPanel.getTrioListPanel().getAiListPanelReenock().onCancelIgnore(); if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getTrioListPanel().getAiListPanelHeuristics().getCbCancelIgnore()) leftPanel.getTrioListPanel().getAiListPanelHeuristics().onCancelIgnore(); if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getBtStop()) pathPanel.disableStop(); if(et.id==Event.LIST_SELECT && rightPanel.getTasksPanel().isItemsCtrl(et.target)) { leftPanel.getTrioListPanel().getAiListPanelReenock().selectNothing(); RightDtTask rightTask=rightPanel.getTasksPanel().getSelected(); logPanel.addLog("Select task "+rightTask.action+" for "+rightTask.onWhat+" with "+rightTask.pblClsNameRecord+" from "+rightTask.located+" to "+rightTask.result); rightSelectedTasks();} if(et.id==Event.LIST_SELECT && rightPanel.getClassesPanel().isItemsCtrl(et.target)) { leftPanel.getTrioListPanel().getAiListPanelReenock().selectNothing(); String rightTask=rightPanel.getClassesPanel().getSelected(); logPanel.addLog("Select item "+rightTask); rightSelectedClasses();} if(et.id==Event.LIST_SELECT && leftPanel.getTrioListPanel().getAiListPanelSubscriber().isItemsCtrl(et.target)) { registry.clearResults(); quadePanel.initSource(); int idxSel=leftPanel.getTrioListPanel().getAiListPanelSubscriber().getSelectedIdx(); spCurrent.spSubscriber=leftPanel.getTrioListPanel().getAiListPanelSubscriber().leftSelectedSubscriber(idxSel); leftPanel.enableOneLineBtn(true);} if(et.id==Event.LIST_SELECT && leftPanel.getTrioListPanel().getAiListPanelReenock().isItemsCtrl(et.target)) { quadePanel.initSource(); int idxSel=leftPanel.getTrioListPanel().getAiListPanelReenock().getSelectedIdx(); spCurrent.spReenock=leftPanel.getTrioListPanel().getAiListPanelReenock().leftSelectedReenock(idxSel);} if(et.id==Event.LIST_SELECT && leftPanel.getTrioListPanel().getAiListPanelHeuristics().isItemsCtrl(et.target)) { quadePanel.initSource(); int idxSel=leftPanel.getTrioListPanel().getAiListPanelHeuristics().getSelectedIdx(); spCurrent.spHeuristics=leftPanel.getTrioListPanel().getAiListPanelHeuristics().leftSelectedHeuristics(idxSel);} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getOneLineBtn()) { spCurrent.getSpSubscriber().process(false); leftPanel.enableOneLineBtn(!true); leftPanel.enableSaveBtn(true);} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getSaveBtn()) { spCurrent.getSpSubscriber().saveSourceLine(); leftPanel.enableOneLineBtn(false); leftPanel.enableSaveBtn(false);} if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getChPreview()) { if(pathPanel.getPreview()) pathPanel.setPath("C:\\Users\\dzianis\\workspace\\"); else pathPanel.setPath("C:\\Users\\dzianis\\workspace\\");} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getLunchBtn()) { int idxSel=leftPanel.getTrioListPanel().getAiListPanelReenock().getSelectedIdx(); String relPath=leftPanel.getTrioListPanel().getAiListPanelReenock().getItem(idxSel); spCurrent.getSpReenock().processLunch(relPath,idxSel); leftPanel.enableLunchBtn(false);} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getAutoBtn()) autoLines(); if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getReviewBtn()) { logPanel.prognoseTasks(1); leftPanel.clearAvgPanel(); quadePanel.clearAverage(); rightPanel.getTasksPanel().clearTasks(); leftPanel.enableAutoBtn(false); pathPanel.getBtScan().enable(false); pathPanel.enableSingleBtn(false); pathPanel.enableStop(); pathPanel.enablePreview(false); leftPanel.enableCtrls(false); reviewLeftItems();} if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getSortBtn()) { logPanel.prognoseTasks(1); rightPanel.getClassesPanel().restoreList(); sortLines(false,true,true);} if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getDoublesBtn()) { logPanel.prognoseTasks(1); rightPanel.getClassesPanel().backupList(); sortLines(true,true,true);} if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getExportBtn()) { logPanel.prognoseTasks(1); rightPanel.getClassesPanel().getBtnPanel().enableExportBtn(false); exportList(pathPanel);} if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getClearBtn()) rightPanel.getClassesPanel().clearTasks(); if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getSaveBtn()) { rightPanel.enableSaveBtn(false); rightSelectedSave();} if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getSaveAllBtn()) { rightPanel.enableSaveAllBtn(false); leftPanel.enableCtrls(false); leftPanel.enableLunch(false); leftPanel.enableAuto(false); rightSelectedSaveAll(this,new Sleeper(),true);} if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getDeleteAllBtn()) { rightPanel.enableDeleteAllBtn(false); rightPanel.getTasksPanel().clearTasks(); leftPanel.getSizeSavePanel().getTroublePanel().getConfPanel().dropBtnSkipPosition(); leftPanel.enableAuto(true);} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getConfigBtn()) { processConfig(); leftPanel.regConfigPress();} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getCheckBtn()) { processCheck(); leftPanel.regCheckPress();} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getBinBtn()) { processBin(); leftPanel.regBinPress();} return super.handleEvent(et);} void processBin() { String lookingWhere=pathPanel.getPath(); System.out.println("processBin() "+lookingWhere); rightPanel.getTasksPanel().registerTask(new RightDtTask(RightDtTask.TASK_BIN,"All",lookingWhere,rightPanel.getTasksPanel().getCtrlPanel().getSelectedExtension()));} void processCheck() { String lookingWhere=pathPanel.getPath(); System.out.println("processCheck() "+lookingWhere); rightPanel.getTasksPanel().registerTask(new RightDtTask(RightDtTask.TASK_CHK,"All",lookingWhere,rightPanel.getTasksPanel().getCtrlPanel().getSelectedExtension()));} void processConfig() { String lookingWhere=pathPanel.getPath(); System.out.println("processConfig() "+lookingWhere); rightPanel.getTasksPanel().registerTask(new RightDtTask(RightDtTask.TASK_CONF,"All",lookingWhere,rightPanel.getTasksPanel().getCtrlPanel().getSelectedExtension()));} protected void rightSelectedSaveAll(LongTermCtrl ltc,Sleeper sleeper,boolean sepLunch) { RightHungerSaveAllDtTask saveAllTask=new RightHungerSaveAllDtTask(leftPanel,rightPanel.getTasksPanel(),pathPanel,quadePanel,spCurrentHolder,sleeper,ltc,reqProc,sepLunch); logPanel.regTreckableTaskReenock(saveAllTask); if(sepLunch) { pathPanel.enableStop(); new Thread(saveAllTask).start();} else saveAllTask.run();} protected void rightSelectedClasses() { HeuristicsRightDtPanel classesPanel=rightPanel.getClassesPanel(); classesPanel.setAmount(""+classesPanel.itemsNum()); int idxSel=classesPanel.getSelectedIdx(); classesPanel.setPosition(""+(idxSel+1));} protected void rightSelectedTasks() { RightTasksDtPanel tasksPanel=rightPanel.getTasksPanel(); rightPanel.getTasksPanel().enableDisableSave(); tasksPanel.setAmount(""+tasksPanel.itemsNum()); int idxSel=tasksPanel.getSelectedIdx(); String looking=pathPanel.getPath(); tasksPanel.setPosition(""+(idxSel+1)); RightDtTask rightTask=tasksPanel.getTask(idxSel); if(spCurrent.spReenock==null) spCurrent.spReenock=(MainClsSearchDtPanel) quadePanel.getFirstMain(); spCurrent.getSpReenock().performTask(idxSel,looking,rightTask);} protected void rightSelectedSave() { RightTasksDtPanel tasksPanel=rightPanel.getTasksPanel(); int idxSel=tasksPanel.getSelectedIdx(); if(idxSel >-1) { RightDtTask rightTask=tasksPanel.getTask(idxSel); if(spCurrent.spReenock==null) spCurrent.spReenock=(MainClsSearchDtPanel) quadePanel.getFirstMain(); spCurrent.getSpReenock().saveTask(rightTask);}} public ProcRunnable accept(Class nev) { reqProc.enqueueQueueRecord(nev); return this;} public void run() { Sleeper sleeper=new Sleeper(); int v=runner.getIncr(); switch(v) { case 1 : run1(); runner.markCompleted(); break; case 2 : run2(); runner.markCompleted(); break; case 3 : run3(); runner.markCompleted(); break;} if(runner.hasAllComplete()) { if(pathPanel.getPreview()) { pathPanel.setPreview(false); sleeper.sleep(166 * 2); new Better().exitApplicationLoop();} pathPanel.disableStop(); pathPanel.getBtScan().enable(true); pathPanel.enableSingleBtn(true); pathPanel.enablePreview(true); HeuristicsAutoDtScanPanel reviewPanel=leftPanel.getSizeSavePanel().getTroublePanel().getReviewPanel(); reviewPanel.getBtAuto().enable(true); reviewPanel.getBtReview().enable(true); leftPanel.enableCtrls(true); leftPanel.selectNothing(); rightPanel.enableCtrls(true);}} public void run1() { LongTermCtrl ltc=pathPanel; SourceDtProcessor sp; ExpectHere ehSubscriber=null; MultyCompleteCounter mcc=new MultyCompleteCounter(1,false); ScanMultySrcDtLeftTask progCheckSubscriber=new ScanMultySrcDtLeftTask(logPanel,ehSubscriber,pathPanel,leftPanel.getTrioListPanel().getAiListPanelSubscriber(),leftPanel,mcc,reqProc); logPanel.regTreckableTaskSubscriber(progCheckSubscriber); progCheckSubscriber.run(); Sleeper sleeper=new Sleeper(); Time t=new Time(); t.start(); int size1=leftPanel.getTrioListPanel().getAiListPanelSubscriber().itemsNum(); if(size1 > 0) { oneLineItemsAll(ltc,sleeper,size1); while(quadePanel.hasInProgress()) sleeper.sleep(166);} t.trust(); logPanel.addLogComplete("Average records("+quadePanel.getAverageRec().getRecordsNum()+") processing time is "+quadePanel.getAverageRec().getAverageTime()+"s also min time is "+quadePanel.getAverageRec().getMinTime()+"s and max time is "+quadePanel.getAverageRec().getMaxTime()+"s"); logPanel.addLogComplete("Auto OneLine transform complete "+t.ess()); if(pathPanel.getPreview()) preview(sleeper,size1,pathPanel);} private void oneLineItemsAll(LongTermCtrl ltc,Sleeper sleeper,int size1) { OneLineAllDtTask oneLineTask=new OneLineAllDtTask(leftPanel,quadePanel,logPanel,sleeper,size1,ltc,reqProc); logPanel.regTreckableTaskSubscriber(oneLineTask); oneLineTask.run();} public void run2() { LongTermCtrl ltc=pathPanel; MainClsDtProcessor sp; ExpectHere ehReenock=null; MultyCompleteCounter mcc=new MultyCompleteCounter(1,false); ScanPackageItemsDtLeftTask progCheckReenock=new ScanPackageItemsDtLeftTask(logPanel,ehReenock,pathPanel,leftPanel.getTrioListPanel().getAiListPanelReenock(),leftPanel,mcc,reqProc); logPanel.regTreckableTaskReenock(progCheckReenock); progCheckReenock.run(); Sleeper sleeper=new Sleeper(); Time t=new Time(); t.start(); processCheck(); processConfig(); processBin(); int size1=leftPanel.getTrioListPanel().getAiListPanelReenock().itemsNum(); if(size1 > 0) { leftSelectionProcessAll(sleeper,ltc,size1); while(quadePanel.hasInProgressMain()) sleeper.sleep(166);} sp=null; quadePanel.clearPanels(); rightSelectedSaveAll(ltc,sleeper,false); t.trust(); logPanel.addLogComplete("Average records("+quadePanel.getAverageRec().getRecordsNum()+") processing time is "+quadePanel.getAverageRec().getAverageTime()+"s also min time is "+quadePanel.getAverageRec().getMinTime()+"s and max time is "+quadePanel.getAverageRec().getMaxTime()+"s"); logPanel.addLogComplete("Auto check complete in "+t.ess());} protected void leftSelectionProcessAll(Sleeper sleeper,LongTermCtrl ltc,int size1) { LeftHungerProcessAllDtTask packTask=new LeftHungerProcessAllDtTask(leftPanel,quadePanel,logPanel,pathPanel,sleeper,size1,ltc,reqProc); logPanel.regTreckableTaskReenock(packTask); packTask.run();} public void run3() { LongTermCtrl ltc=pathPanel; PkgClsDtProcessor sp; ExpectHere ehHeuristics=null; MultyCompleteCounter mcc=new MultyCompleteCounter(1,false); ScanTinaSourceDtLeftTask progCheckHeuristics=new ScanTinaSourceDtLeftTask(logPanel,ehHeuristics,pathPanel,leftPanel.getTrioListPanel().getAiListPanelHeuristics(),leftPanel,mcc,reqProc); logPanel.regTreckableTaskHeuristics(progCheckHeuristics); progCheckHeuristics.run(); Sleeper sleeper=new Sleeper(); Time t=new Time(); t.start(); int size1=leftPanel.getTrioListPanel().getAiListPanelHeuristics().itemsNum(); if(size1 > 0) { leftSelectionProcessAllTina(sleeper,ltc,size1); while(quadePanel.hasInProgressPkg()) sleeper.sleep(166);} sp=null; quadePanel.clearPanels(); t.trust(); logPanel.addLogComplete("Average records("+quadePanel.getAverageRec().getRecordsNum()+") processing time is "+quadePanel.getAverageRec().getAverageTime()+"s also min time is "+quadePanel.getAverageRec().getMinTime()+"s and max time is "+quadePanel.getAverageRec().getMaxTime()+"s"); logPanel.addLogComplete("Auto doubles complete in "+t.ess()); leftPanel.getTrioListPanel().getAiListPanelHeuristics().selectNothing(); HeuristicsRightDtPanel classesPanel=rightPanel.getClassesPanel(); if(ltc.hasLongTermContin()) exportList(ltc); if(ltc.hasLongTermContin()) { classesPanel.restoreList(); sortLines(false,false,false);} if(ltc.hasLongTermContin()) rightRun(sleeper,ltc); if(ltc.hasLongTermContin()) exportList(ltc); if(ltc.hasLongTermContin()) { classesPanel.backupList(); sortLines(true,false,false);} if(ltc.hasLongTermContin()) rightRun(sleeper,ltc); if(ltc.hasLongTermContin()) exportList(ltc);} protected void leftSelectionProcessAllTina(Sleeper sleeper,LongTermCtrl ltc,int size1) { LeftTinaProcessAllDtTask packTask=new LeftTinaProcessAllDtTask(leftPanel,quadePanel,logPanel,pathPanel,sleeper,size1,ltc,reqProc); logPanel.regTreckableTaskHeuristics(packTask); packTask.run();} void checkProc(CommonProc sp) { boolean found=false; Queue iter=reqProc.quickQueueCopy(); while(!found && iter.sizeOfQueue() > 0) { Class item=(Class) iter.dequeueQueueRecord(); if(item==sp.getClass()) found=true;} if(!found) throw new IllegalArgumentException("Unknown proc!!!"+sp.toString());} private void preview(Sleeper sleeper,int size1,LongTermCtrl ltc) { OneLinePreviewDtTask previewTask=new OneLinePreviewDtTask(leftPanel,quadePanel,logPanel,sleeper,size1,ltc,reqProc); logPanel.regTreckableTaskSubscriber(previewTask); previewTask.run();} private void rightRun(Sleeper sleeper,LongTermCtrl ltc) { DtTinaRightRunTask rightRunTask=new DtTinaRightRunTask(rightPanel.getClassesPanel(),sleeper,ltc,reqProc); logPanel.regTreckableTaskHeuristics(rightRunTask); rightRunTask.run();} public void reviewLeftItems() { LeftViewAllDtTask reviewTask=new LeftViewAllDtTask(leftPanel,rightPanel,quadePanel,logPanel,pathPanel,reqProc); logPanel.regTreckableTaskHeuristics(reviewTask); new Thread(reviewTask).start();} private void exportList(LongTermCtrl ltc) { TinaExportRightDtListTask exportTask=new TinaExportRightDtListTask(rightPanel.getClassesPanel(),pathPanel,logPanel,ltc,reqProc); logPanel.regTreckableTaskHeuristics(exportTask); exportTask.run();} protected void sortLines(boolean nameSort,boolean parallel,boolean manageCtrls) { if(manageCtrls) { HeuristicsAutoDtScanPanel reviewPanel=leftPanel.getSizeSavePanel().getTroublePanel().getReviewPanel(); reviewPanel.getBtAuto().enable(false); reviewPanel.getBtReview().enable(false); pathPanel.getBtScan().enable(false); pathPanel.enableSingleBtn(false); pathPanel.enableStop(); pathPanel.enablePreview(false); leftPanel.enableCtrls(false); rightPanel.enableCtrls(false);} RightDtOrderTask rightOrdering=new RightDtOrderTask(new PanelsAgDt(logPanel,rightPanel,pathPanel,quadePanel,leftPanel),nameSort,manageCtrls,reqProc); logPanel.regTreckableTaskHeuristics(rightOrdering); if(parallel) new Thread(rightOrdering).start(); else rightOrdering.run();} protected void autoLines() { leftPanel.enableAutoBtn(false); pathPanel.getBtScan().enable(false); pathPanel.enableSingleBtn(false); pathPanel.enableStop(); pathPanel.enablePreview(false); leftPanel.enableCtrls(false); faaCoolTatiFv();} private void faaCoolTatiFv() { if(1+1 > 1+1) if(pathPanel.getPreview()) preview(new Sleeper(),leftPanel.getTrioListPanel().getAiListPanelSubscriber().itemsNum(),pathPanel); int search=1+1+1; int oneLineProc=1; if(pathPanel.getPreview()) oneLineProc+=1; int zhooProc=1+1; int tinaProc=1+5+1+1-1; logPanel.prognoseTasks(search+oneLineProc+zhooProc+tinaProc); runner.lunch();} protected void start() { this.southPanel=new DtSouthPanel(); this.logPanel=southPanel.getLogPanel(); this.pathPanel=new DtPathPanel(pathParam); add("North",pathPanel.getWrapPanel()); this.check=new OneWayProxyCheck(pathPanel); add("East",rightPanel=new RightTasksClassesPanel(logPanel,pathPanel,quadePanel,registry)); cRemake(); add("West",leftPanel=new SourceLeftDtPanel(pathPanel,logPanel,quadePanel)); quadePanel.setLeftPanel(leftPanel); add("South",southPanel); if(leftPanelParam !=null) { leftPanel.getTrioListPanel().getAiListPanelSubscriber().selectItem(0); leftPanel.getTrioListPanel().getAiListPanelSubscriber().setAmount(""+1); spCurrent.spSubscriber=(SourceDtPanel) quadePanel.getFirst(); spCurrent.getSpSubscriber().readSource(leftPanelParam,pathParam,"","",0); spCurrent.getSpSubscriber().process(false); leftPanel.enableSaveBtn(true);} rightPanel.getTasksPanel().getCtrlPanel().getBtnPanel().dropBtnSkipPosition();} void cRemake() { if(quadePanel !=null) remove(quadePanel); add("Center",quadePanel=ParallelDtPanel.create2(pathPanel.getSingle(),new ParallelPanelAg(logPanel.getLogging(),leftPanel,rightPanel,check,pathPanel,registry)));} protected void refreshUpdatable() { leftPanel.updateOnUiThread(quadePanel.getAverageRec()); southPanel.refreshUpdatable(); rightPanel.updateOnUiThread(); pathPanel.refreshUpdatable();} protected void updateInfo(ExpectHere ehSubscriber,ExpectHere ehReenock,ExpectHere ehHeuristics,boolean opSingle) { String path=pathPanel.getPath(); pathPanel.enableStop(); leftPanel.clearItems(); rightPanel.clearItems(); quadePanel.initSource(); leftPanel.clearStats(); leftPanel.dropBtnSkipPosition(); rightPanel.dropBtnSkipPosition(); if(opSingle) logPanel.prognoseTasks(1+1+1); MultyCompleteCounter mcc=new MultyCompleteCounter(1+1+1,opSingle); ScanMultySrcDtLeftTask progCheckSubscriber=new ScanMultySrcDtLeftTask(logPanel,ehSubscriber,pathPanel,leftPanel.getTrioListPanel().getAiListPanelSubscriber(),leftPanel,mcc,reqProc); logPanel.regTreckableTaskSubscriber(progCheckSubscriber); new Thread(progCheckSubscriber).start(); ScanPackageItemsDtLeftTask progCheckReenock=new ScanPackageItemsDtLeftTask(logPanel,ehReenock,pathPanel,leftPanel.getTrioListPanel().getAiListPanelReenock(),leftPanel,mcc,reqProc); logPanel.regTreckableTaskReenock(progCheckReenock); new Thread(progCheckReenock).start(); ScanTinaSourceDtLeftTask progCheckHeuristics=new ScanTinaSourceDtLeftTask(logPanel,ehHeuristics,pathPanel,leftPanel.getTrioListPanel().getAiListPanelHeuristics(),leftPanel,mcc,reqProc); logPanel.regTreckableTaskHeuristics(progCheckHeuristics); new Thread(progCheckHeuristics).start();}} class ProgressDtBar extends ProgressBar { public ProgressDtBar() { super(DEF_HEIGHT,HungerProps.borderProgressColor,HungerProps.bgProgressColor,HungerProps.mainProgressColor,true);} public ProgressDtBar(int minSize,Color borderColor,Color bgColor,Color progressColor) { super(minSize,borderColor,bgColor,progressColor,true);}} class DtSouthPanel extends CommonSouthPanel { DtLogPanel logPanel; ColorsLogo logoPanel; Panel pbPanel; public DtSouthPanel() { super(); pbPanel=new Panel(); pbPanel.setLayout(new BorderLayout()); pbPanel.add("North",logPanel.proBarSubscriber); pbPanel.add("Center",logPanel.proBarReenock); pbPanel.add("South",logPanel.proBarHeuristics); add("North",pbPanel); add("South",logPanel.getProgressBarTotal());} protected CommonLogo obtainLogo() { logoPanel=new ColorsLogo(); return logoPanel;} protected CommonLogPanel obtainLogPanel() { logPanel=new DtLogPanel(); return logPanel;} public DtLogPanel getLogPanel() { return logPanel;}} class DtLogPanel extends CommonLogPanel implements LoggingVkusnjashki { ProgressDtBar proBarSubscriber; ProgressDtBar proBarReenock; ProgressDtBar proBarHeuristics; public DtLogPanel() { super(true); remove(proBarCur); remove(proBarTotal); this.proBarSubscriber=new ProgressDtBar(); this.proBarReenock=new ProgressDtBar(); this.proBarHeuristics=new ProgressDtBar();} protected ProgressBar obtainProgressBarCurrent() { return new ProgressDtBar();} protected ProgressBar obtainProgressBarTotal() { return new ProgressDtBar(ProgressDtBar.DEF_HEIGHT,HungerProps.borderProgressTotalColor,HungerProps.bgProgressTotalColor,HungerProps.mainProgressTotalColor);} public Color getPanelBgColor() { return HungerProps.bgLogPanelColor;} public LayoutManager getPanelLayout() { return new BorderLayout();} public void regTreckableTaskSubscriber(ProgressChecker progCheck) { proBarSubscriber.setProgressChecker(progCheck); proBarTotal.appendProgressChecker(progCheck);} public void regTreckableTaskReenock(ProgressChecker progCheck) { proBarReenock.setProgressChecker(progCheck); proBarTotal.appendProgressChecker(progCheck);} public void regTreckableTaskHeuristics(ProgressChecker progCheck) { proBarHeuristics.setProgressChecker(progCheck); proBarTotal.appendProgressChecker(progCheck);} public void refreshUpdatable() { super.refreshUpdatable(); proBarSubscriber.refreshUpdatable(); proBarReenock.refreshUpdatable(); proBarHeuristics.refreshUpdatable();} public LoggingVkusnjashki getLogging() { return(LoggingVkusnjashki)(this);}} class DtPathPanel extends HeaderPathPanel implements LongTermCtrl { private String pathParam; public DtPathPanel(String pathParam) { super("Leaves Days PrimerNo",true,true,LabeledPanel.DEF_MIN_SIZE,HungerProps.northBgColor,HungerProps.northBorderColor,HungerProps.northTextColor); this.pathParam=pathParam;} public boolean getSingle() { return getMultyState();} public void enableSingleBtn(boolean enable) { enableMultyBtn(enable);} public void changeQuadeState() { changeMultyState();} public Button getSingleBtn() { return getBtMulty();} public boolean hasLongTermContin() { return longTermOp;} protected ToogleMultyButton obtainMultyButton() { return new SingleButton();} protected Label obtainLbPath() { return new Label("Source location:");} protected TextField obtainTfPath() { TextField tfPath=new TextField("",(50+20+10+5-30-20+5) *(1+1)); tfPath.setText("C:\\Users\\dzianis\\workspace\\Architecho\\"); tfPath.setText("C:\\Users\\dzianis\\workspace2\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\"); if(pathParam !=null) tfPath.setText(pathParam); return tfPath;} protected void buildPanel() { buildPath();} public Color getPanelBgColor() { return HungerProps.bgTopColor;}} class SourceLeftDtPanel extends Panel { LeftSizeSaveDtPanel sizeSavePanel; DtPathPanel pathPanel; TrioAmountIgnoreListPanel trioListPanel; public SourceLeftDtPanel(DtPathPanel pathPanel,DtLogPanel logPanel,ParallelDtPanel quadePanel) { super(); setBackground(HungerProps.bgSideColor); setLayout(new BorderLayout()); this.pathPanel=pathPanel; add("Center",trioListPanel=new TrioAmountIgnoreListPanel(logPanel,pathPanel,quadePanel)); add("South",sizeSavePanel=new LeftSizeSaveDtPanel());} public Button getReviewBtn() { return sizeSavePanel.getTroublePanel().getReviewPanel().getBtReview();} public void enableAuto(boolean enable) { sizeSavePanel.getTroublePanel().getReviewPanel().enableAuto(enable);} public void selectNothing() { trioListPanel.getAiListPanelSubscriber().selectNothing(); trioListPanel.getAiListPanelReenock().selectNothing(); trioListPanel.getAiListPanelHeuristics().selectNothing();} public TrioAmountIgnoreListPanel getTrioListPanel() { return trioListPanel;} public void clearItems() { trioListPanel.getAiListPanelSubscriber().clearItems(); trioListPanel.getAiListPanelReenock().clearItems(); trioListPanel.getAiListPanelHeuristics().clearItems();} public void clearStats() { trioListPanel.getAiListPanelSubscriber().clearStats(); trioListPanel.getAiListPanelReenock().clearStats(); trioListPanel.getAiListPanelHeuristics().clearStats();} public void clearAvgPanel() { sizeSavePanel.getAvgPanel().clearPanel();} public Button getOneLineBtn() { return sizeSavePanel.getTroublePanel().getSavePanel().getBtOneLine();} public Button getLunchBtn() { return sizeSavePanel.getTroublePanel().getConfPanel().getBtLunch();} public Button getAutoBtn() { return sizeSavePanel.getTroublePanel().getReviewPanel().getBtAuto();} public Button getConfigBtn() { return sizeSavePanel.getTroublePanel().getConfPanel().getBtConfig();} public void regConfigPress() { sizeSavePanel.getTroublePanel().getConfPanel().regConfigPress();} public Button getCheckBtn() { return sizeSavePanel.getTroublePanel().getConfPanel().getBtCheck();} public void regCheckPress() { sizeSavePanel.getTroublePanel().getConfPanel().regCheckPress();} public Button getBinBtn() { return sizeSavePanel.getTroublePanel().getConfPanel().getBtBin();} public void regBinPress() { sizeSavePanel.getTroublePanel().getConfPanel().regBinPress();} public void dropBtnSkipPosition() { sizeSavePanel.getTroublePanel().dropBtnSkipPosition();} public Button getSaveBtn() { return sizeSavePanel.getTroublePanel().getSavePanel().getBtSave();} public void enableOneLineBtn(boolean enable) { sizeSavePanel.getTroublePanel().getSavePanel().getBtOneLine().enable(enable);} public LeftSizeSaveDtPanel getSizeSavePanel() { return sizeSavePanel;} public DtPathPanel getPathPanel() { return pathPanel;} public void enableSaveBtn(boolean enable) { sizeSavePanel.getTroublePanel().getSavePanel().getBtSave().enable(enable);} public void enableCtrls(boolean enable) { trioListPanel.getAiListPanelSubscriber().listEnable(enable); trioListPanel.getAiListPanelReenock().listEnable(enable); trioListPanel.getAiListPanelHeuristics().listEnable(enable);} public void updateOnUiThread(AverageRec mar) { sizeSavePanel.updateMinMaxAvg(mar); LongTermCtrl ltc=pathPanel; sizeSavePanel.enableReviewBtn(!ltc.hasLongTermContin() && trioListPanel.getAiListPanelHeuristics().itemsNum() > 0); boolean prerequsites=trioListPanel.getAiListPanelReenock().itemsNum() > 0 && !ltc.hasLongTermContin(); sizeSavePanel.getTroublePanel().enableConfigBtn(prerequsites && sizeSavePanel.isConfigPressed()==false); sizeSavePanel.getTroublePanel().enableCheckBtn(prerequsites && sizeSavePanel.isCheckPressed()==false); sizeSavePanel.getTroublePanel().enableBinBtn(prerequsites && sizeSavePanel.isBinPressed()==false);} public void enableLunchBtn(boolean enable) { sizeSavePanel.getTroublePanel().getConfPanel().getBtLunch().enable(enable);} public void enableAutoBtn(boolean enable) { sizeSavePanel.getTroublePanel().getReviewPanel().getBtAuto().enable(enable);} public void enableLunch(boolean enable) { sizeSavePanel.troublePanel.confPanel.enableLunch(enable);}} class AzRegistryDt { final static String LETTERS="ABCDEFGHIJKLMNOPQRSTUVWXYZ"; private Karta letterMap; private boolean enabledIncr; private boolean started; private boolean changes; public AzRegistryDt() { super(); this.letterMap=new Karta(); this.enabledIncr=true;} public synchronized void enableIncr(boolean enable) { this.enabledIncr=enable;} public synchronized void incrLetter(char letter,long amount) { if(!started) started=true; String key=getKey(letter); Long item=(Long) letterMap.get(key); if(enabledIncr) { changes=true; letterMap.put(key,new Long((item !=null ? item.longValue() : 0L)+amount));}} public boolean peekChanges() { if(changes) { changes=false; return true;} return false;} public synchronized long getResult(char letter) { Object res=letterMap.get(getKey(letter)); if(res !=null) return((Long) res).longValue(); return 0L;} public boolean isStarted() { return started;} public synchronized void clearResults() { letterMap=new Karta();} private String getKey(char letter) { String key=new Ester("").append(letter).lc().toString(); return key;}} class SourcePieChartDtRecord { char letter; String name; long amount; public SourcePieChartDtRecord(char letter,String name,long amount) { super(); this.letter=letter; this.name=name; this.amount=amount;}} class LetterSourceSortDtItem extends Ester { private static boolean amountSort; private static boolean ascend; private SourcePieChartDtRecord rec; public LetterSourceSortDtItem(SourcePieChartDtRecord rec) { super(); this.rec=rec;} public SourcePieChartDtRecord getRec() { return rec;} public boolean less(Ester es) { LetterSourceSortDtItem other=(LetterSourceSortDtItem) es; if(ascend) { if(amountSort) return rec.amount < other.rec.amount; else return rec.letter < other.rec.letter;} if(amountSort) return rec.amount > other.rec.amount; return rec.letter > other.rec.letter;} public static void setSortingArgs(boolean amountSort,boolean ascend) { LetterSourceSortDtItem.amountSort=amountSort; LetterSourceSortDtItem.ascend=ascend;}} abstract class CommonOneLinePieChartDtCanvas extends CommonCanvas { protected PieChartUnity pieChartUnity; public CommonOneLinePieChartDtCanvas(PieChartUnity pieChartUnity,boolean withBorder,int width,int height) { super(width+10 / 2-1+1,height,HungerProps.bgChartColor,withBorder ? HungerProps.textChartPanelColor : null); this.pieChartUnity=pieChartUnity;}} class OneLinePieChartDtCanvas extends CommonOneLinePieChartDtCanvas { public OneLinePieChartDtCanvas(PieChartUnity pieChartUnity,boolean withBorder) { super(pieChartUnity,withBorder,110+5+5-1-1-1-1-5,110-(5+5)-1);} public void updatePercents() { if(pieChartUnity.getPieChart() !=null) pieChartUnity.getPieChart().updateSectorsPercents();} public void clearItems() { if(pieChartUnity.getPieChart() !=null) pieChartUnity.getPieChart().clearSectors();} public void appendItem(String name,long amount) { if(pieChartUnity.getPieChart() !=null) pieChartUnity.getPieChart().addSector(name,amount);} protected void drawItems(CanvasAdapter ics,PaintAdapter pn) { if(pieChartUnity.getPieChart()==null) pieChartUnity.obtainPieChart(sCur.width / 2,sCur.height / 2,(sCur.width < sCur.height ? sCur.width : sCur.height) / 2-2); if(Hunger.notEq(sCur,sPrev)) pieChartUnity.getPieChart().reshapeSectors(sCur.width / 2,sCur.height / 2,(sCur.width < sCur.height ? sCur.width : sCur.height) / 2-2); pieChartUnity.getPieChart().toPen(ics,pn.select(pieChartUnity.getPieChart()));}} class OneLinePieChartLegendDtCanvas extends CommonOneLinePieChartDtCanvas { Scrollbar vScroll; public OneLinePieChartLegendDtCanvas(PieChartUnity pieChartUnity,Scrollbar vScroll,boolean withBorder) { super(pieChartUnity,withBorder,10,10); this.vScroll=vScroll;} public void clearItems() { if(pieChartUnity.getPieChartLegend() !=null) pieChartUnity.getPieChartLegend().clearRecords();} protected void drawItems(CanvasAdapter ics,PaintAdapter pn) { if(pieChartUnity.getPieChartLegend()==null) pieChartUnity.obtainPieChartLegend(sCur.width,sCur.height,vScroll); if(Hunger.notEq(sCur,sPrev)) pieChartUnity.getPieChartLegend().reshape(sCur.width,sCur.height); pieChartUnity.getPieChartLegend().toPen(ics,pn.select(pieChartUnity.getPieChartLegend()));}} class LettersOneLineRightDtPanel extends Panel { OneLinePieChartDtCanvas pieChartCanvas; OneLinePieChartLegendDtCanvas pieChartLegendCanvas; Scrollbar vScroll; Choice chTypeSort; private AzRegistryDt registry; private PieChartUnity pieChartUnity; private boolean init; public LettersOneLineRightDtPanel(ParallelDtPanel quadePanel,AzRegistryDt registry) { super(); setLayout(new BorderLayout()); setBackground(Color.gray); this.registry=registry; this.pieChartUnity=new PieChartUnity(); add("North",pieChartCanvas=new OneLinePieChartDtCanvas(pieChartUnity,false)); add2("East",new Scrollbar(Scrollbar.VERTICAL,1,10,1,100)); add("Center",pieChartLegendCanvas=new OneLinePieChartLegendDtCanvas(pieChartUnity,vScroll,false)); add("South",chTypeSort=obtainChoiceSort());} public void changePieChartType() { refreshUpdatable();} public void refreshUpdatableLegend() { refreshUpdatable();} public Scrollbar getPieChartVertScroll() { return vScroll;} public Choice getChTypeSort() { return chTypeSort;} protected Choice obtainChoiceSort() { Choice chType=new Choice(); chType.addItem(HungerProps.SORT_DESC); chType.addItem(HungerProps.SORT_ASC); chType.addItem(HungerProps.SORT_FIRST); chType.addItem(HungerProps.SORT_LAST); return chType;} void add2(String string,Scrollbar scroll) {} public void clearRecount() { pieChartCanvas.clearItems(); pieChartCanvas.updatePercents(); pieChartCanvas.refreshUpdatable(); pieChartLegendCanvas.clearItems(); pieChartLegendCanvas.refreshUpdatable();} public void refreshUpdatable() { if(init==false && pieChartUnity.getPieChartLegend() !=null) { pieChartUnity.getPieChartLegend().setLegendItemSide(5+5+5-1-1+1+1-1); pieChartUnity.getPieChartLegend().setSpace(1+1-1); init=true;} if(registry.isStarted() && registry.peekChanges()) { pieChartCanvas.clearItems(); String attrTypeSort=getChTypeSort().getSelectedItem(); boolean amountSort=true; boolean ascendSort=true; if(attrTypeSort.equalsIgnoreCase(HungerProps.SORT_ASC)) { amountSort=true; ascendSort=true;} else if(attrTypeSort.equalsIgnoreCase(HungerProps.SORT_DESC)) { amountSort=true; ascendSort=false;} else if(attrTypeSort.equalsIgnoreCase(HungerProps.SORT_FIRST)) { amountSort=false; ascendSort=true;} else if(attrTypeSort.equalsIgnoreCase(HungerProps.SORT_LAST)) { amountSort=false; ascendSort=false;} LetterSourceSortDtItem.setSortingArgs(amountSort,ascendSort); LetterSourceSortDtItem[] asc=new LetterSourceSortDtItem[AzRegistryDt.LETTERS.length()]; for(int i=0; i < asc.length; i++) { char cur=AzRegistryDt.LETTERS.charAt(i); Ester lc=new Ester("").append(cur).lc(); SourcePieChartDtRecord rec=new SourcePieChartDtRecord(cur,""+cur+lc.toString(),registry.getResult(cur)); asc[i]=new LetterSourceSortDtItem(rec);} new Order().order(asc); for(int i=0; i < asc.length; i++) pieChartCanvas.appendItem(asc[i].getRec().name,asc[i].getRec().amount); pieChartCanvas.updatePercents(); pieChartCanvas.refreshUpdatable(); pieChartLegendCanvas.refreshUpdatable();}}} class RightTasksClassesPanel extends Panel { HeuristicsRightDtPanel classesPanel; RightTasksDtPanel tasksPanel; LettersOneLineRightDtPanel chartPanel; public RightTasksClassesPanel(LoggingVkusnjashki logPanel,DtPathPanel pathPanel,ParallelDtPanel quadePanel,AzRegistryDt registry) { super(); setLayout(new BorderLayout()); setBackground(Color.gray); add("Center",tasksPanel=new RightTasksDtPanel(logPanel,pathPanel)); add("West",classesPanel=new HeuristicsRightDtPanel(logPanel,pathPanel)); add("East",chartPanel=new LettersOneLineRightDtPanel(quadePanel,registry));} public void clearRecount() { chartPanel.clearRecount();} public void enableDeleteAllBtn(boolean enable) { tasksPanel.getCtrlPanel().getBtnPanel().getBtDeleteAll().enable(enable);} public void enableSaveAllBtn(boolean enable) { tasksPanel.getCtrlPanel().getBtnPanel().getBtSaveAll().enable(enable);} public Button getDeleteAllBtn() { return tasksPanel.getCtrlPanel().getBtnPanel().getBtDeleteAll();} public Button getSaveAllBtn() { return tasksPanel.getCtrlPanel().getBtnPanel().getBtSaveAll();} public void enableSaveBtn(boolean enable) { tasksPanel.getCtrlPanel().getBtnPanel().getBtTaskSave().enable(enable);} public Button getSaveBtn() { return tasksPanel.getCtrlPanel().getBtnPanel().getBtTaskSave();} public Button getSortBtn() { return classesPanel.getBtnPanel().getBtSort();} public Button getExportBtn() { return classesPanel.getBtnPanel().getBtExport();} public Button getDoublesBtn() { return classesPanel.getBtnPanel().getBtDoubles();} public Button getClearBtn() { return classesPanel.getBtnPanel().getBtClear();} public HeuristicsRightDtPanel getClassesPanel() { return classesPanel;} public RightTasksDtPanel getTasksPanel() { return tasksPanel;} public void clearItems() { tasksPanel.clearTasks(); classesPanel.clearTasks();} public void dropBtnSkipPosition() { tasksPanel.getCtrlPanel().getBtnPanel().dropBtnSkipPosition(); classesPanel.getBtnPanel().dropBtnSkipPosition();} public void updateOnUiThread() { getClassesPanel().updateOnUiThread(); getTasksPanel().updateOnUiThread(); chartPanel.refreshUpdatable();} public void enableCtrls(boolean enable) { tasksPanel.enableCtrls(enable); classesPanel.enableCtrls(enable);}} class DtIgnorePanel extends IgnorePanel { public DtIgnorePanel(String ignoreList,boolean cancel) { super(); setIgnoreList(ignoreList); setCancelIgnore(cancel);} protected void initIgnoreList() { onCancelIgnore();}} class TrioAmountIgnoreListPanel extends Panel { DtAmountIgnoreListSubscriberPanel aiListPanelSubscriber; DtAmountIgnoreListReenockPanel aiListPanelReenock; DtAmountIgnoreListHeuristicsPanel aiListPanelHeuristics; public TrioAmountIgnoreListPanel(DtLogPanel logPanel,DtPathPanel pathPanel,ParallelDtPanel quadePanel) { super(); setBackground(HungerProps.borderTrioListColor); setLayout(new GridLayout(1+1+1,1+1-1,getBorderSpace()+1,getBorderSpace())); add(aiListPanelSubscriber=new DtAmountIgnoreListSubscriberPanel(logPanel,pathPanel,quadePanel)); add(aiListPanelReenock=new DtAmountIgnoreListReenockPanel(logPanel,pathPanel,quadePanel)); add(aiListPanelHeuristics=new DtAmountIgnoreListHeuristicsPanel(logPanel,pathPanel,quadePanel));} public DtAmountIgnoreListSubscriberPanel getAiListPanelSubscriber() { return aiListPanelSubscriber;} public DtAmountIgnoreListReenockPanel getAiListPanelReenock() { return aiListPanelReenock;} public DtAmountIgnoreListHeuristicsPanel getAiListPanelHeuristics() { return aiListPanelHeuristics;} public int getBorderSpace() { return 1+1;}} class DtAmountIgnoreListSubscriberPanel extends DtAmountIgnoreListPanel { public DtAmountIgnoreListSubscriberPanel(DtLogPanel logPanel,DtPathPanel pathPanel,ParallelDtPanel quadePanel) { super(logPanel,pathPanel,quadePanel);} protected DtIgnorePanel createLocalIgnorePanel() { String ignoreListOneLine="mydev."+"aaa;"+"\n"+"mydev."+"vutils;"+"\n"+"galle"+"ry.java"+"\n"+"p_ticca"+"3d.java"+"\n"+"mydev."+"classes;"+"\n"+"mydev."+"extension;"+"\n"+"mydev."+"oneway;"+"\n"+"mydev."+"oline;"+"\n"+"mydev."+"t3;"+"\n"+"mydev."+"zetup;"+"\n"+"mydev."+"rs;"+"\n"+"mydev."+"xera;"+"\n"+"mydev."+"cndata;"; DtIgnorePanel ignorePanel=new DtIgnorePanel(ignoreListOneLine,1+1 > 1+1); return ignorePanel;}} class DtAmountIgnoreListReenockPanel extends DtAmountIgnoreListPanel { public DtAmountIgnoreListReenockPanel(DtLogPanel logPanel,DtPathPanel pathPanel,ParallelDtPanel quadePanel) { super(logPanel,pathPanel,quadePanel);} protected DtIgnorePanel createLocalIgnorePanel() { String uixIgnore="mydev."+"uix;"; String aboutIgnore="mydev."+"about;"+"\n"+"mydev."+"cndata;"; String ignoreListOneLine="p_ticca"+"3d.java"+"\n"+"mydev."+"gforce;"+"\n"+"mydev."+"t3;"+"\n"+uixIgnore+"\n"+aboutIgnore; DtIgnorePanel ignorePanel=new DtIgnorePanel(ignoreListOneLine,1+1 > 1+1); for(int i=0; i < 1+1; i++) ignorePanel.changeState(); return ignorePanel;}} class DtAmountIgnoreListHeuristicsPanel extends DtAmountIgnoreListPanel { public DtAmountIgnoreListHeuristicsPanel(DtLogPanel logPanel,DtPathPanel pathPanel,ParallelDtPanel quadePanel) { super(logPanel,pathPanel,quadePanel);} protected DtIgnorePanel createLocalIgnorePanel() { String pkgIgnore="mydev."+"aaa;"+"\n"+"mydev."+"vutils;"+"\n"; String ignoreListOneLine=pkgIgnore+"p_ticca"+"3d.java"+"\n"+"galle"+"ry.java"+"\n"+"gamepa"+"ck.java"+"\n"+"mydev."+"cndata;"; DtIgnorePanel ignorePanel=new DtIgnorePanel(ignoreListOneLine,1+1 > 1+1); for(int i=0; i < 1+1; i++) ignorePanel.changeState(); return ignorePanel;}} abstract class DtAmountIgnoreListPanel extends CommonDataArrayPanel { DtIgnorePanel ignorePanel; ListPanel listPanel; DtLogPanel logPanel; DtPathPanel pathPanel; ParallelDtPanel quadePanel; private Queue leftItemsQueue=new Queue(); private boolean leftItemsQueueIns; private String[] leftItemsQueueArr=new String[1-1]; protected DtAmountIgnoreListPanel(DtLogPanel logPanel,DtPathPanel pathPanel,ParallelDtPanel quadePanel) { super(); this.logPanel=logPanel; this.pathPanel=pathPanel; this.quadePanel=quadePanel;} protected Panel obtainControlsPanel() { return null;} protected SizePanel obtainSizePanel() { return null;} public DtIgnorePanel getIgnorePanel() { return ignorePanel;} protected ListPanel obtainListPanel() { this.listPanel=new ListPanel(new StatDtPanel(),new HungerPagesPanel()); return listPanel;} protected IgnorePanel obtainIgnorePanel() { ignorePanel=createLocalIgnorePanel(); return ignorePanel;} protected abstract DtIgnorePanel createLocalIgnorePanel(); public Color getPanelBgColor() { return HungerProps.bgSizePanelColor;} protected Color getWrapPanelColor() { return HungerProps.bgStatPanelColor;} public void clearStats() { listPanel.getAmountPanel().clearPanel();} public String getSelectedPath(int idxSel) { if(leftItemsQueueIns) leftItemsQueueArr=makeCopyCash(); String path=leftItemsQueueArr[idxSel]; return path;} public String getSelectedPath() { int idxSel=getSelectedIdx(); String path=getSelectedPath(idxSel); return path;} public String getSelectedName2(int idxSel) { String fullPath=getSelectedPath(idxSel); return new Ester(fullPath).sub(1+(new Ester(fullPath).indexX('/') > new Ester(fullPath).indexX('\\') ? new Ester(fullPath).indexX('/') : new Ester(fullPath).indexX('\\'))).toString();} public void addItem(String item,String fullPath) { listPanel.addItem(item); leftItemsQueue.enqueueQueueRecord(fullPath); leftItemsQueueIns=true;} public void clearItems() { listPanel.clearItems(); leftItemsQueue.clearQueue(); leftItemsQueueIns=false; leftItemsQueueArr=makeCopyCash();} private String[] makeCopyCash() { leftItemsQueueIns=false; Object[] queueRecordsArray=leftItemsQueue.getQueueRecordsArray(); String[] result=new String[queueRecordsArray.length]; for(int i=0; i < result.length; i++) result[i]=(String) queueRecordsArray[i]; return result;} public String getSelectedName(int idxSel) { if(idxSel >-1) return getItem(idxSel); return getItemSelected();} protected SourceDtProcessor leftSelectedSubscriber(int idxSel) { String curSel=getSelectedName(idxSel); String path=getSelectedPath(idxSel); logPanel.addLog("Selected item "+curSel+" from "+path); SourceDtProcessor sp=(SourceDtPanel) quadePanel.assignSource(curSel,path,idxSel); setPosition(""+(idxSel+1)); return sp;} protected MainClsDtProcessor leftSelectedReenock(int idxSel) { String curSel=getSelectedName2(idxSel); String relPath=getItem(idxSel); String path=getSelectedPath(idxSel); String looking=pathPanel.getPath(); MainClsDtProcessor sp=(MainClsSearchDtPanel) quadePanel.assignSourceMain(curSel,path,looking,relPath,idxSel); setPosition(""+(idxSel+1)); return sp;} protected PkgClsDtProcessor leftSelectedHeuristics(int idxSel) { String curSel=getSelectedName(idxSel); String relPath=getItem(idxSel); String path=getSelectedPath(idxSel); String looking=pathPanel.getPath(); PkgClsDtProcessor sp=(PkgClsExtractDtPanel) quadePanel.assignSourcePkg(curSel,path,looking,relPath,idxSel); setPosition(""+(idxSel+1)); return sp;}} class LeftSizeSaveDtPanel extends Panel { TroubleRowBtnPanel troublePanel; AveragePanel avgPanel; public LeftSizeSaveDtPanel() { super(); setBackground(HungerProps.bgSizePanelColor); setLayout(new BorderLayout()); add("North",createPanelColorfullWrap(troublePanel=new TroubleRowBtnPanel(),HungerProps.bgSizePanelColor,true,false,true,false)); add("Center",createPanelColorfullWrap(avgPanel=SidePanelFactory.createUsualAveragePanel(),HungerProps.bgSizePanelColor,true,true,true,true));} protected Panel createPanelColorfullWrap(Component comp,Color wrapColor,boolean left,boolean top,boolean right,boolean bottom) { LabeledPanel ignorePanelWrap=new LabeledPanel("",comp,LabeledPanel.DEF_WRAP_SIZE,wrapColor,wrapColor,wrapColor,left,top,right,bottom); return ignorePanelWrap;} public boolean isBinPressed() { return troublePanel.getConfPanel().isBinPressed();} public boolean isCheckPressed() { return troublePanel.getConfPanel().isCheckPressed();} public boolean isConfigPressed() { return troublePanel.getConfPanel().isConfigPressed();} public void enableReviewBtn(boolean enable) { troublePanel.getReviewPanel().getBtReview().enable(enable);} public void updateMinMaxAvg(AverageRec mar) { avgPanel.updateMinMaxAvg(mar);} public TroubleRowBtnPanel getTroublePanel() { return troublePanel;} public AveragePanel getAvgPanel() { return avgPanel;}} class TroubleRowBtnPanel extends Panel { LeftDtSavePanel savePanel; LeftDtConfLunchPanel confPanel; HeuristicsAutoDtScanPanel reviewPanel; public TroubleRowBtnPanel() { super(); GeoLayoutBuilder.create().bgColor(Color.white).appendNorth(savePanel=new LeftDtSavePanel()).appendCenter(confPanel=new LeftDtConfLunchPanel()).appendSouth(reviewPanel=new HeuristicsAutoDtScanPanel()).build(this);} public LeftDtSavePanel getSavePanel() { return savePanel;} public LeftDtConfLunchPanel getConfPanel() { return confPanel;} public HeuristicsAutoDtScanPanel getReviewPanel() { return reviewPanel;} public void enableBinBtn(boolean enable) { confPanel.getBtBin().enable(enable);} public void enableCheckBtn(boolean enable) { confPanel.getBtCheck().enable(enable);} public void enableConfigBtn(boolean enable) { confPanel.getBtConfig().enable(enable);} public void dropBtnSkipPosition() { savePanel.dropBtnSkipPosition(); confPanel.dropBtnSkipPosition(); reviewPanel.dropBtnSkipPosition();}} class HeuristicsAutoDtScanPanel extends ControlsPanel { final static String BT_REVIEW="btReview"; public HeuristicsAutoDtScanPanel() { super(); enableReview(true);} public Button getBtReview() { return(Button) getCtrl(BT_REVIEW);} public Button getBtAuto() { return getAutoBtn().getBtAuto();} public Color getPanelBgColor() { return HungerProps.bgCtrlPanelColor;} protected void buildPanel() { append(BT_REVIEW,new Button("Review")); append("tinaAutoFrame",new DtAuto());} public void enableCtrls(boolean enable) {((Button) getCtrl(BT_REVIEW)).enable(enable); getAutoBtn().enableCtrl(enable);} public void enableAuto(boolean enable) { getAutoBtn().enableCtrl(enable);} public void enableReview(boolean enable) {((Button) getCtrl(BT_REVIEW)).enable(enable);}} class LeftDtSavePanel extends ControlsPanel { final static String BT_SAVE="btSave"; final static String BT_ONELINE="btOneLine"; public LeftDtSavePanel() { super();} public LayoutManager getPanelLayout() { return new FlowLayout(FlowLayout.CENTER,5-1-1,1);} public Button getBtSave() { return(Button) getCtrl(BT_SAVE);} public Button getBtOneLine() { return(Button) getCtrl(BT_ONELINE);} public Color getPanelBgColor() { return HungerProps.bgCtrlPanelColor;} protected void buildPanel() { append(BT_ONELINE,new Button("OneLine")); append(BT_SAVE,new Button("Save"));} public void enableCtrls(boolean enable) {((Button) getCtrl(BT_ONELINE)).enable(enable);((Button) getCtrl(BT_SAVE)).enable(enable);}} class LeftDtConfLunchPanel extends ControlsPanel { final static String BT_CHECK="btCheck"; final static String BT_CONFIG="btConfig"; final static String BT_BIN="btBin"; final static String BT_LUNCH="btLunch"; private boolean btCheckPressed; private boolean btConfigPressed; private boolean btBinPressed; public LeftDtConfLunchPanel() { super();} public LayoutManager getPanelLayout() { return new FlowLayout(FlowLayout.CENTER,5-1-1,1);} public Color getPanelBgColor() { return HungerProps.bgCtrlPanelColor;} protected void buildPanel() { append(BT_CHECK,new Button("Check")); append(BT_CONFIG,new Button("Config")); append(BT_BIN,new Button("Bin")); append(BT_LUNCH,new Button("Lunch"));} public void enableCtrls(boolean enable) {((Button) getCtrl(BT_CHECK)).enable(enable);((Button) getCtrl(BT_CONFIG)).enable(enable);((Button) getCtrl(BT_BIN)).enable(enable);((Button) getCtrl(BT_LUNCH)).enable(enable);} public void enableConfig(boolean enable) {((Button) getCtrl(BT_CONFIG)).enable(enable);} public void enableCheck(boolean enable) {((Button) getCtrl(BT_CHECK)).enable(enable);} public void enableBin(boolean enable) {((Button) getCtrl(BT_BIN)).enable(enable);} public void enableLunch(boolean enable) {((Button) getCtrl(BT_LUNCH)).enable(enable);} public Button getBtConfig() { return(Button) getCtrl(BT_CONFIG);} public Button getBtCheck() { return(Button) getCtrl(BT_CHECK);} public Button getBtLunch() { return(Button) getCtrl(BT_LUNCH);} public Button getBtBin() { return(Button) getCtrl(BT_BIN);} public boolean isBinPressed() { return btBinPressed;} public boolean isConfigPressed() { return btConfigPressed;} public boolean isCheckPressed() { return btCheckPressed;} public void regBinPress() { enableBin(!true); btBinPressed=true;} public void regConfigPress() { enableConfig(!true); btConfigPressed=true;} public void regCheckPress() { enableCheck(!true); btCheckPressed=true;} public void dropBtnSkipPosition() { super.dropBtnSkipPosition(); btConfigPressed=false; btCheckPressed=false; btBinPressed=false;}} class DtAuto extends YellowAutoButton { public DtAuto() { super();}} class StatDtPanel extends AmountPanel { public StatDtPanel() { super("*.java","file(s)");} protected int getPosWidth() { return super.getPosWidth()-1-1-1;} protected int getAmountWidth() { return super.getAmountWidth()-1-1-1;} public Color getPanelBgColor() { return HungerProps.bgAmountPanelColor;}} class MultyCompleteCounter { private int expectCompletions; private boolean opSingle; private int current; public MultyCompleteCounter(int expectCompletions,boolean opSingle) { super(); this.current=1-1; this.expectCompletions=expectCompletions; this.opSingle=opSingle;} public boolean incrCompleteChechIfReady() { return++current==expectCompletions;} public boolean isOpSingle() { return opSingle;}} class ScanMultySrcDtLeftTask extends AbstractFilterableDtTask { private ExpectHere expectHere; public ScanMultySrcDtLeftTask(DtLogPanel logPanel,ExpectHere eh,DtPathPanel pathPanel,DtAmountIgnoreListPanel amountListPanel,SourceLeftDtPanel leftPanel,MultyCompleteCounter mcc,Queue reqProc) { super(pathPanel,logPanel,amountListPanel,leftPanel,mcc,reqProc); this.path=pathPanel.getPath(); this.expectHere=eh;} protected void performTask() { Time t=new Time(); t.start(); updateStat(); scanItems(path,".java"); t.trust(); logPanel.addLogComplete("Source scan complete "+t.ess()); if(mcc.incrCompleteChechIfReady()) { if(mcc.isOpSingle()) pathPanel.disableStop(); leftPanel.enableAutoBtn(true==mcc.isOpSingle());} if(expectHere !=null) expectHere.markAsReached();} protected void scanItems(String path,String ext) { Ester[] start=new Files().tree(new Ester(path)); Ester[] select=new Filter().endsWithIncensitive(start,new Ester(ext)); Ester[] damage=new Join().join(new Filter().endsWithIncensitive(start,new Ester("mydev\\webobj\\parser.java")),new Filter().endsWithIncensitive(start,new Ester("mydev/webobj/parser.java"))); select=new Join().sub(select,damage); select=reToss(select); Ester[] selectNames=new Filter().cutStart(select,new Ester(path)); for(int i=0; i < select.length && pathPanel.hasLongTermContin(); i++) { if(amountIgnoredListPanel.getIgnorePanel().hasIgnoreCoincidence(select[i].toString())) continue; amountIgnoredListPanel.addItem(selectNames[i].toString(),select[i].toString()); amount.inc(1); updateStat(); recountComplete(i+1,select.length);}}} class ScanPackageItemsDtLeftTask extends AbstractFilterableDtTask { private ExpectHere expectHere; public ScanPackageItemsDtLeftTask(DtLogPanel logPanel,ExpectHere eh,DtPathPanel pathPanel,DtAmountIgnoreListPanel amountListPanel,SourceLeftDtPanel leftPanel,MultyCompleteCounter mcc,Queue reqProc) { super(pathPanel,logPanel,amountListPanel,leftPanel,mcc,reqProc); this.path=pathPanel.getPath(); this.expectHere=eh;} protected void performTask() { Time t=new Time(); t.start(); updateStat(); scanItems(path,".java"); t.trust(); logPanel.addLogComplete("Source scan complete "+t.ess()); if(mcc.incrCompleteChechIfReady()) { if(mcc.isOpSingle()) pathPanel.disableStop(); leftPanel.enableAutoBtn(true==mcc.isOpSingle());} if(expectHere !=null) expectHere.markAsReached();} protected void scanItems(String path,String ext) { System.out.println("world1 "+path); Ester[] start=new Files().tree(new Ester(path)); Ester[] select=new Filter().endsWithIncensitive(start,new Ester(ext)); Ester[] damage=new Join().join(new Filter().endsWithIncensitive(start,new Ester("\\mydev\\classes\\classes.java")),new Filter().endsWithIncensitive(start,new Ester("/mydev/classes/classes.java"))); damage=new Join().join(damage,new Join().join(new Filter().endsWithIncensitive(start,new Ester("mydev\\datel\\checker.java")),new Filter().endsWithIncensitive(start,new Ester("mydev/datel/checker.java")))); damage=new Join().join(damage,new Join().join(new Filter().endsWithIncensitive(start,new Ester("\\mydev\\webobj\\parsertest.java")),new Filter().endsWithIncensitive(start,new Ester("/mydev/webobj/parsertest.java")))); damage=new Join().join(damage,new Join().join(new Filter().endsWithIncensitive(start,new Ester("mydev\\webobj\\parser.java")),new Filter().endsWithIncensitive(start,new Ester("mydev/webobj/parser.java")))); select=new Join().sub(select,damage); select=reToss(select); Ester[] selectNames=new Filter().cutStart(select,new Ester(path)); for(int i=0; i < select.length && pathPanel.hasLongTermContin(); i++) { if(amountIgnoredListPanel.getIgnorePanel().hasIgnoreCoincidence(select[i].toString())) continue; amountIgnoredListPanel.addItem(selectNames[i].toString(),select[i].toString()); amount.inc(1); updateStat(); recountComplete(i+1,select.length); logPanel.refreshUpdatable();}}} class ScanTinaSourceDtLeftTask extends AbstractFilterableDtTask { private ExpectHere expectHere; public ScanTinaSourceDtLeftTask(DtLogPanel logPanel,ExpectHere eh,DtPathPanel pathPanel,DtAmountIgnoreListPanel amountListPanel,SourceLeftDtPanel leftPanel,MultyCompleteCounter mcc,Queue reqProc) { super(pathPanel,logPanel,amountListPanel,leftPanel,mcc,reqProc); this.path=pathPanel.getPath(); this.expectHere=eh;} protected void performTask() { Time t=new Time(); t.start(); updateStat(); scanItems(path,".java"); t.trust(); logPanel.addLogComplete("Source scan complete "+t.ess()); if(mcc.incrCompleteChechIfReady()) { if(mcc.isOpSingle()) pathPanel.disableStop(); leftPanel.enableAutoBtn(true==mcc.isOpSingle());} if(expectHere !=null) expectHere.markAsReached();} protected void scanItems(String path,String ext) { System.out.println("world1 "+path); Ester[] start=new Files().tree(new Ester(path)); Ester[] select=new Filter().endsWithIncensitive(start,new Ester(ext)); Ester[] damage=new Join().join(new Filter().endsWithIncensitive(start,new Ester("\\mydev\\classes\\classes.java")),new Filter().endsWithIncensitive(start,new Ester("/mydev/classes/classes.java"))); damage=new Join().join(damage,new Join().join(new Filter().endsWithIncensitive(start,new Ester("mydev\\datel\\checker.java")),new Filter().endsWithIncensitive(start,new Ester("mydev/datel/checker.java")))); damage=new Join().join(damage,new Join().join(new Filter().endsWithIncensitive(start,new Ester("\\mydev\\webobj\\parsertest.java")),new Filter().endsWithIncensitive(start,new Ester("/mydev/webobj/parsertest.java")))); damage=new Join().join(damage,new Join().join(new Filter().endsWithIncensitive(start,new Ester("mydev\\webobj\\parser.java")),new Filter().endsWithIncensitive(start,new Ester("mydev/webobj/parser.java")))); select=new Join().sub(select,damage); Ester[] selectNames=new Filter().cutStart(select,new Ester(path)); for(int i=0; i < select.length && pathPanel.hasLongTermContin(); i++) { if(amountIgnoredListPanel.getIgnorePanel().hasIgnoreCoincidence(select[i].toString())) continue; amountIgnoredListPanel.addItem(selectNames[i].toString(),select[i].toString()); amount.inc(1); updateStat(); recountComplete(i+1,select.length);}}} class CommandDtOneLine extends AbstractCommand { public final static int ID_READY=1; public final static int ID_INIT=1+1; public final static int ID_READ_SOURCE=1+1+1; public final static int ID_ONELINE=1+1+1+1; public final static int ID_SAVE_SOURCE=1+1+1+1+1; public CommandDtOneLine(int id) { super(id);} public static CommandDtOneLine create(int cmdId) { CommandDtOneLine cmd=null; switch(cmdId) { case ID_READY : case ID_INIT : cmd=new CommandDtOneLine(cmdId); break;} return cmd;} public int getId() { return id;} public boolean isComplete() { return complete;}} class ReadCommandDtOneLine extends CommandDtOneLine { private String name; private String path; public ReadCommandDtOneLine(String name,String path) { super(ID_READ_SOURCE); this.name=name; this.path=path;} public String getName() { return name;} public String getPath() { return path;}} class ProcessCommandDtOneLine extends CommandDtOneLine { private boolean needSave; private ReadyFree readyFree; public ProcessCommandDtOneLine(boolean needSave,ReadyFree readyFree) { super(ID_ONELINE); this.needSave=needSave; this.readyFree=readyFree;} public ReadyFree getReadyFree() { return readyFree;} public boolean isNeedSave() { return needSave;}} class SaveCommandDtOneLine extends CommandDtOneLine { private ReadyFree readyFree; public SaveCommandDtOneLine(ReadyFree readyFree) { super(ID_SAVE_SOURCE); this.readyFree=readyFree;} public ReadyFree getReadyFree() { return readyFree;}} interface SourceDtProcessor extends CommonProc { void readSource(String name,String path,String start,String relPath,int idxSel); void saveSourceLine();} class CommandDtSubscriberQueue extends AbstractDtCommandQueue { public CommandDtSubscriberQueue() { super();} public void push(CommandDtOneLine cmd) { itemsQueue.enqueueQueueRecord(cmd);} public CommandDtOneLine nextCurrent() { CommandDtOneLine cmd=(CommandDtOneLine) itemsQueue.dequeueQueueRecord(); return cmd;} public void dump() { new Data().dump(itemsQueue.getQueueRecordsArray());}} class WhiteDtLabel extends Label { public WhiteDtLabel(String name) { super(name); setBackground(Color.white);}} class SourceCode { private String source; byte[] data; public SourceCode() { super(); source=""; data=new byte[0];} public SourceCode(String source,byte[] data) { super(); this.source=source; this.data=data;} public String getSource() { return source;} public byte[] getData() { return data;} public String getContent() { return source;} public int getDataLength() { return data.length;}} class LimDtStats extends Panel { LabeledEditPair leRound; LabeledEditPair leFigu; LabeledEditPair leSq; LabeledEditPair leOpNum; private SourceCode source; private AzRegistryDt registry; LabeledEditPair leSpace; LabeledEditPair leTab; LabeledEditPair leBack; LabeledEditPair leNext; public LimDtStats(AzRegistryDt registry) { super(); setBackground(HungerProps.bgLimStatPanelColor); this.registry=registry; setLayout(new GridLayout(2,4,1,1)); int editWidth=2+1-1+1; add(leNext=cookingLabel(new LabeledEditPair(""+'\\'+"n","",false,editWidth,true))); add(leSpace=cookingLabel(new LabeledEditPair("'  '","",false,editWidth,true))); add(leTab=cookingLabel(new LabeledEditPair(""+'\\'+"t","",false,editWidth,true))); add(leBack=cookingLabel(new LabeledEditPair(""+'\\'+"r","",false,editWidth,true))); add(leRound=cookingLabel(new LabeledEditPair("( )","",false,editWidth,true))); add(leFigu=cookingLabel(new LabeledEditPair("{ }","",false,editWidth,true))); add(leSq=cookingLabel(new LabeledEditPair("[ ]","",false,editWidth,true))); add(leOpNum=cookingLabel(new LabeledEditPair(" ; ","",false,editWidth,true)));} protected LabeledEditPair cookingLabel(LabeledEditPair labeledEditPair) { labeledEditPair.setPanelBgColor(HungerProps.bgLimStatPanelColor); labeledEditPair.getLbName().setForeground(Color.white); return labeledEditPair;} public LabeledEditPair getLeRound() { return leRound;} public LabeledEditPair getLeFigu() { return leFigu;} public LabeledEditPair getLeSq() { return leSq;} public LabeledEditPair getLeOpNum() { return leOpNum;} public void setSource(SourceCode source,boolean needProcessing) { this.source=source; if(needProcessing) processData();} private void processData() { int iRound=0; int iFigu=0; int iSq=0; int iOpNum=0; int iSpace=0; int iTab=0; int iBack=0; int iNext=0; if(source==null) source=new SourceCode(); for(int i=0; i < source.getDataLength(); i++) { char ch=(char) source.data[i]; switch(ch) { case '(' : case ')' : iRound+=1; break; case '{' : case '}' : iFigu+=1; break; case '[' : case ']' : iSq+=1; break; case ';' : iOpNum+=1; break; case ' ' : iSpace+=1; break; case '\t' : iTab+=1; break; case '\r' : iBack+=1; break; case '\n' : iNext+=1; break; case 'A' : case 'a' : case 'B' : case 'b' : case 'C' : case 'c' : case 'D' : case 'd' : case 'E' : case 'e' : case 'F' : case 'f' : case 'G' : case 'g' : case 'H' : case 'h' : case 'I' : case 'i' : case 'J' : case 'j' : case 'K' : case 'k' : case 'L' : case 'l' : case 'M' : case 'm' : case 'N' : case 'n' : case 'O' : case 'o' : case 'P' : case 'p' : case 'Q' : case 'q' : case 'R' : case 'r' : case 'S' : case 's' : case 'T' : case 't' : case 'U' : case 'u' : case 'V' : case 'v' : case 'W' : case 'w' : case 'X' : case 'x' : case 'Y' : case 'y' : case 'Z' : case 'z' : registry.incrLetter(ch,1); break;}} leRound.setText(iRound > 0 ? ""+iRound : ""); leFigu.setText(iFigu > 0 ? ""+iFigu : ""); leSq.setText(iSq > 0 ? ""+iSq : ""); leOpNum.setText(iOpNum > 0 ? ""+iOpNum : ""); leSpace.setText(iSpace > 0 ? ""+iSpace : ""); leTab.setText(iTab > 0 ? ""+iTab : ""); leBack.setText(iBack > 0 ? ""+iBack : ""); leNext.setText(iNext > 0 ? ""+iNext : "");}} interface InternalAdditor { Component addComponent(Component comp);} class ParallelDtPanel extends AbstractParallelPanel implements InternalAdditor { static ParallelPanelAg paralPanelsAg; ParallelDtPanelSubscriber parallelPanel; ParallelDtPanelReenock parallelPanelMain; ParallelDtPanelHeuristics parallelPanelPkg; private MegaAverageRec treeoAr=new MegaAverageRec(); public ParallelDtPanel(int rows,int cols) { super(1-1+1,1-1); setLayout(new GridLayout(3,1)); paralPanelsAg.setInternalAdditor(this); this.parallelPanel=ParallelDtPanelSubscriber.create3(1,cols,paralPanelsAg); this.parallelPanelMain=ParallelDtPanelReenock.create4(1,cols,paralPanelsAg); this.parallelPanelPkg=ParallelDtPanelHeuristics.create5(1,cols,paralPanelsAg); treeoAr.addItem(parallelPanel.getAverageRec()); treeoAr.addItem(parallelPanelMain.getAverageRec()); treeoAr.addItem(parallelPanelPkg.getAverageRec()); remove(0); add(parallelPanel); add(parallelPanelMain); add(parallelPanelPkg);} public void initSource() {} public Color getBgColor() { return HungerProps.splitParallelPanelColor;} public AverageRec getAverageRec() { return treeoAr;} public void clearPanels() { parallelPanel.clearPanels(); parallelPanelMain.clearPanels(); parallelPanelPkg.clearPanels();} public AbstractApproach getFirst() { return parallelPanel.getFirst();} public AbstractApproach getFirstMain() { return parallelPanelMain.getFirst();} public AbstractApproach getFirstPkg() { return parallelPanelPkg.getFirst();} public boolean hasInProgress() { return parallelPanel.hasInProgress();} public boolean hasInProgressMain() { return parallelPanelMain.hasInProgress();} public boolean hasInProgressPkg() { return parallelPanelPkg.hasInProgress();} public boolean hasAvailable() { return parallelPanel.hasAvailable();} public boolean hasAvailableMain() { return parallelPanelMain.hasAvailable();} public boolean hasAvailablePkg() { return parallelPanelPkg.hasAvailable();} public AbstractApproach assignSource(String name,String path,int idxSel) { return parallelPanel.assignSource(name,path,"","",idxSel);} public AbstractApproach assignSourceMain(String curSel,String path,String looking,String relPath,int idxSel) { return parallelPanelMain.assignSource(curSel,path,looking,relPath,idxSel);} public AbstractApproach assignSourcePkg(String curSel,String path,String looking,String relPath,int idxSel) { return parallelPanelPkg.assignSource(curSel,path,looking,relPath,idxSel);} public Component addComponent(Component comp1) { add(comp1); return comp1;} protected AbstractApproachProvider obtainProvider() { return new ParallelDtApproachProvider();} public static void setLeftPanel(SourceLeftDtPanel leftPanel) { paralPanelsAg.setLeftPanel(leftPanel);} public static ParallelDtPanel create2(boolean single,ParallelPanelAg panelAg) { if(panelAg !=null) paralPanelsAg=panelAg; return single ? new ParallelDtPanel(1,1+1+1) : new ParallelDtPanel(1+1+1,1+1+1);}} class SingleButton extends ToogleMultyButton { public SingleButton() { super(); changeState();} public Button getSingleBtn() { return getMultyBtn();} public boolean getSingle() { return getState();} protected String getMultyName() { return "Single";} protected int getMultyNumber() { return 1+1+1;}} class PkgClsDtFind { private Stack clsList=new Stack(); private String name; private boolean cls; private boolean interf; private String pkg; public String getName() { return name;} public void markInterf() { this.interf=true;} public void clearClsList() { this.clsList.clearStack();} public void setPkg(String pkg) { this.pkg=pkg;} public String getRecord() { return "public class "+name;} public boolean hasRecord() { return name !=null && name.length() > 0;} public void regName(Ester item) { this.name=item.toString(); clsList.push(new Data().replace(new Ester(pkg),new Ester("package "),new Ester("")).toString()+"."+name);} public String[] getClsList() { Object[] stackRecordsArray=clsList.getStackRecordsArray(); String[] all=new String[(int) stackRecordsArray.length]; for(int i=0; i < all.length; i++) all[i]=(String) stackRecordsArray[i]; return all;} public boolean isCls() { return cls;} public boolean isInterf() { return interf;} public void clear() { this.cls=false; this.interf=false;} public void markCls() { this.cls=true;}} class PkgClsDtPanel extends Panel { TextField tfPackage; private String source; private String fPath; TextField tfPubCls; String pubClsName; PkgClsDtFind find=new PkgClsDtFind(); private OneWayProxyCheck check; public PkgClsDtPanel(OneWayProxyCheck check) { super(); setLayout(new BorderLayout()); setBackground(Color.darkGray); this.check=check; add("North",tfPubCls=new TextField(5+5+5+5+5)); add("Center",tfPackage=new TextField(5+5+5+5+5)); tfPackage.setEditable(false); tfPubCls.setEditable(false);} public TextField getTfPackage() { return tfPackage;} public String getSource() { return source;} public String getfPath() { return fPath;} public TextField getTfPubCls() { return tfPubCls;} public String getPubClsName() { return pubClsName;} public String getPubCls() { return tfPubCls.getText();} public void setSource(String source,String fPath) { this.source=source; this.fPath=fPath; find.clearClsList(); processData();} public void processData() { if(source==null) source=""; String[] pieces=null; try { pieces=check.getParts(fPath);} catch(IOException e) { e.printStackTrace();} boolean pkgMode=false; Ester packageItem=new Ester(""); Ester ptrnCls=new Ester("class"); Ester ptrnInterf=new Ester("interface"); Ester ptrnPackage=new Ester("package"); Ester ptrnPackageEnd=new Ester(";"); boolean pkgReady=false; boolean prevItemDot=false; for(int i=0; pieces !=null && i < pieces.length; i++) { Ester item=new Ester(pieces[i]); if(item.eq(ptrnPackage)) { pkgMode=true; packageItem.append(item).append(' ');} else if(item.eq(ptrnPackageEnd) && pkgMode) { pkgMode=false; pkgReady=true;} else if(pkgMode) { packageItem.append(item); find.setPkg(packageItem.toString());} else { if(!prevItemDot && item.eq(ptrnCls)) find.markCls(); else if(item.eq(ptrnInterf)) find.markInterf(); else find.clear(); if(find.isCls() && i+1 < pieces.length) { find.regName(new Ester(pieces[i+1])); find.clear();} else if(find.isInterf() && i+1 < pieces.length) { find.regName(new Ester(pieces[i+1])); find.clear();}} prevItemDot=item.eq(new Ester("."));} tfPackage.setText(packageItem.toString()); if(find.hasRecord()) { tfPubCls.setText(find.getRecord()); pubClsName=find.getName();}} public void clear() { tfPackage.setText(""); tfPubCls.setText("");} public void clearPanel() { tfPackage.setText(""); source=""; tfPubCls.setText(""); pubClsName="";} public void setPackage(String txt) { tfPackage.setText(txt);} public String[] findClassList() { return find.getClsList();}} class SourceHelpDtPanel extends Panel { List lsRelPath; TextField tfFullPath; PkgClsDtPanel zp; public SourceHelpDtPanel(OneWayProxyCheck check) { super(); setLayout(new BorderLayout()); setBackground(Color.darkGray); lsRelPath=new List(5-1,false); add("Center",lsRelPath=new List(5-1+(!lsRelPath.allowsMultipleSelections() ?-1 : 1-1),false)); lsRelPath.enable(!false); add("North",tfFullPath=new TextField()); tfFullPath.setEditable(false); add("West",zp=new PkgClsDtPanel(check));} public List getLsRelPath() { return lsRelPath;} public PkgClsDtPanel getZp() { return zp;} public void clearPanel() { zp.clearPanel(); lsRelPath.clear(); tfFullPath.setText("");} public TextField getTfFullPath() { return tfFullPath;} public String[] setSource(String src,String fPath) { zp.setSource(src,fPath); String[] clsList=zp.findClassList(); for(int i=0; i < clsList.length; i++) lsRelPath.addItem(clsList[i]); return clsList;} public void clearRelPath() { lsRelPath.clear();}} interface CommonProc { boolean isReadyFree(); void process(boolean needClear); void clearPanel();} interface PkgClsDtProcessor extends CommonProc { void readSource(String name,String path,String start,String relPath,int idxSel);} abstract class AbstractDtCommandQueue { protected Queue itemsQueue=new Queue(); protected AbstractDtCommandQueue() { super();} public boolean hasSomeWork() { return itemsQueue.isEmptyQueue()==false;} abstract void dump();} class CommandDtBriQueue extends AbstractDtCommandQueue { public CommandDtBriQueue() { super();} public void push(BriDtCommand cmd) { itemsQueue.enqueueQueueRecord(cmd);} public BriDtCommand nextCurrent() { BriDtCommand cmd=(BriDtCommand) itemsQueue.dequeueQueueRecord(); return cmd;} public void dump() { new Data().dump(itemsQueue.getQueueRecordsArray());}} class BriDtCommand extends AbstractCommand { public final static int ID_READY=1; public final static int ID_INIT=1+1; public final static int ID_READ_SOURCE=1+1+1; public final static int ID_ONELINE=1+1+1+1; public BriDtCommand(int id) { super(id);} public static BriDtCommand create(int cmdId) { BriDtCommand cmd=null; switch(cmdId) { case ID_READY : case ID_INIT : cmd=new BriDtCommand(cmdId); break;} return cmd;} public int getId() { return id;} public boolean isComplete() { return complete;}} class ReadBriDtCommand extends BriDtCommand { private String name; private String path; private String start; String relPath; public ReadBriDtCommand(String name,String path,String start,String relPath) { super(ID_READ_SOURCE); this.name=name; this.path=path; this.start=start; this.relPath=relPath;} public String getStart() { return start;} public String getName() { return name;} public String getPath() { return path;} public String getRelPath() { return relPath;} public String toString() { return "CommandRead [name="+name+", path="+path+", start="+start+", relPath="+relPath+"]";}} class ProcessBriDtCommand extends BriDtCommand { private boolean needClear; private ReadyFree readyFree; public ProcessBriDtCommand(ReadyFree readyFree,boolean needClear) { super(ID_ONELINE); this.readyFree=readyFree; this.needClear=needClear;} public ReadyFree getReadyFree() { return readyFree;} public boolean isNeedClear() { return needClear;}} class HeuristicsStatDtPanel extends AmountPanel { public HeuristicsStatDtPanel(String label,String second) { super(label,second);} protected int getPosWidth() { return super.getPosWidth()-1-1-1;} protected int getAmountWidth() { return super.getAmountWidth()-1-1-1;} public Color getPanelBgColor() { return HungerProps.bgAmountPanelColor;}} class ExportDoublesDtSortPanel extends ControlsPanel { final static String BT_DOUBLES="btDoubles"; final static String BT_SORT="btSort"; final static String BT_EXPORT="btExport"; final static String BT_CLEAR="btClear"; public ExportDoublesDtSortPanel() { super();} public Color getPanelBgColor() { return HungerProps.bgCtrlPanelColor;} public Button getBtDoubles() { return(Button) getCtrl(BT_DOUBLES);} public Button getBtSort() { return(Button) getCtrl(BT_SORT);} public void enableExportBtn(boolean enable) {((Button) getCtrl(BT_EXPORT)).enable(enable);} public void enableClearBtn(boolean enable) {((Button) getCtrl(BT_CLEAR)).enable(enable);} public void enableDoublesBtn(boolean enable) {((Button) getCtrl(BT_DOUBLES)).enable(enable);} public void enableSortBtn(boolean enable) {((Button) getCtrl(BT_SORT)).enable(enable);} public Button getBtExport() { return(Button) getCtrl(BT_EXPORT);} public Button getBtClear() { return(Button) getCtrl(BT_CLEAR);} protected void buildPanel() { append(BT_DOUBLES,new Button("Doubles")); append(BT_SORT,new Button("Sort")); append(BT_EXPORT,new Button("Export")); append(BT_CLEAR,new Button("Clear"));} public void enableCtrls(boolean enable) {((Button) getCtrl(BT_DOUBLES)).enable(enable);((Button) getCtrl(BT_SORT)).enable(enable);((Button) getCtrl(BT_EXPORT)).enable(enable);((Button) getCtrl(BT_CLEAR)).enable(enable);}} class HungerPagesPanel extends PagesPanel { public HungerPagesPanel() { super(HungerProps.listPanelPageSize);} public Color getPanelBgColor() { return HungerProps.bgPagesPanelColor;}} class HeuristicsRightDtPanel extends CommonDataArrayPanel { ListPanel listPanel; ExportDoublesDtSortPanel btnPanel; private Queue itemsQueue=new Queue(); private Stack itemsBackup; private String exportName=HungerProps.INPUT_AVG_LIST; DtPathPanel pathPanel; LoggingVkusnjashki logPanel; public HeuristicsRightDtPanel(LoggingVkusnjashki logPanel,DtPathPanel pathPanel) { super(); this.logPanel=logPanel; this.pathPanel=pathPanel;} public ExportDoublesDtSortPanel getBtnPanel() { return btnPanel;} protected Panel obtainControlsPanel() { this.btnPanel=new ExportDoublesDtSortPanel(); return btnPanel;} protected SizePanel obtainSizePanel() { return null;} protected ListPanel obtainListPanel() { this.listPanel=new ListPanel(new HeuristicsStatDtPanel("Class(es) and Interface(s)","")); return listPanel;} public Color getPanelBgColor() { return HungerProps.bgSizePanelColor;} protected Color getWrapPanelColor() { return HungerProps.bgStatPanelColor;} public void setLogPanel(LoggingVkusnjashki logPanel) { this.logPanel=logPanel;} public void enableExportBtn(boolean enable) { btnPanel.getBtExport().enable(enable);} public LoggingVkusnjashki getLogPanel() { return logPanel;} public DtPathPanel getPathPanel() { return pathPanel;} public void restoreList() { exportName=HungerProps.FULL_ORDERED_LIST; if(itemsBackup !=null && itemsBackup.sizeOfStack() > 0) { clearTasks(); Object[] stackRecordsArray=itemsBackup.getStackRecordsArray(); String[] clsItems=new String[(int) stackRecordsArray.length]; for(int i=0; i < clsItems.length; i++) clsItems[i]=(String) stackRecordsArray[i]; append(clsItems);}} public void backupList() { exportName=HungerProps.DOUBLES_ORDERED_LIST; itemsBackup=new Stack(itemsQueue.getQueueRecordsArray());} public String getExportName() { return exportName;} public String[] getClsList() { Object[] queueRecordsArray=itemsQueue.getQueueRecordsArray(); String[] clsItems=new String[(int) queueRecordsArray.length]; for(int i=0; i < clsItems.length; i++) clsItems[i]=(String) queueRecordsArray[i]; return clsItems;} public String getSelected() { int idx=listPanel.getSelectedIndex(); String selected=(String) itemsQueue.getQueueRecord(idx); return selected;} public void enableCtrls(boolean enable) { listPanel.listEnable(enable);} public void updateOnUiThread() { boolean itemsNumGt=listPanel.itemsNum() > 0; btnPanel.enableSortBtn(!pathPanel.hasLongTermContin() && itemsNumGt); btnPanel.enableDoublesBtn(!pathPanel.hasLongTermContin() && itemsNumGt); btnPanel.enableExportBtn(!pathPanel.hasLongTermContin() && itemsNumGt); btnPanel.enableClearBtn(!pathPanel.hasLongTermContin() && itemsNumGt);} public synchronized void clearTasks() { setPosition(""); setAmount(""); listPanel.clearItems(); itemsQueue.clearQueue(); getBtnPanel().dropBtnSkipPosition();} private synchronized void addItem(String pkgCls) { Object[] queueRecordsArray=itemsQueue.getQueueRecordsArray(); String contains=null; for(int i=0; contains==null && i < queueRecordsArray.length; i++) { String item=(String) queueRecordsArray[i]; if(item.equalsIgnoreCase(pkgCls)) contains=item;} if(contains==null) { listPanel.addItem(pkgCls); itemsQueue.enqueueQueueRecord(pkgCls); logPanel.addLog("Register item "+pkgCls);} setAmount(""+listPanel.itemsNum());} public void append(String[] clsList) { for(int i=0; i < clsList.length; i++) { if(clsList[i].indexOf(')') >-1) { System.out.println(""+new Data().dump(clsList)); int g=1;}} for(int i=0; i < clsList.length; i++) addItem(clsList[i]);}} class PanelsAgDt { DtLogPanel logPanel; RightTasksClassesPanel rightPanel; DtPathPanel pathPanel; ParallelDtPanel quadePanel; SourceLeftDtPanel leftPanel; public PanelsAgDt(DtLogPanel logPanel,RightTasksClassesPanel rightPanel,DtPathPanel pathPanel,ParallelDtPanel quadePanel,SourceLeftDtPanel leftPanel) { super(); this.logPanel=logPanel; this.rightPanel=rightPanel; this.pathPanel=pathPanel; this.quadePanel=quadePanel; this.leftPanel=leftPanel;} public DtLogPanel getLogPanel() { return logPanel;} public RightTasksClassesPanel getRightPanel() { return rightPanel;} public DtPathPanel getPathPanel() { return pathPanel;} public ParallelDtPanel getQuadePanel() { return quadePanel;} public SourceLeftDtPanel getLeftPanel() { return leftPanel;}} class StatTaskDtPanel extends AmountPanel { public StatTaskDtPanel(String label,String second) { super(label,second);} protected int getPosWidth() { return super.getPosWidth()-1-1-1;} protected int getAmountWidth() { return super.getAmountWidth()-1-1-1;} public Color getPanelBgColor() { return HungerProps.bgAmountPanelColor;}} class SaveDeleteAllDtPanel extends ControlsPanel { final static String BT_DEL_ALL="btDeleteAll"; final static String BT_SAVE_ALL="btSaveAll"; final static String BT_TASKSAVE="btTaskSave"; public SaveDeleteAllDtPanel() { super();} public Button getBtDeleteAll() { return(Button) getCtrl(BT_DEL_ALL);} public Button getBtSaveAll() { return(Button) getCtrl(BT_SAVE_ALL);} public Button getBtTaskSave() { return(Button) getCtrl(BT_TASKSAVE);} public void enableSaveAll(boolean enable) {((Button) getCtrl(BT_SAVE_ALL)).enable(enable);} public void enableDeleteAll(boolean enable) {((Button) getCtrl(BT_DEL_ALL)).enable(enable);} public Color getPanelBgColor() { return HungerProps.bgCtrlPanelColor;} protected void buildPanel() { append(BT_SAVE_ALL,new Button("Save All")); append(BT_TASKSAVE,new Button("Save")); append(BT_DEL_ALL,new Button("Delete All"));} public void enableCtrls(boolean enable) {((Button) getCtrl(BT_SAVE_ALL)).enable(enable);((Button) getCtrl(BT_TASKSAVE)).enable(enable);((Button) getCtrl(BT_DEL_ALL)).enable(enable);} public void enableSave(boolean enable) { getBtTaskSave().enable(enable);}} class HungerSetsDtPanel extends PropertySetPanel { public HungerSetsDtPanel(Color bgColor,LabeledEditPair[] pairs) { super(bgColor,pairs);} Panel createPanelColorfullWrap(Component comp,Color wrapColor) { LabeledPanel ignorePanelWrap=new LabeledPanel("",comp,LabeledPanel.DEF_WRAP_SIZE,wrapColor,wrapColor,wrapColor,false,true,true,!true); return ignorePanelWrap;}} class HungerExtSelectDtPanel extends HungerSetsDtPanel { public HungerExtSelectDtPanel(Color bgColor,LabeledEditPair[] pairs) { super(bgColor,pairs);} public static Panel create(ChoiceFactory cfPublFinal) { LabeledEditPair[] pairs=new LabeledEditPair[1]; pairs[1-1]=new LabeledEditPair("Scripting types:",cfPublFinal.getChCases()); HungerExtSelectDtPanel psp=new HungerExtSelectDtPanel(HungerProps.bgCtrlPanelColor,pairs); return psp.createPanelColorfullWrap(psp.cookingLabels(HungerProps.bgSizePanelColor,HungerProps.textChartPanelColor,HungerProps.bgChartPanelColor),HungerProps.bgCtrlPanelColor);}} class HungerVarEnvDtPanel extends HungerSetsDtPanel { public HungerVarEnvDtPanel(Color bgColor,LabeledEditPair[] pairs) { super(bgColor,pairs);} public static Panel create(TextField tfVarEnv) { LabeledEditPair[] pairs=new LabeledEditPair[1]; pairs[1-1]=new LabeledEditPair("Environment:",tfVarEnv); HungerVarEnvDtPanel psp=new HungerVarEnvDtPanel(HungerProps.bgCtrlPanelColor,pairs); return psp.createPanelColorfullWrap(psp.cookingLabels(HungerProps.bgSizePanelColor,HungerProps.textChartPanelColor,HungerProps.bgChartPanelColor),HungerProps.bgCtrlPanelColor);}} class ControlsRightDtPanel extends Panel { ChoiceFactory extChoiceFactory; TextField tfVarEnv; Panel extPanel; Panel envPanel; SaveDeleteAllDtPanel btnPanel; public ControlsRightDtPanel() { super(); this.extChoiceFactory=extInit(); this.tfVarEnv=new TextField(HungerProps.DEF_ENV_VAR); MultyButtonTiersBuilder.create().appendPanel(extPanel=HungerExtSelectDtPanel.create(extChoiceFactory)).appendPanel(envPanel=HungerVarEnvDtPanel.create(tfVarEnv)).appendControlsPanel(btnPanel=new SaveDeleteAllDtPanel()).build(this);} ChoiceFactory extInit() { String[] variants=new String[1+1+1]; variants[1-1]=HungerProps.BC_BOTH_EXT; variants[1]=HungerProps.BC_EXT_BATCH; variants[1+1]=HungerProps.BC_EXT_COMMAND; ChoiceFactory result=new ChoiceFactory(variants,0+1+1-1-1+1+1-1+1-1-1+1); return result;} public String getLunchVar() { String text=tfVarEnv.getText(); if(text==null) return HungerProps.DEF_ENV_VAR; for(int i=0; i < HungerProps.ENV_VAR_ESC.length(); i++) text=new Data().replace(new Ester(text),new Ester("").append(HungerProps.ENV_VAR_ESC.charAt(i)),new Ester("")).toString(); return text.length() < 1 ? HungerProps.DEF_ENV_VAR : text;} public String getSelectedExtension() { return getChExt().getSelectedItem();} public Choice getChExt() { return extChoiceFactory.getChCases();} public TextField getTfVarEnv() { return tfVarEnv;} public SaveDeleteAllDtPanel getBtnPanel() { return btnPanel;} public void enableLiftingCtrls(boolean enable) { extChoiceFactory.getChCases().enable(enable); tfVarEnv.enable(enable);}} class RightTasksDtPanel extends CommonDataArrayPanel { ListPanel listPanel; ControlsRightDtPanel ctrlPanel; private TasksDtKarta tasks=new TasksDtKarta(); private LongTermCtrl ltc; LoggingVkusnjashki logPanel; public RightTasksDtPanel(LoggingVkusnjashki logPanel,LongTermCtrl ltc) { super(); this.logPanel=logPanel; this.ltc=ltc;} public Color getPanelBgColor() { return HungerProps.bgSideColor;} protected Color getWrapPanelColor() { return HungerProps.bgStatPanelColor;} protected Panel obtainControlsPanel() { this.ctrlPanel=new ControlsRightDtPanel(); return ctrlPanel;} protected SizePanel obtainSizePanel() { return null;} protected ListPanel obtainListPanel() { this.listPanel=new ListPanel(new StatTaskDtPanel("","task(s)")); return listPanel;} public void enableDisableSave() { ctrlPanel.getBtnPanel().enableSave(!ltc.hasLongTermContin() && getSelectedIdx() >-1);} public ControlsRightDtPanel getCtrlPanel() { return ctrlPanel;} public LoggingVkusnjashki getLogPanel() { return logPanel;} public void setLogPanel(LoggingVkusnjashki logPanel) { this.logPanel=logPanel;} public void rightSelectedSave(MainClsProcessorDtHolder spCurrentHolder,ParallelDtPanel quadePanel) { int idxSel=getSelectedIdx(); if(idxSel >-1) { RightDtTask rightTask=getTask(idxSel); if(spCurrentHolder.getSpCurrent()==null) spCurrentHolder.setSpCurrent((MainClsSearchDtPanel) quadePanel.getFirst()); spCurrentHolder.getSpCurrent().saveTask(rightTask);}} public void rightSelected(DtPathPanel pathPanel,MainClsProcessorDtHolder spCurrentHolder,ParallelDtPanel quadePanel) { enableDisableSave(); setAmount(""+itemsNum()); int idxSel=getSelectedIdx(); String looking=pathPanel.getPath(); setPosition(""+(idxSel+1)); RightDtTask rightTask=getTask(idxSel); if(spCurrentHolder.getSpCurrent()==null) spCurrentHolder.setSpCurrent((MainClsSearchDtPanel) quadePanel.getFirstMain()); spCurrentHolder.getSpCurrent().performTask(idxSel,looking,rightTask);} public void enableCtrls(boolean enable) { listPanel.listEnable(enable);} public RightDtTask getTask(int idxSel) { return(RightDtTask) tasks.at(idxSel);} public void selectNothing() { super.selectNothing(); ctrlPanel.getBtnPanel().enableSave(false);} public void updateOnUiThread() { boolean prerequsites=itemsNum() > 0 && !ltc.hasLongTermContin(); ctrlPanel.getBtnPanel().enableDeleteAll(prerequsites); ctrlPanel.getBtnPanel().enableSaveAll(prerequsites); ctrlPanel.enableLiftingCtrls(false==ltc.hasLongTermContin());} public RightDtTask getSelected() { int idx=getSelectedIdx(); RightDtTask selected=(RightDtTask) tasks.at(idx); return selected;} public synchronized void clearTasks() { listPanel.clearItems(); tasks=new TasksDtKarta(); setPosition(""); setAmount(""); ctrlPanel.getBtnPanel().dropBtnSkipPosition();} public synchronized void registerTask(RightDtTask rightTask) { System.out.println("registerTask() "+rightTask); if(!tasks.containsKey(rightTask.getUnique())) { listPanel.addItem(rightTask.repr()); tasks.append(rightTask); logPanel.addLog("Register task "+rightTask.action+" for "+rightTask.onWhat+" from "+rightTask.located);} setAmount(""+itemsNum());}} class MainClsProcessorDtHolder { MainClsDtProcessor spCurrent; public MainClsProcessorDtHolder() { super();} public MainClsDtProcessor getSpCurrent() { return spCurrent;} public void setSpCurrent(MainClsDtProcessor spCurrent) { this.spCurrent=spCurrent;}} class TasksDtKarta extends Karta { protected Queue keyLog=new Queue(); public TasksDtKarta() { super();} public void append(RightDtTask rightTask) { if(rightTask !=null) { String unique=rightTask.getUnique(); keyLog.enqueueQueueRecord(unique); put(unique,rightTask);}} public RightDtTask at(int idxSel) { String unique=(String) keyLog.getQueueRecord(idxSel); return(RightDtTask) get(unique);}} class RightDtTask { public final static String TASK_CONF="Config"; public final static String TASK_CHK="Check"; public final static String TASK_BIN="Bin"; public final static String TASK_INFO="Info"; public final static String TASK_UPD="Lunch"; final static String CMD1="zmake.bat"; final static String CMD2="genconf.bat"; final static String CMD3="ybin.bat"; final static String CMD4="ainfo.bat"; final static String CMD11="zmake.cmd"; final static String CMD22="genconf.cmd"; final static String CMD33="ybin.cmd"; final static String CMD44="ainfo.cmd"; String action; String onWhat; String located; String result; String pblClsNameRecord; String pblClsName; String pkgRecord; String lunchName; String relPath; private String kindSave; private String lunchVar; public RightDtTask(String doing,String arg,String path,String lunchName,String pblClsNameRecord,String pblClsName,String pkgRecord,String relPath,String kindSave,String lunchVar) { this(doing,arg,path,kindSave); this.lunchName=lunchName; this.relPath=relPath; this.result=new Data().replace(new Ester(path),new Ester(arg),new Ester(lunchName)).toString(); this.pblClsNameRecord=pblClsNameRecord; this.pblClsName=pblClsName; this.pkgRecord=pkgRecord; this.lunchVar=lunchVar;} public RightDtTask(String doing,String arg,String path,String kindSave) { super(); this.kindSave=kindSave; this.action=doing; this.onWhat=arg; this.located=path; if(new Ester(doing).eq(new Ester(TASK_CHK))) this.result=located+"\\"+CMD1; else if(new Ester(doing).eq(new Ester(TASK_CONF))) this.result=located+"\\"+CMD2; else if(new Ester(doing).eq(new Ester(TASK_BIN))) this.result=located+"\\"+CMD3; else if(new Ester(doing).eq(new Ester(TASK_INFO))) this.result=located+"\\"+CMD4; checkResult();} public String getKindSave() { return kindSave;} public String getUnique() { return new Ester("").append(action).append('-').append(onWhat).append('-').append(located).toString();} void checkResult() { if(result !=null && result.length() > 0) result=new Data().replace(new Ester(result),new Ester("\\\\"),new Ester("\\")).toString();} public String getResult() { return result;} public String repr() { if(new Ester(action).eq(new Ester(TASK_UPD))) return action+" "+relPath; return action+" "+onWhat;} public String getDoing() { return action;} public String getArg() { return onWhat;} public String getPath() { return located;} public String toString() { return "RightTask [doing="+action+", arg="+onWhat+", path="+located+", putTooNa="+result+"]";} public void updateLunch(String lunch) { this.result=lunch;} public boolean isBatchSave() { return new ZhooKindDtSave(kindSave).isBatchSave();} public boolean isCommandSave() { return new ZhooKindDtSave(kindSave).isCommandSave();} public String getLunchVar() { return lunchVar;} public String getAction() { return action;} public boolean isActionType(String actionType) { if(action !=null && actionType !=null) { return action.equalsIgnoreCase(actionType);} return false;} public boolean isActionTypeConf() { return isActionType(TASK_CONF);} public boolean isActionTypeCheck() { return isActionType(TASK_CHK);} public boolean isActionTypeBin() { return isActionType(TASK_BIN);} public boolean isActionTypeInfo() { return isActionType(TASK_INFO);} public boolean isActionTypeLunch() { return isActionType(TASK_UPD);} public String getLocated() { return located;} public String getLunchName() { return lunchName;} public String getOnWhat() { return onWhat;} public String getPblClsName() { return pblClsName;} public String getPkgRecord() { return pkgRecord;} public String getPblClsNameRecord() { return pblClsNameRecord;} public String getRelPath() { return relPath;}} class AbstractCommand { protected int id; protected boolean complete; protected AbstractCommand(int id) { super(); this.id=id; this.complete=false;}} class CommandDtZhoo extends AbstractCommand { public final static int ID_READY=1; public final static int ID_INIT=1+1; public final static int ID_READ_SOURCE=1+1+1; public final static int ID_ONELINE=1+1+1+1; public CommandDtZhoo(int id) { super(id);} public static CommandDtZhoo create(int cmdId) { CommandDtZhoo cmd=null; switch(cmdId) { case ID_READY : case ID_INIT : cmd=new CommandDtZhoo(cmdId); break;} return cmd;} public int getId() { return id;} public boolean isComplete() { return complete;}} class ReadCommandDtZhoo extends CommandDtZhoo { private String name; private String path; private String start; String relPath; int idxSel; public ReadCommandDtZhoo(String name,String path,String start,String relPath,int idxSel) { super(ID_READ_SOURCE); this.name=name; this.path=path; this.start=start; this.relPath=relPath; this.idxSel=idxSel;} public int getIdxSel() { return idxSel;} public String getStart() { return start;} public String getName() { return name;} public String getPath() { return path;} public String getRelPath() { return relPath;} public String toString() { return "CommandRead [name="+name+", path="+path+", start="+start+", relPath="+relPath+"]";}} class ProcessCommandDtZhoo extends CommandDtZhoo { private boolean needClear; private ReadyFree readyFree; public ProcessCommandDtZhoo(ReadyFree readyFree,boolean needClear) { super(ID_ONELINE); this.readyFree=readyFree; this.needClear=needClear;} public ReadyFree getReadyFree() { return readyFree;} public boolean isNeedClear() { return needClear;}} interface MainClsDtProcessor extends CommonProc { void saveTask(RightDtTask rightTask); void performTask(int idxSel,String looking,RightDtTask rightTask); void processLunch(String relPath,int idxSel); void readSource(String name,String path,String start,String relPath,int idxSel);} class CommandDtZhooQueue extends AbstractDtCommandQueue { public CommandDtZhooQueue() { super();} public void push(CommandDtZhoo cmd) { itemsQueue.enqueueQueueRecord(cmd);} public CommandDtZhoo nextCurrent() { CommandDtZhoo cmd=(CommandDtZhoo) itemsQueue.dequeueQueueRecord(); return cmd;} public void dump() { new Data().dump(itemsQueue.getQueueRecordsArray());}} class FullDtPathSplit { private Ester fullPath; public FullDtPathSplit(Ester fullPath) { super(); this.fullPath=fullPath;} public Ester getFullPath() { return fullPath;} public Ester getParentFolder() { Ester path2=getFolderPath(); if(path2 !=null && path2.length() > 0) path2=path2.sub(0,path2.length()-1); if(path2 !=null && path2.length() > 0) path2=new FullDtPathSplit(path2).getFileName(); return path2;} public Ester getFileName() { return new Ester(fullPath).sub(1+(new Ester(fullPath).indexX('/') > new Ester(fullPath).indexX('\\') ? new Ester(fullPath).indexX('/') : new Ester(fullPath).indexX('\\')));} public Ester getFolderPath() { return new Ester(fullPath).sub(0,1-1+1+(new Ester(fullPath).indexX('/') > new Ester(fullPath).indexX('\\') ? new Ester(fullPath).indexX('/') : new Ester(fullPath).indexX('\\')));}} class OrdererDt { private Karta folders=new Karta(); public void append(Ester item) { if(item !=null && item.length() > 0) folders.put(new FullDtPathSplit(item).getFolderPath().toString(),item);} public String[] getResult() { String[] fks=folders.keys(); Queue items=new Queue(); for(int i=0; i < fks.length; i++) if(fks[i] !=null && fks[i].length() > 0) items.enqueueQueueRecord(fks[i]); Object[] queueRecordsArray=items.getQueueRecordsArray(); String[] result=new String[(int) queueRecordsArray.length]; for(int i=0; i < result.length; i++) result[i]=(String) queueRecordsArray[i]; new Order().order(result); return result;}} class SourcePkgNameDtPanel extends Panel { TextField tfSrcName; List tfRelPath; TextField tfBack; TextField tfFullPath; public SourcePkgNameDtPanel() { super(); setLayout(new BorderLayout()); setBackground(Color.darkGray); add("West",tfSrcName=new TextField(12-1-1-1-1-1-1-1+5+5)); tfRelPath=new List(5-1,false); add("Center",tfRelPath=new List(5-1+(!tfRelPath.allowsMultipleSelections() ?-1 : 1-1),false)); add("East",tfBack=new TextField(12-1-1-1-1-1-1-1+5+5)); tfSrcName.setEditable(false); tfRelPath.enable(!false); tfBack.setEditable(false); add("North",tfFullPath=new TextField()); tfFullPath.setEditable(false);} public void clear() { tfSrcName.setText(""); tfRelPath.clear(); tfBack.setText(""); tfFullPath.setText("");} public TextField getTfSrcName() { return tfSrcName;} public List getTfRelPath() { return tfRelPath;} public TextField getTfBack() { return tfBack;} public TextField getTfFullPath() { return tfFullPath;} public void clearPanel() { tfSrcName.setText(""); tfRelPath.clear(); tfBack.setText(""); tfFullPath.setText("");} public void setBackText(String txt) { tfBack.setText(txt);} public void setFullPathText(String txt) { tfFullPath.setText(txt);} public void clearRelPath() { tfRelPath.clear();} public int countRelPathItems() { return tfRelPath.countItems();} public void setSrcNameText(String txt) { tfSrcName.setText(txt);} public String getSrcNameText() { return tfSrcName.getText();}} class TotalDtPanel extends Panel { TextField tfMain; TextField tfPackage; TextField tfLunch; private String source; private String sourcePath; TextField tfPubCls; String pubClsName; public TotalDtPanel() { super(); setLayout(new BorderLayout()); GeoLayoutBuilder.create().bgColor(Color.darkGray).appendNorth(tfPubCls=new TextField()).appendWest(tfMain=new TextField(12-1-1-1-1-1-1-1+5-5+5+5+5+5-5-5-5)).appendCenter(tfPackage=new TextField()).appendEast(tfLunch=new TextField(12-1-1-1-1-1-1-1+5+5)).build(this); tfMain.setEditable(false); tfPackage.setEditable(false); tfLunch.setEditable(false); tfPubCls.setEditable(false);} public TextField getTfMain() { return tfMain;} public TextField getTfPackage() { return tfPackage;} public TextField getTfLunch() { return tfLunch;} public String getSource() { return source;} public TextField getTfPubCls() { return tfPubCls;} public String getPubClsName() { return pubClsName;} public String getPubCls() { return tfPubCls.getText();} public void setSource(String source,String sourcePath) { this.source=source; this.sourcePath=sourcePath; processData();} public boolean containsMain() { return tfMain.getText().length() > 0;} public void processData() { if(source==null) source=""; String[] pieces=OneWayConv.remarkableDifferences().getParts(sourcePath); tfMain.setText(""); boolean pkgMode=false; Ester packageItem=new Ester(""); Ester ptrnMain=new Ester("main"); Ester ptrnPbl=new Ester("public"); Ester ptrnCls=new Ester("class"); Ester ptrnPackage=new Ester("package"); Ester ptrnPackageEnd=new Ester(";"); PubClsDtFind find=new PubClsDtFind(); boolean mainReady=false; boolean pkgReady=false; boolean pblClsReady=false; boolean prevItemDot=false; for(int i=0; ptrnMain !=null && i < pieces.length; i++) { Ester item=new Ester(pieces[i]); if(item.eq(ptrnMain)) { tfMain.setText("main()"); mainReady=true;} else if(item.eq(ptrnPackage)) { pkgMode=true; packageItem.append(item).append(' ');} else if(item.eq(ptrnPackageEnd) && pkgMode) { pkgMode=false; pkgReady=true;} else if(pkgMode) packageItem.append(item); if(item.eq(ptrnPbl)) find.markPbl(); else if(find.isPbl()) { if(!prevItemDot && item.eq(ptrnCls)) find.markCls(); else find.clear(); if(find.isCls() && i+1 < pieces.length) { find.regName(new Ester(pieces[i+1])); pblClsReady=true; find.clear();}} if(mainReady && pkgReady && pblClsReady) ptrnMain=null; prevItemDot=item.eq(new Ester("."));} tfPackage.setText(packageItem.toString()); if(find.hasRecord()) { tfPubCls.setText(find.getRecord()); pubClsName=find.getName();}} public void clear() { tfMain.setText(""); tfPackage.setText(""); tfLunch.setText(""); tfPubCls.setText("");} public void clearPanel() { tfMain.setText(""); tfPackage.setText(""); tfLunch.setText(""); source=""; tfPubCls.setText(""); pubClsName="";} public String getPackageText() { return tfPackage.getText();} public void setPackageText(String txt) { tfPackage.setText(txt);} public void setLunchText(String txt,String kindSave) { if(new ZhooKindDtSave(kindSave).isBoth()) tfLunch.setText(txt+"(.cmd)"); else if(new ZhooKindDtSave(kindSave).isBatchSave()) tfLunch.setText(txt); else if(new ZhooKindDtSave(kindSave).isCommandSave()) tfLunch.setText(new Data().replace(new Ester(txt),new Ester(".bat"),new Ester(".cmd")).toString());} public String getLunchText() { return tfLunch.getText();}} class PubClsDtFind { private String name; private boolean pbl; private boolean cls; public void markPbl() { pbl=true;} public String getName() { return name;} public String getRecord() { return "public class "+name;} public boolean hasRecord() { return name !=null && name.length() > 0;} public void regName(Ester item) { name=item.toString();} public boolean isCls() { return cls;} public void clear() { pbl=false; cls=false;} public void markCls() { cls=true;} public boolean isPbl() { return pbl;}} class NameDtItem { Ester item; Ester pkg; Ester name; public NameDtItem(String param) { super(); this.item=new Ester(param); long nameIdx=item.indexX('.'); this.pkg=item.sub(0,nameIdx); this.name=item.sub(nameIdx);} public Ester getPkg() { return pkg;} public boolean isNameLessThen(Ester other) { return name.less(other);} public String getItem() { return item.toString();} public String getName() { return name.toString();}} class RightDtOrderTask extends AbstractDtTask { PanelsAgDt panelAg; private boolean nameSort; private boolean manageCtrls; public RightDtOrderTask(PanelsAgDt panelAg,boolean nameSort,boolean manageCtrls,Queue reqProc) { super(reqProc); this.panelAg=panelAg; this.nameSort=nameSort; this.manageCtrls=manageCtrls;} public PanelsAgDt getPanelAg() { return panelAg;} public boolean isNameSort() { return nameSort;} public boolean isManageCtrls() { return manageCtrls;} protected void performTask() { recountComplete(1,1+1); Time t=new Time(); t.start(); RightTasksClassesPanel rightPanel=panelAg.getRightPanel(); HeuristicsRightDtPanel classesPanel=rightPanel.getClassesPanel(); String[] clsItems=classesPanel.getClsList(); classesPanel.clearTasks(); DtLogPanel logPanel=panelAg.getLogPanel(); logPanel.addLog("Start ordering"); String[] sortingLabel={ "Sorting..."}; classesPanel.append(sortingLabel); if(nameSort) { NameDtItem[] values=new NameDtItem[clsItems.length]; for(int i=0; i < clsItems.length; i++) values[i]=new NameDtItem(clsItems[i]); long N=(long) clsItems.length; for(int a=0; a < N-1; a++) for(int b=a+1; b < N; b++) if(!values[a].isNameLessThen(values[b].name)) { NameDtItem tmp=values[a]; values[a]=values[b]; values[b]=tmp;} Queue result=new Queue(); Queue buf=new Queue(); Karta flt=new Karta(); String prevKey=""; for(int i=0; i < values.length; i++) { String item=values[i].getItem(); String key=values[i].getName(); if(!key.equalsIgnoreCase(prevKey) && buf.sizeOfQueue() > 0) buf=new Queue(); if(flt.containsKey(key)) { if(buf.sizeOfQueue() > 0) { while(buf.sizeOfQueue() > 0) { result.enqueueQueueRecord(buf.dequeueQueueRecord());} buf.clearQueue();} result.enqueueQueueRecord(item);} else { flt.put(key,item); buf.enqueueQueueRecord(item);} prevKey=key;} Object[] data=result.getQueueRecordsArray(); clsItems=new String[(int) data.length]; for(int i=0; i < clsItems.length; i++) clsItems[i]=(String) data[i];} else new Order().order(clsItems); classesPanel.clearTasks(); logPanel.addLog("Ordering complete"); classesPanel.append(clsItems); t.trust(); recountComplete(1+1,1+1); logPanel.addLogComplete("Auto check complete in "+t.ess()); if(manageCtrls) { DtPathPanel pathPanel=panelAg.getPathPanel(); pathPanel.getBtScan().enable(true); pathPanel.enableSingleBtn(true); pathPanel.enablePreview(true); SourceLeftDtPanel leftPanel=panelAg.getLeftPanel(); HeuristicsAutoDtScanPanel reviewPanel=leftPanel.getSizeSavePanel().getTroublePanel().getReviewPanel(); reviewPanel.getBtAuto().enable(true); reviewPanel.getBtReview().enable(true); leftPanel.enableCtrls(true); rightPanel.enableCtrls(true);}}} class MultySrcProcessor { SourceDtProcessor spSubscriber; MainClsDtProcessor spReenock; PkgClsDtProcessor spHeuristics; public MultySrcProcessor() { super();} public MultySrcProcessor(SourceDtProcessor spFirst,MainClsDtProcessor spSecond,PkgClsDtProcessor spThird) { super(); this.spSubscriber=spFirst; this.spReenock=spSecond; this.spHeuristics=spThird;} public SourceDtProcessor getSpSubscriber() { return spSubscriber;} public MainClsDtProcessor getSpReenock() { return spReenock;} public PkgClsDtProcessor getSpHeuristics() { return spHeuristics;} public void setSpSubscriber(SourceDtProcessor spFirst) { spSubscriber=spFirst;} public void setSpReenock(MainClsDtProcessor spSecond) { spReenock=spSecond;} public void setSpHeuristics(PkgClsDtProcessor spThird) { spHeuristics=spThird;} public String toString() { return "MultySrcProcessor [spSubscriber="+spSubscriber+", spReenock="+spReenock+", spHeuristics="+spHeuristics+"]";}} class OneWaySource extends mydev.oline.OneLine { static final boolean READ_LINE_LOG=false; private String fPath; private byte[] data; private String content; private String contentOneLined; private String[] pieces; private static Ester readLog=new Ester(""); DtPathPanel pathPanel; private OneWaySource(String fPath,DtPathPanel pathPanel) { this.fPath=fPath; this.pathPanel=pathPanel;} public String[] getParts() { if(pieces==null) pieces=OneWayConv.remarkableDifferences().getParts(fPath); return pieces;} public String getContent() throws IOException { if(content==null) content=OneWayConv.remarkableDifferences().getContent(fPath); return content;} public byte[] getData() throws IOException { if(data==null) data=OneWayConv.remarkableDifferences().getData(fPath); return data;} public String getContentOneLine() throws IOException { if(contentOneLined==null) return line(""); return contentOneLined;} public String line(String path2) throws IOException { Time t=new Time(); t.start(); String record=""; if(READ_LINE_LOG) readLog.append(record).append('\n'); String[] pieces=getParts(); Ester buf=new Ester(""); for(int i=0; i < pieces.length && pieces[i] !=null; i++) { if(pieces[i].startsWith("//")) continue; if(pieces[i].startsWith("/*")) continue; buf.append(pieces[i]); if(i < pieces.length-1 && pieces[i+1] !=null && !pieces[i+1].startsWith("=") && !pieces[i].startsWith("=") && !pieces[i].startsWith("-") && !pieces[i+1].startsWith("-") && !pieces[i+1].startsWith("+") && !pieces[i].startsWith("+") && !pieces[i].startsWith(",") && !pieces[i+1].startsWith(",") && !pieces[i].startsWith("!") && !pieces[i].startsWith("(") && !pieces[i].startsWith("[") && !pieces[i+1].startsWith("}") && !pieces[i+1].startsWith(")") && !pieces[i+1].startsWith(";") && !pieces[i+1].startsWith("(") && !pieces[i+1].startsWith("[") && !pieces[i+1].startsWith("]") && !pieces[i+1].startsWith(".") && !pieces[i].startsWith(".")) buf.append(' ');} t.trust(); if(READ_LINE_LOG) { readLog.append(record).append('\n'); writeLogs(pathPanel);} return contentOneLined=buf.toString();} public static OneWaySource create(String fPath,DtPathPanel pathPanel) throws IOException { OneWaySource oneWaySource=new OneWaySource(fPath,pathPanel); Time t=new Time(); t.start(); String record=""; if(READ_LINE_LOG) readLog.append(record).append('\n'); t.trust(); if(READ_LINE_LOG) { readLog.append(record).append('\n'); writeLogs(pathPanel);} return oneWaySource;} private static void writeLogs(DtPathPanel pathPanel) { String toWhere=pathPanel.getPath()+"\\"+"readLog.txt"; try { new Data().write(toWhere,readLog);} catch(IOException e) {}}} class OneWayProxyCheck { DtPathPanel pathPanel; public OneWayProxyCheck(DtPathPanel pathPanel) { super(); this.pathPanel=pathPanel;} public DtPathPanel getPathPanel() { return pathPanel;} public SourceCode getSourceCode(String fPath) throws IOException { OneWaySource rec=getRecord(fPath); return new SourceCode(rec.getContent(),rec.getData());} public String getContent(String fPath) throws IOException { OneWaySource rec=getRecord(fPath); return rec.getContent();} public SourceCode getSourceCodeOneLine(String fPath) throws IOException { OneWaySource rec=getRecord(fPath); return new SourceCode(rec.getContentOneLine(),rec.getData());} public String getContentOneLine(String fPath) throws IOException { OneWaySource rec=getRecord(fPath); return rec.getContentOneLine();} public String[] getParts(String fPath) throws IOException { OneWaySource rec=getRecord(fPath); return rec.getParts();} protected OneWaySource getRecord(String fPath) throws IOException { return OneWaySource.create(fPath,pathPanel);}} interface ProcRunnable extends Runnable { ProcRunnable accept(Class comProcCls);} class TripleRunner { private ProcRunnable whiteRun; private int thId; private int thCompleted; private Class[] processors; public TripleRunner(ProcRunnable procRun) { super(); this.whiteRun=procRun; initProc();} void initProc() { processors=new Class[3]; processors[0]=SourceDtPanel.class; processors[0+1]=MainClsSearchDtPanel.class; processors[0+1+1]=PkgClsExtractDtPanel.class;} public boolean hasAllComplete() { return thCompleted >= processors.length;} public int getIncr() { return++thId;} public void markCompleted() { thCompleted+=1;} public void lunch() { thId=0; thCompleted=0; for(int i=0; i < processors.length; i++) new Thread(whiteRun.accept(processors[i])).start();}} class HungerProps extends Props { public static final Color borderTrioListColor=Color.white; public static final Color bgConfigsPanelColor=Color.lightGray; static final String DEF_ENV_VAR="CP1"; static final String ENV_VAR_ESC=" %^*?\\/!"; static final String BC_BOTH_EXT="Both"; static final String BC_EXT_BATCH="Batch shell"; static final String BC_EXT_COMMAND="Command shell"; public static final String DOUBLES_ORDERED_LIST="doublesOrderedItems.txt"; public static final String FULL_ORDERED_LIST="fullOrderedItems.txt"; public static final String INPUT_AVG_LIST="averageInputItems.txt"; public static final String SORTING="Sorting..."; public static final int FIRST_PLACE=0; public static final String SORT_FIRST="Aa-Zz"; public static final String SORT_DESC="Descend"; public static final String SORT_ASC="Ascend"; public static final String SORT_LAST="Zz-Aa"; public static final Color bgLimStatPanelColor=Props.bgSizePanelColor; final static String YES="Yes"; final static String NO="No"; final static String SKIP="Skip";} abstract class AbstractFilterableDtTask extends AbstractDtTask { protected DtPathPanel pathPanel; protected DtLogPanel logPanel; protected DtAmountIgnoreListPanel amountIgnoredListPanel; protected SourceLeftDtPanel leftPanel; protected MultyCompleteCounter mcc; protected String path; protected Metr amount=new Metr(); public AbstractFilterableDtTask(DtPathPanel pathPanel,DtLogPanel logPanel,DtAmountIgnoreListPanel amountIgnoredListPanel,SourceLeftDtPanel leftPanel,MultyCompleteCounter mcc,Queue reqProc) { super(reqProc); this.pathPanel=pathPanel; this.logPanel=logPanel; this.amountIgnoredListPanel=amountIgnoredListPanel; this.leftPanel=leftPanel; this.mcc=mcc;} protected void updateStat() { Metr m=new Metr(0); m.inc(amount); displayAmount(m);} protected void displayAmount(Metr m) { Ester repr=m.repr(' '); amountIgnoredListPanel.setAmount(new Ester("0").eq(repr) ? "" : repr.toString());} public DtAmountIgnoreListPanel getAmountIgnoredListPanel() { return amountIgnoredListPanel;} public DtPathPanel getPathPanel() { return pathPanel;} public DtLogPanel getLogPanel() { return logPanel;} public String getPath() { return path;} public Metr getAmount() { return amount;}} abstract class AbstractDtTask extends ProgressMultiTasking { protected Queue reqProc; public AbstractDtTask(Queue reqProc) { super(); this.reqProc=reqProc;} protected void checkProc(CommonProc sp) { boolean found=false; Queue iter=reqProc.quickQueueCopy(); while(!found && iter.sizeOfQueue() > 0) { Class item=(Class) iter.dequeueQueueRecord(); if(item==sp.getClass()) found=true;} if(!found) throw new IllegalArgumentException("Unknown proc!!!"+sp.toString());} public Ester[] reToss(Ester[] select) { for(int i=0; i < select.length / 2; i++) { Ester item=select[i]; if(item.length()-item.length() / 2 * 2==1) { select[i]=select[select.length-1-i]; select[select.length-1-i]=item;}} return select;}} class ZhooKindDtSave { private String kindSave; public ZhooKindDtSave(String kindSave) { super(); this.kindSave=kindSave;} public boolean isBatchSave() { if(kindSave !=null) { if(new Ester(kindSave).eq(new Ester(HungerProps.BC_EXT_BATCH))) return true; if(new Ester(kindSave).eq(new Ester(HungerProps.BC_BOTH_EXT))) return true;} return false;} public boolean isCommandSave() { if(kindSave !=null) { if(new Ester(kindSave).eq(new Ester(HungerProps.BC_EXT_COMMAND))) return true; if(new Ester(kindSave).eq(new Ester(HungerProps.BC_BOTH_EXT))) return true;} return false;} public boolean isBoth() { if(kindSave !=null) return new Ester(kindSave).eq(new Ester(HungerProps.BC_BOTH_EXT)); return false;} public boolean endsLunch(String lunchText) { if(isBoth()) return new Ester(lunchText).ends(new Ester("(.cmd)")); if(isBatchSave()) return new Ester(lunchText).ends(new Ester(".bat")); if(isCommandSave()) return new Ester(lunchText).ends(new Ester(".cmd")); return false;}} class OneLineAllDtTask extends AbstractDtTask { SourceLeftDtPanel leftPanel; ParallelDtPanel quadePanel; LoggingVkusnjashki logPanel; private Sleeper totalSleeper; private int totalSize; private LongTermCtrl ltc; public OneLineAllDtTask(SourceLeftDtPanel leftPanel,ParallelDtPanel quadePanel,LoggingVkusnjashki logPanel,Sleeper totalSleeper,int totalSize,LongTermCtrl longTermMnogaCtrl,Queue reqProc) { super(reqProc); this.leftPanel=leftPanel; this.quadePanel=quadePanel; this.logPanel=logPanel; this.totalSleeper=totalSleeper; this.totalSize=totalSize; this.ltc=longTermMnogaCtrl;} public LoggingVkusnjashki getLogPanel() { return logPanel;} public SourceLeftDtPanel getLeftPanel() { return leftPanel;} public ParallelDtPanel getQuadePanel() { return quadePanel;} public Sleeper getTotalSleeper() { return totalSleeper;} public int getTotalSize() { return totalSize;} protected void performTask() { oneLineItemsAll(ltc,totalSleeper,totalSize);} private void oneLineItemsAll(LongTermCtrl ltc,Sleeper sleeper,int size1) { SourceDtProcessor sp; for(int i=0; ltc.hasLongTermContin() && i < size1; i++) { leftPanel.getTrioListPanel().getAiListPanelSubscriber().selectItem(i); sp=leftPanel.getTrioListPanel().getAiListPanelSubscriber().leftSelectedSubscriber(i); checkProc(sp); sp.process(true); while(quadePanel.hasAvailable()==false) sleeper.sleep(166); recountComplete(i+1,size1);}}} class LeftHungerProcessAllDtTask extends AbstractDtTask { SourceLeftDtPanel leftPanel; ParallelDtPanel quadePanel; LoggingVkusnjashki logPanel; DtPathPanel pathPanel; private Sleeper totalSleeper; private int totalSize; private LongTermCtrl ltc; public LeftHungerProcessAllDtTask(SourceLeftDtPanel leftPanel,ParallelDtPanel quadePanel,LoggingVkusnjashki logPanel,DtPathPanel pathPanel,Sleeper totalSleeper,int totalSize,LongTermCtrl longTermMnogaCtrl,Queue reqProc) { super(reqProc); this.leftPanel=leftPanel; this.quadePanel=quadePanel; this.logPanel=logPanel; this.pathPanel=pathPanel; this.totalSleeper=totalSleeper; this.totalSize=totalSize; this.ltc=longTermMnogaCtrl;} protected void performTask() { leftSelectionProcessAll(totalSleeper,ltc,totalSize);} protected void leftSelectionProcessAll(Sleeper sleeper,LongTermCtrl ltc,int size1) { MainClsDtProcessor sp; for(int i=0; ltc.hasLongTermContin() && i < size1; i++) { leftPanel.getTrioListPanel().getAiListPanelReenock().selectItem(i); sp=leftPanel.getTrioListPanel().getAiListPanelReenock().leftSelectedReenock(i); checkProc(sp); sp.process(true); while(quadePanel.hasAvailableMain()==false) sleeper.sleep(166); recountComplete(i+1,size1);}}} class LeftTinaProcessAllDtTask extends AbstractDtTask { SourceLeftDtPanel leftPanel; ParallelDtPanel quadePanel; LoggingVkusnjashki logPanel; DtPathPanel pathPanel; private Sleeper totalSleeper; private int totalSize; private LongTermCtrl ltc; public LeftTinaProcessAllDtTask(SourceLeftDtPanel leftPanel,ParallelDtPanel quadePanel,LoggingVkusnjashki logPanel,DtPathPanel pathPanel,Sleeper totalSleeper,int totalSize,LongTermCtrl longTermMnogaCtrl,Queue reqProc) { super(reqProc); this.leftPanel=leftPanel; this.quadePanel=quadePanel; this.logPanel=logPanel; this.pathPanel=pathPanel; this.totalSleeper=totalSleeper; this.totalSize=totalSize; this.ltc=longTermMnogaCtrl;} public SourceLeftDtPanel getLeftPanel() { return leftPanel;} public ParallelDtPanel getQuadePanel() { return quadePanel;} public LoggingVkusnjashki getLogPanel() { return logPanel;} public DtPathPanel getPathPanel() { return pathPanel;} public Sleeper getTotalSleeper() { return totalSleeper;} public int getTotalSize() { return totalSize;} protected void performTask() { leftSelectionProcessAll(totalSleeper,ltc,totalSize);} private void leftSelectionProcessAll(Sleeper sleeper,LongTermCtrl ltc,int size1) { PkgClsDtProcessor sp; for(int i=0; ltc.hasLongTermContin() && i < size1; i++) { leftPanel.getTrioListPanel().getAiListPanelHeuristics().selectItem(i); sp=leftPanel.getTrioListPanel().getAiListPanelHeuristics().leftSelectedHeuristics(i); checkProc(sp); sp.process(true); while(quadePanel.hasAvailablePkg()==false) sleeper.sleep(166); recountComplete(i+1,size1);}}} class LeftViewAllDtTask extends AbstractDtTask { SourceLeftDtPanel leftPanel; RightTasksClassesPanel rightPanel; ParallelDtPanel quadePanel; LoggingVkusnjashki logPanel; DtPathPanel pathPanel; private LongTermCtrl ltc; public LeftViewAllDtTask(SourceLeftDtPanel leftPanel,RightTasksClassesPanel rightPanel,ParallelDtPanel quadePanel,LoggingVkusnjashki logPanel,DtPathPanel pathPanel,Queue reqProc) { super(reqProc); this.leftPanel=leftPanel; this.rightPanel=rightPanel; this.quadePanel=quadePanel; this.logPanel=logPanel; this.pathPanel=pathPanel; this.ltc=pathPanel;} protected void performTask() { PkgClsDtProcessor sp; Sleeper sleeper=new Sleeper(); Time t=new Time(); t.start(); int size1=leftPanel.getTrioListPanel().getAiListPanelHeuristics().itemsNum(); if(size1 > 0) { for(int i=0; ltc.hasLongTermContin() && i < size1; i++) { leftPanel.getTrioListPanel().getAiListPanelHeuristics().selectItem(i); sp=leftPanel.getTrioListPanel().getAiListPanelHeuristics().leftSelectedHeuristics(i); sp.process(true); System.out.print("1"); while(quadePanel.hasAvailablePkg()==false) { sleeper.sleep(166); System.out.print("SLEEP_1");} System.out.println("2"); recountComplete(i+1,size1);} while(quadePanel.hasInProgressPkg()) { sleeper.sleep(166); System.out.print("SLEEP_2");} System.out.println("");} sp=null; quadePanel.clearPanels(); t.trust(); logPanel.addLogComplete("Average records("+quadePanel.getAverageRec().getRecordsNum()+") processing time is "+quadePanel.getAverageRec().getAverageTime()+"s also min time is "+quadePanel.getAverageRec().getMinTime()+"s and max time is "+quadePanel.getAverageRec().getMaxTime()+"s"); logPanel.addLogComplete("Review All left items complete in "+t.ess()); if(pathPanel.getPreview()) { pathPanel.setPreview(false); sleeper.sleep(166 * 2); new Better().exitApplicationLoop();} pathPanel.disableStop(); pathPanel.getBtScan().enable(true); pathPanel.enableSingleBtn(true); pathPanel.enablePreview(true); HeuristicsAutoDtScanPanel reviewPanel=leftPanel.getSizeSavePanel().getTroublePanel().getReviewPanel(); reviewPanel.getBtAuto().enable(true); reviewPanel.getBtReview().enable(true); leftPanel.enableCtrls(true); leftPanel.selectNothing(); rightPanel.enableCtrls(true);}} class OneLinePreviewDtTask extends AbstractDtTask { SourceLeftDtPanel leftPanel; ParallelDtPanel quadePanel; LoggingVkusnjashki logPanel; private Sleeper totalSleeper; private int totalSize; private LongTermCtrl ltc; public OneLinePreviewDtTask(SourceLeftDtPanel leftPanel,ParallelDtPanel quadePanel,LoggingVkusnjashki logPanel,Sleeper totalSleeper,int totalSize,LongTermCtrl longTermMnogaCtrl,Queue reqProc) { super(reqProc); this.leftPanel=leftPanel; this.quadePanel=quadePanel; this.logPanel=logPanel; this.totalSleeper=totalSleeper; this.totalSize=totalSize; this.ltc=longTermMnogaCtrl;} public SourceLeftDtPanel getLeftPanel() { return leftPanel;} public ParallelDtPanel getQuadePanel() { return quadePanel;} public LoggingVkusnjashki getLogPanel() { return logPanel;} public Sleeper getTotalSleeper() { return totalSleeper;} public int getTotalSize() { return totalSize;} protected void performTask() { preview(totalSleeper,totalSize,ltc);} private void preview(Sleeper sleeper,int size1,LongTermCtrl ltc) { SourceDtProcessor sp; for(int i=0; ltc.hasLongTermContin() && i < size1; i++) { leftPanel.getTrioListPanel().getAiListPanelSubscriber().selectItem(i); sp=leftPanel.getTrioListPanel().getAiListPanelSubscriber().leftSelectedSubscriber(i); sleeper.sleep(166 * 3 / 5); while(quadePanel.hasAvailable()==false) sleeper.sleep(166 * 3 / 5); recountComplete(i+1,size1);} while(quadePanel.hasInProgress()) sleeper.sleep(166 * 3);}} class RightHungerSaveAllDtTask extends AbstractDtTask { SourceLeftDtPanel leftPanel; RightTasksDtPanel taskPanel; DtPathPanel pathPanel; ParallelDtPanel quadePanel; private MainClsProcessorDtHolder spCurrentHolder; private Sleeper totalSleeper; private LongTermCtrl ltc; private boolean sepLunch; public RightHungerSaveAllDtTask(SourceLeftDtPanel leftPanel,RightTasksDtPanel taskPanel,DtPathPanel pathPanel,ParallelDtPanel quadePanel,MainClsProcessorDtHolder spCurrentHolder,Sleeper totalSleeper,LongTermCtrl longTermMnogaCtrl,Queue reqProc,boolean sepLunch) { super(reqProc); this.leftPanel=leftPanel; this.taskPanel=taskPanel; this.pathPanel=pathPanel; this.quadePanel=quadePanel; this.spCurrentHolder=spCurrentHolder; this.totalSleeper=totalSleeper; this.ltc=longTermMnogaCtrl; this.sepLunch=sepLunch;} protected void performTask() { rightSelectedSaveAll(ltc,totalSleeper,sepLunch);} protected void rightSelectedSaveAll(LongTermCtrl ltc,Sleeper sleeper,boolean sepLunch) { leftPanel.getTrioListPanel().getAiListPanelReenock().selectNothing(); int size2=taskPanel.itemsNum(); if(size2 > 0) { for(int i=0;(sepLunch ? true : ltc.hasLongTermContin()) && i < size2; i++) { taskPanel.selectItem(i); taskPanel.rightSelected(pathPanel,spCurrentHolder,quadePanel); taskPanel.rightSelectedSave(spCurrentHolder,quadePanel); System.out.println("SLEEP_11"); sleeper.sleep(166 * 2); recountComplete(i+1,size2);} System.out.println("SLEEP_22");} if(sepLunch) { pathPanel.disableStop(); leftPanel.enableAuto(true); leftPanel.enableCtrls(true);}}} class DtTinaRightRunTask extends AbstractDtTask { HeuristicsRightDtPanel rightPanel; Sleeper totalSleeper; LongTermCtrl longTermMnogaCtrl; public DtTinaRightRunTask(HeuristicsRightDtPanel rightPanel,Sleeper totalSleeper,LongTermCtrl longTermMnogaCtrl,Queue reqProc) { super(reqProc); this.rightPanel=rightPanel; this.totalSleeper=totalSleeper; this.longTermMnogaCtrl=longTermMnogaCtrl;} protected void performTask() { rightRun(totalSleeper,longTermMnogaCtrl);} private void rightRun(Sleeper sleeper,LongTermCtrl ltc) { int size1; size1=rightPanel.itemsNum(); if(size1 > 0) { for(int i=0; ltc.hasLongTermContin() && i < size1; i++) { rightPanel.selectItem(i); rightPanel.setPosition(""+(i+1)); System.out.print("1"); sleeper.sleep(166 / 5); System.out.println("2"); recountComplete(i+1,size1);} System.out.println("");}}} class TinaExportRightDtListTask extends AbstractDtTask { HeuristicsRightDtPanel rightPanel; DtPathPanel pathPanel; LoggingVkusnjashki logPanel; LongTermCtrl longTermMnogaCtrl; public TinaExportRightDtListTask(HeuristicsRightDtPanel rightPanel,DtPathPanel pathPanel,LoggingVkusnjashki logPanel,LongTermCtrl longTermMnogaCtrl,Queue reqProc) { super(reqProc); this.rightPanel=rightPanel; this.pathPanel=pathPanel; this.logPanel=logPanel; this.longTermMnogaCtrl=longTermMnogaCtrl;} public LoggingVkusnjashki getLogPanel() { return logPanel;} public void setLogPanel(LoggingVkusnjashki logPanel) { this.logPanel=logPanel;} public HeuristicsRightDtPanel getRightPanel() { return rightPanel;} public DtPathPanel getPathPanel() { return pathPanel;} protected void performTask() { exportList(longTermMnogaCtrl);} private void exportList(LongTermCtrl ltc) { if(ltc.hasLongTermContin()) { String[] clsItems=rightPanel.getClsList(); Ester info=new Ester("").append("----------------").append(""+clsItems.length+" items").append("----------------"); Ester result=new Ester("").append(info).append('\n'); for(int i=0; i < clsItems.length; i++) { if(i > 0) result.append('\n'); result.append(clsItems[i]); recountComplete(i+1,clsItems.length);} result.append('\n').append(info); String toWhere=pathPanel.getPath()+"\\"+rightPanel.getExportName(); try { new Data().write(toWhere,result); logPanel.addLog("Export complete "+toWhere);} catch(IOException e) { logPanel.addLog("Write ERROR "+toWhere+" "+e.getMessage());}}}} abstract class AbstractDtPanel extends AbstractApproach { private ParallelPanelAg panelAg; protected AbstractDtPanel(ParallelPanelAg panelAg) { super(); this.panelAg=panelAg;} public LoggingVkusnjashki getLogPanel() { return panelAg.logPanel;} public SourceLeftDtPanel getLeftPanel() { return panelAg.leftPanel;} public RightTasksDtPanel getTaskPanel() { return panelAg.taskPanel;} public DtPathPanel getPathPanel() { return panelAg.pathPanel;} public OneWayProxyCheck getCheck() { return panelAg.check;}} class MainClsSearchDtPanel extends AbstractDtPanel implements MainClsDtProcessor { static final String LUNCH_EXT=".bat"; SourcePkgNameDtPanel sourceNamePanel; TotalDtPanel zp; TextArea taSource; private String name; private String path; private String looking; private ReadyFree readyFree; private CommandDtZhooQueue cq=new CommandDtZhooQueue(); public MainClsSearchDtPanel(ParallelPanelAg panelAg) { super(panelAg); setLayout(new BorderLayout()); setBackground(Color.darkGray); add("North",sourceNamePanel=new SourcePkgNameDtPanel()); add("Center",taSource=new TextArea()); add("South",zp=new TotalDtPanel()); taSource.setEditable(false); this.readyFree=new ReadyFree();} public SourcePkgNameDtPanel getSourceNamePanel() { return sourceNamePanel;} public TotalDtPanel getZp() { return zp;} public String getName() { return name;} public String getPath() { return path;} public String getLooking() { return looking;} public boolean isReadyFree() { return readyFree.isFree();} public void doIt(Params params) { if(params !=null) { if(params.areYou(AbstractParallelEmptyPanel.CMD_READ_SRC)) readSource(params.getParam("name"),params.getParam("path"),params.getParam("looking"),params.getParam("relPath"),params.getParamInteger("idxSel").intValue());}} public void readSource(String name,String path,String looking,String relPath,int idxSel) { CommandDtZhoo cmd=new ReadCommandDtZhoo(name,path,looking,relPath,idxSel); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} public void saveTask(RightDtTask rightTask) { LoggingVkusnjashki logPanel=getLogPanel(); try { if(rightTask.isBatchSave()) { new Data().write(rightTask.result,new Ester(taSource.getText())); logPanel.addLog("Write SUCCESS "+rightTask.result);} if(rightTask.isCommandSave()) { String cmdName; new Data().write(cmdName=new Data().replace(new Ester(rightTask.result),new Ester(".bat"),new Ester(".cmd")).toString(),new Ester(taSource.getText())); logPanel.addLog("Write SUCCESS "+cmdName);}} catch(IOException e) { logPanel.addLog("Can't write "+rightTask.result+" "+e.getMessage()); System.out.println("Can't write "+rightTask.result+" "+e.getMessage());}} public void performTask(int idxSel,String looking,RightDtTask rightTask) { sourceNamePanel.clear(); zp.clear(); sourceNamePanel.setFullPathText(rightTask.result); zp.setLunchText(new FullDtPathSplit(new Ester(rightTask.result)).getFileName().toString(),rightTask.getKindSave()); if(new Ester(rightTask.action).eq(new Ester(RightDtTask.TASK_CHK))) createCheckAll(rightTask); else if(new Ester(rightTask.action).eq(new Ester(RightDtTask.TASK_CONF))) createConfigAll(rightTask); else if(new Ester(rightTask.action).eq(new Ester(RightDtTask.TASK_BIN))) createBinAll(rightTask); else { String lunch=new FullDtPathSplit(new Ester(looking+rightTask.relPath)).getFolderPath().toString()+rightTask.lunchName; sourceNamePanel.setFullPathText(lunch); zp.setLunchText(rightTask.lunchName,rightTask.getKindSave()); rightTask.updateLunch(lunch); createLunch(rightTask);}} void createBinAll(RightDtTask rightTask) { taSource.setText("world"); System.out.println("world3 "+looking); looking=rightTask.located; Ester[] select=new Files().tree(new Ester(looking)); Ester[] start=new Filter().endsWithIncensitive(select,new Ester(".bat")); Ester txt=new Ester(""); txt.append('#').append('@').append('e').append('c').append('h').append('o').append(' ').append('O').append('F').append('F').append('\n').append('e').append('c').append('h').append('o').append(' ').append("Hello").append(' ').append(looking).append('\n').append('\n'); txt.append('m').append('k').append('d').append('i').append('r').append(' ').append(looking).append('\\').append('b').append('i').append('n').append('\\').append('\n').append('\n'); for(int i=0; i < start.length; i++) if(start[i].ends(new Ester(RightDtTask.CMD1))) continue; else if(start[i].ends(new Ester(RightDtTask.CMD2))) continue; else if(start[i].ends(new Ester(RightDtTask.CMD3))) continue; else if(start[i].ends(new Ester(RightDtTask.CMD11))) continue; else if(start[i].ends(new Ester(RightDtTask.CMD22))) continue; else if(start[i].ends(new Ester(RightDtTask.CMD33))) continue; else txt.append('c').append('o').append('p').append('y').append(' ').append(start[i]).append(' ').append(looking).append('\\').append('b').append('i').append('n').append('\\').append('\n'); txt.append('c').append('d').append(' ').append(looking).append('\n').append('\n').append('e').append('c').append('h').append('o').append(' ').append("Bye").append(' ').append(looking).append('\n').append('@').append('e').append('c').append('h').append('o').append(' ').append('O').append('N').append('\n'); taSource.setText(new Data().replace(txt,new Ester("\\\\"),new Ester("\\")).toString());} void createConfigAll(RightDtTask rightTask) { taSource.setText("world"); System.out.println("world2 "+looking); looking=rightTask.located; Ester[] select=new Files().tree(new Ester(looking)); Ester[] start=new Join().join(new Filter().endsWithIncensitive(select,new Ester("zetupka")),new Join().join(new Join().join(new Filter().endsWithIncensitive(select,new Ester(".java")),new Filter().endsWithIncensitive(select,new Ester(".class"))),new Join().join(new Filter().endsWithIncensitive(select,new Ester(".bat")),new Filter().endsWithIncensitive(select,new Ester(".cmd"))))); OrdererDt ord=new OrdererDt(); for(int i=0; i < start.length; i++) ord.append(new FullDtPathSplit(start[i]).getFolderPath()); String[] fks=ord.getResult(); Ester txt=new Ester(""); txt.append('#').append('@').append('e').append('c').append('h').append('o').append(' ').append('O').append('F').append('F').append('\n').append('e').append('c').append('h').append('o').append(' ').append("Hello").append(' ').append(looking).append('\n').append('\n'); for(int i=0; i < fks.length; i++) txt.append('c').append('d').append(' ').append(fks[i]).append('\n').append('s').append('t').append('a').append('r').append('t').append(' ').append('c').append('o').append('n').append('f').append(' ').append(new FullDtPathSplit(new Ester(fks[i]).append("a")).getParentFolder()).append('\n').append('\n'); txt.append('c').append('d').append(' ').append(looking).append('\n').append('\n').append('e').append('c').append('h').append('o').append(' ').append("Bye").append(' ').append(looking).append('\n').append('@').append('e').append('c').append('h').append('o').append(' ').append('O').append('N').append('\n'); taSource.setText(new Data().replace(txt,new Ester("\\\\"),new Ester("\\")).toString());} void createCheckAll(RightDtTask rightTask) { taSource.setText("world"); System.out.println("world3 "+looking); looking=rightTask.located; Ester[] select=new Files().tree(new Ester(looking)); Ester[] start=new Filter().endsWithIncensitive(select,new Ester(".java")); OrdererDt ord=new OrdererDt(); for(int i=0; i < start.length; i++) ord.append(new FullDtPathSplit(start[i]).getFolderPath()); String[] fks=ord.getResult(); Ester txt=new Ester(""); txt.append('#').append('@').append('e').append('c').append('h').append('o').append(' ').append('O').append('F').append('F').append('\n').append('e').append('c').append('h').append('o').append(' ').append("Hello").append(' ').append(looking).append('\n').append('\n'); Ester[] fksEs=new Ester[fks.length]; for(int i=0; i < fks.length; i++) fksEs[i]=new Ester(fks[i]); Ester[] fksEsAaa=new Filter().endsWith(fksEs,new Ester("\\aaa\\")); Ester[] fksEsVutils=new Filter().endsWith(fksEs,new Ester("\\vutils\\")); Ester[] fksEsOneway=new Filter().endsWith(fksEs,new Ester("\\oneway\\")); Ester[] fksEsBbb=new Filter().endsWith(fksEs,new Ester("\\bbb\\")); Ester[] fksEsOline=new Filter().endsWith(fksEs,new Ester("\\oline\\")); Ester[] fksEsRest=new Join().sub(fksEs,fksEsAaa); fksEsRest=new Join().sub(fksEsRest,fksEsVutils); fksEsRest=new Join().sub(fksEsRest,fksEsOneway); fksEsRest=new Join().sub(fksEsRest,fksEsBbb); fksEsRest=new Join().sub(fksEsRest,fksEsOline); fksEsRest=new Join().join(new Join().join(new Join().join(new Join().join(fksEsAaa,fksEsVutils),new Join().join(fksEsAaa,fksEsVutils)),new Join().join(new Join().join(fksEsOneway,fksEsBbb),fksEsOline)),fksEsRest); for(int i=0; i < fksEsRest.length; i++) txt.append('c').append('d').append(' ').append(fksEsRest[i]).append('\n').append('j').append('a').append('v').append('a').append('c').append(' ').append('*').append('.').append('j').append('a').append('v').append('a').append(' ').append('>').append('>').append(' ').append(looking).append('\\').append('z').append('m').append('a').append('k').append('e').append('.').append('l').append('o').append('g').append('\n').append('\n'); txt.append('c').append('d').append(' ').append(looking).append('\n').append('\n').append('e').append('c').append('h').append('o').append(' ').append("Bye").append(' ').append(looking).append('\n').append('@').append('e').append('c').append('h').append('o').append(' ').append('O').append('N').append('\n'); taSource.setText(new Data().replace(txt,new Ester("\\\\"),new Ester("\\")).toString());} void createLunch(RightDtTask rightTask) { taSource.setText(new Ester("").append('#').append('@').append('e').append('c').append('h').append('o').append(' ').append('O').append('F').append('F').append('\n').append('j').append('a').append('v').append('a').append(' ').append('-').append('c').append('l').append('a').append('s').append('s').append('p').append('a').append('t').append('h').append(' ').append('%').append(rightTask.getLunchVar()).append('%').append(' ').append(new Data().replace(new Ester(rightTask.pkgRecord),new Ester("package "),new Ester("")).toString()).append('.').append(rightTask.pblClsName).append('\n').append('@').append('e').append('c').append('h').append('o').append(' ').append('O').append('N').append('\n').toString());} public void processLunch(String relPath,int idxSel) { String mainName=sourceNamePanel.getSrcNameText(); Ester path2=new FullDtPathSplit(new Ester(path)).getParentFolder(); String lunchName=path2.toString()+LUNCH_EXT; path=getLeftPanel().getTrioListPanel().getAiListPanelReenock().getSelectedPath(idxSel); getTaskPanel().registerTask(new RightDtTask(RightDtTask.TASK_UPD,mainName,path,lunchName,zp.getPubCls(),zp.pubClsName,zp.getPackageText(),relPath,getTaskPanel().getCtrlPanel().getSelectedExtension(),getTaskPanel().getCtrlPanel().getLunchVar()));} public void process(boolean needClear) { readyFree.setBusy(); CommandDtZhoo cmd=new ProcessCommandDtZhoo(readyFree,needClear); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} private void interpret(CommandDtZhoo cmd) { switch(cmd.getId()) { case CommandDtZhoo.ID_READY : break; case CommandDtZhoo.ID_INIT : break; case CommandDtZhoo.ID_READ_SOURCE : if(((ReadCommandDtZhoo) cmd).getPath() !=null &&((ReadCommandDtZhoo) cmd).getPath().length() > 0) readSource((ReadCommandDtZhoo) cmd); break; case CommandDtZhoo.ID_ONELINE : oneLineTansform((ProcessCommandDtZhoo) cmd); break;}} private void readSource(ReadCommandDtZhoo cmd) { ar.start(); Time t=new Time(); t.start(); sourceNamePanel.clear(); zp.clear(); taSource.setText(""); name=cmd.getName(); path=cmd.getPath(); looking=cmd.getStart(); int idxSel=cmd.getIdxSel(); sourceNamePanel.setSrcNameText(name); sourceNamePanel.setFullPathText(path); String source=""; LoggingVkusnjashki logPanel=getLogPanel(); if(path !=null && path.length() > 0) try { source=OneWayConv.remarkableDifferences().getContent(path); taSource.setText(source); sleeper.sleep(5 / 4);} catch(IOException ex) { System.out.println("Can't read "+path+" . "+ex.getMessage()); taSource.setText("Can't read "+path+" . "); logPanel.addLog("Can't read "+path+" . "+ex.getMessage());} zp.setPackageText(""); if(source.length() > 0) zp.setSource(source,path); String path2=extractRelPath(name,path,looking); sourceNamePanel.clearRelPath(); if(path2.length() > 0) parsePkg(path2); if(path2.length() > 0) parseWayBack(path2); if(zp.containsMain()) { int itemsNum=sourceNamePanel.countRelPathItems(); if(itemsNum > 0 && new Ester(sourceNamePanel.getTfRelPath().getItem(itemsNum-1)).nteq(new Ester("vutils"))) zp.setLunchText(sourceNamePanel.getTfRelPath().getItem(itemsNum-1)+LUNCH_EXT,getTaskPanel().getCtrlPanel().getSelectedExtension());} getLeftPanel().enableLunch(zp.getLunchText().length() > 0 && new ZhooKindDtSave(getTaskPanel().getCtrlPanel().getSelectedExtension()).endsLunch(zp.getLunchText()) && !getPathPanel().hasLongTermContin()); sleeper.sleep(866 / 5); if(zp.getLunchText().length() > 0 && new ZhooKindDtSave(getTaskPanel().getCtrlPanel().getSelectedExtension()).endsLunch(zp.getLunchText())) processLunch(cmd.getRelPath(),idxSel); t.trust(); logPanel.addLogComplete("Completed "+path+" in "+t.ess()); ar.trust();} private void parseWayBack(String relPath) { Ester back=new Ester(".."); for(int i=0; i < relPath.length(); i++) if(relPath.charAt(i)=='/') back.append('/').append(".."); sourceNamePanel.setBackText(back.toString());} private void parsePkg(String relPath) { int prev=-1; String part=""; for(int i=0; i < relPath.length(); i++) if(relPath.charAt(i)=='/') { if(prev < 0) part=new Ester(relPath).sub(0,i).toString(); else part=new Ester(relPath).sub(prev+1,i).toString(); sourceNamePanel.getTfRelPath().addItem(part); prev=i;} if(prev >-1) { part=new Ester(relPath).sub(prev+1).toString(); sourceNamePanel.getTfRelPath().addItem(part);}} private String extractRelPath(String fileName,String filePath,String startPath) { String path2=new Data().replace(new Ester(filePath),new Ester(fileName),new Ester("")).toString(); path2=new Data().replace(new Ester(path2),new Ester(startPath.toLowerCase()),new Ester("")).toString(); if(path2.length() > 0 && new Ester(path2).begins(new Ester("\\"))) path2=new Ester(path2).sub(1).toString(); if(path2.length() > 0 && new Ester(path2).begins(new Ester("/"))) path2=new Ester(path2).sub(1).toString(); if(path2.length() > 0 && new Ester(path2).ends(new Ester("\\"))) path2=new Ester(path2).sub(0,path2.length()-3+1+1).toString(); if(path2.length() > 0 && new Ester(path2).ends(new Ester("/"))) path2=new Ester(path2).sub(0,path2.length()-3+1+1).toString(); if(path2.length() > 0 && path2.indexOf('\\') >= 0) path2=new Data().replace(new Ester(path2),new Ester("\\"),new Ester("/")).toString(); return path2;} private void oneLineTansform(ProcessCommandDtZhoo cmd) { getLogPanel().addLog("Starting "+path); cmd.getReadyFree().setFree(); if(cmd.isNeedClear()) { taSource.setText(""); sourceNamePanel.setSrcNameText(""); sourceNamePanel.clearRelPath(); sourceNamePanel.setBackText("");}} public void run() { while(Better.working) { if(cq.hasSomeWork()) { CommandDtZhoo cmd=cq.nextCurrent(); interpret(cmd);} sleeper.sleep(5 / 4);}} public void clearPanel() { taSource.setText(""); name=""; path=""; looking=""; sourceNamePanel.clearPanel(); zp.clearPanel();}} class PkgClsExtractDtPanel extends AbstractDtPanel implements PkgClsDtProcessor { SourceHelpDtPanel srcHelpPanel; TextArea taSource; private String name; private String path; private String looking; HeuristicsRightDtPanel rightPanel; private ReadyFree readyFree; private CommandDtBriQueue cq=new CommandDtBriQueue(); public PkgClsExtractDtPanel(HeuristicsRightDtPanel rightPanel,ParallelPanelAg panelAg) { super(panelAg); setLayout(new BorderLayout()); setBackground(Color.darkGray); this.rightPanel=rightPanel; add("North",srcHelpPanel=new SourceHelpDtPanel(getCheck())); add("Center",taSource=new TextArea()); taSource.setEditable(false); this.readyFree=new ReadyFree();} public SourceHelpDtPanel getSrcHelpPanel() { return srcHelpPanel;} public String getName() { return name;} public String getPath() { return path;} public String getLooking() { return looking;} public HeuristicsRightDtPanel getRightPanel() { return rightPanel;} public boolean isReadyFree() { return readyFree.isFree();} public void doIt(Params params) { if(params !=null) { if(params.areYou(AbstractParallelEmptyPanel.CMD_READ_SRC)) readSource(params.getParam("name"),params.getParam("path"),params.getParam("looking"),params.getParam("relPath"),params.getParamInteger("idxSel").intValue());}} public void readSource(String name,String path,String looking,String relPath,int idxSel) { BriDtCommand cmd=new ReadBriDtCommand(name,path,looking,relPath); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} public void process(boolean needClear) { readyFree.setBusy(); BriDtCommand cmd=new ProcessBriDtCommand(readyFree,needClear); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} private void interpret(BriDtCommand cmd) { switch(cmd.getId()) { case BriDtCommand.ID_READY : break; case BriDtCommand.ID_INIT : break; case BriDtCommand.ID_READ_SOURCE : if(((ReadBriDtCommand) cmd).getPath() !=null &&((ReadBriDtCommand) cmd).getPath().length() > 0) readSource((ReadBriDtCommand) cmd); break; case BriDtCommand.ID_ONELINE : oneLineTansform((ProcessBriDtCommand) cmd); break;}} private void readSource(ReadBriDtCommand cmd) { ar.start(); Time t=new Time(); t.start(); srcHelpPanel.clearPanel(); taSource.setText(""); name=cmd.getName(); path=cmd.getPath(); looking=cmd.getStart(); setFullPath(path); String source=""; if(path !=null && path.length() > 0) try { source=getCheck().getContent(path); taSource.setText(source); sleeper.sleep(5 / 4);} catch(IOException ex) { System.out.println("Can't read "+path+" . "+ex.getMessage()); taSource.setText("Can't read "+path+" . "); getLogPanel().addLog("Can't read "+path+" . "+ex.getMessage());} setPackage(""); srcHelpPanel.clearRelPath(); if(source.length() > 0) { String[] clsList=srcHelpPanel.setSource(source,path); rightPanel.append(clsList);} sleeper.sleep(866 / 5); t.trust(); getLogPanel().addLogComplete("Completed "+path+" in "+t.ess()); ar.trust();} private void setPackage(String txt) { srcHelpPanel.getZp().setPackage(txt);} public void setFullPath(String txt) { srcHelpPanel.getTfFullPath().setText(txt);} private void oneLineTansform(ProcessBriDtCommand cmd) { getLogPanel().addLog("Starting "+path); cmd.getReadyFree().setFree(); if(cmd.isNeedClear()) { taSource.setText(""); srcHelpPanel.clearRelPath();}} public void run() { while(Better.working) { if(cq.hasSomeWork()) { BriDtCommand cmd=cq.nextCurrent(); interpret(cmd);} sleeper.sleep(5 / 4);}} public void clearPanel() { taSource.setText(""); name=""; path=""; looking=""; srcHelpPanel.clearPanel();}} class SourceDtPanel extends AbstractDtPanel implements SourceDtProcessor { TextField tfSrcPath; TextArea taSource; LimDtStats seno; private String name; private String path; private ReadyFree readyFree; private CommandDtSubscriberQueue cq=new CommandDtSubscriberQueue(); private boolean hasNewLine; public SourceDtPanel(ParallelPanelAg panelAg) { super(panelAg); setLayout(new BorderLayout()); setBackground(Color.lightGray); add("North",tfSrcPath=new TextField()); add("Center",taSource=new TextArea()); add("South",seno=new LimDtStats(panelAg.registry)); tfSrcPath.setEditable(false); taSource.setEditable(false); this.readyFree=new ReadyFree();} public TextField getTfSrcPath() { return tfSrcPath;} public LimDtStats getSeno() { return seno;} public String getName() { return name;} public String getPath() { return path;} public boolean isHasNewLine() { return hasNewLine;} public boolean isReadyFree() { return readyFree.isFree();} public void clearPanel() {} public void doIt(Params params) { if(params !=null) { if(params.areYou(AbstractParallelEmptyPanel.CMD_READ_SRC)) readSource(params.getParam("name"),params.getParam("path"),params.getParam("looking"),params.getParam("relPath"),params.getParamInteger("idxSel").intValue());}} public void readSource(String name,String path,String looking,String relPath,int idxSel) { CommandDtOneLine cmd=new ReadCommandDtOneLine(name,path); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} public void process(boolean needSave) { readyFree.setBusy(); CommandDtOneLine cmd=new ProcessCommandDtOneLine(needSave,readyFree); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} public void saveSourceLine() { CommandDtOneLine cmd=new SaveCommandDtOneLine(readyFree); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} private void interpret(CommandDtOneLine cmd) { switch(cmd.getId()) { case CommandDtOneLine.ID_READY : break; case CommandDtOneLine.ID_INIT : break; case CommandDtOneLine.ID_READ_SOURCE : readSource((ReadCommandDtOneLine) cmd); break; case CommandDtOneLine.ID_ONELINE : oneLineTansform((ProcessCommandDtOneLine) cmd); break; case CommandDtOneLine.ID_SAVE_SOURCE : oneLineSave(((SaveCommandDtOneLine) cmd).getReadyFree()); break;}} private void readSource(ReadCommandDtOneLine cmd) { name=cmd.getName(); path=cmd.getPath(); tfSrcPath.setText(path); SourceCode source=new SourceCode(); if(path !=null && path.length() > 0) try { source=getCheck().getSourceCode(path);} catch(IOException ex) { System.out.println("Can't read "+path+" . "+ex.getMessage()); ex.printStackTrace(); getLogPanel().addLog("Can't read "+path+" . "+ex.getMessage());} taSource.setText(source.getContent()); seno.setSource(source,true); hasNewLine=source.getContent().indexOf('\n') >-1;} private void oneLineTansform(ProcessCommandDtOneLine cmd) { ar.start(); getLogPanel().addLog("Starting "+path); try { hasNewLine=1+1 > 1-1; if(hasNewLine) { Time t=new Time(); t.start(); SourceCode source=getCheck().getSourceCodeOneLine(path); taSource.setText(source.getContent()); seno.setSource(source,false); t.trust(); getLogPanel().addLogComplete("One line transformation of "+name+" completed in "+t.ess());} else { getLogPanel().addLog("No transformation already One line at "+name); new Sleeper().sleep(997 / 2);} if(cmd.isNeedSave()) { oneLineSave(cmd.getReadyFree()); taSource.setText(""); seno.setSource(new SourceCode(),true); tfSrcPath.setText("");} else cmd.getReadyFree().setFree();} catch(IOException ex) { System.out.println("Can't transform "+path+" . "+ex.getMessage()); ex.printStackTrace(); getLogPanel().addLog("Can't transform "+path+" . "+ex.getMessage());} ar.trust();} private void oneLineSave(ReadyFree readyFree) { String content=taSource.getText(); getLogPanel().addLog("Save line with "+new Metr(content.length()).repr(',')+" byte(s) to "+path); try { new Data().write(path,new Ester(content)); getLogPanel().addLog(""+name+" complete"); readyFree.setFree();} catch(IOException ex) { System.out.println("Can't write "+path+" . "+ex.getMessage()); ex.printStackTrace(); getLogPanel().addLog("Can't write "+path+" . "+ex.getMessage());}} public void run() { while(Better.working) { if(cq.hasSomeWork()) { CommandDtOneLine cmd=cq.nextCurrent(); interpret(cmd);} sleeper.sleep(5 * 5);}}} class ParallelPanelAg { LoggingVkusnjashki logPanel; SourceLeftDtPanel leftPanel; RightTasksDtPanel taskPanel; RightTasksClassesPanel rightPanel; OneWayProxyCheck check; InternalAdditor internalAdditor; DtPathPanel pathPanel; AzRegistryDt registry; public ParallelPanelAg(LoggingVkusnjashki logPanel,SourceLeftDtPanel leftPanel,RightTasksClassesPanel rightPanel,OneWayProxyCheck check,DtPathPanel pathPanel,AzRegistryDt registry) { super(); this.logPanel=logPanel; this.leftPanel=leftPanel; this.rightPanel=rightPanel; this.check=check; this.pathPanel=pathPanel; this.taskPanel=rightPanel.tasksPanel; this.registry=registry;} public void setLeftPanel(SourceLeftDtPanel leftPanel) { this.leftPanel=leftPanel;} public LoggingVkusnjashki getLogPanel() { return logPanel;} public SourceLeftDtPanel getLeftPanel() { return leftPanel;} public RightTasksClassesPanel getRightPanel() { return rightPanel;} public OneWayProxyCheck getCheck() { return check;} public InternalAdditor getInternalAdditor() { return internalAdditor;} public void setInternalAdditor(InternalAdditor internalAdditor) { this.internalAdditor=internalAdditor;} public RightTasksDtPanel getTaskPanel() { return rightPanel.getTasksPanel();} public LongTermCtrl getPathPanel() { return pathPanel;}} abstract class AbstractParallelEmptyPanel extends AbstractParallelPanel { static final String CMD_READ_SRC="readSource"; protected static ParallelPanelAg ag; AbstractParallelEmptyPanel(int rows,int cols) { super(rows,cols);} public Component add(Component comp) { return addInternal(comp);} public abstract Component addInternal(Component comp);} class ParallelDtPanelSubscriber extends AbstractParallelEmptyPanel { private ParallelDtPanelSubscriber(int rows,int cols) { super(rows,cols);} protected AbstractApproachProvider obtainProvider() { return new ParallelApproachProviderSubscriber(ag);} public Component addInternal(Component comp) { return ag.getInternalAdditor().addComponent(comp);} public static ParallelDtPanelSubscriber create3(int rows,int cols,ParallelPanelAg panelAg) { if(panelAg !=null) ag=panelAg; return new ParallelDtPanelSubscriber(rows,cols);} public SourceDtPanel assignSource(String name,String path,String looking,String relPath,int idxSel) { Params params=new Params(CMD_READ_SRC); params.addParam("name",name); params.addParam("path",path); params.addParam("looking",looking); params.addParam("relPath",relPath); params.addParam("idxSel",new Integer(idxSel)); AbstractApproach abstractApproach=doFirstAvail(params); return(SourceDtPanel) abstractApproach;}} class ParallelDtPanelReenock extends AbstractParallelEmptyPanel { private ParallelDtPanelReenock(int rows,int cols) { super(rows,cols);} protected AbstractApproachProvider obtainProvider() { return new ParallelApproachProviderReenock(ag);} public Component addInternal(Component comp) { return ag.getInternalAdditor().addComponent(comp);} public static ParallelDtPanelReenock create4(int rows,int cols,ParallelPanelAg panelAg) { if(panelAg !=null) ag=panelAg; return new ParallelDtPanelReenock(rows,cols);} public MainClsSearchDtPanel assignSource(String name,String path,String looking,String relPath,int idxSel) { Params params=new Params(CMD_READ_SRC); params.addParam("name",name); params.addParam("path",path); params.addParam("looking",looking); params.addParam("relPath",relPath); params.addParam("idxSel",new Integer(idxSel)); AbstractApproach abstractApproach=doFirstAvail(params); return(MainClsSearchDtPanel) abstractApproach;}} class ParallelDtPanelHeuristics extends AbstractParallelEmptyPanel { private ParallelDtPanelHeuristics(int rows,int cols) { super(rows,cols);} protected AbstractApproachProvider obtainProvider() { return new ParallelApproachProviderHeuristics(ag);} public Component addInternal(Component comp) { return ag.getInternalAdditor().addComponent(comp);} public static ParallelDtPanelHeuristics create5(int rows,int cols,ParallelPanelAg panelAg) { if(panelAg !=null) ag=panelAg; return new ParallelDtPanelHeuristics(rows,cols);} public PkgClsExtractDtPanel assignSource(String name,String path,String looking,String relPath,int idxSel) { Params params=new Params(CMD_READ_SRC); params.addParam("name",name); params.addParam("path",path); params.addParam("looking",looking); params.addParam("relPath",relPath); params.addParam("idxSel",new Integer(idxSel)); AbstractApproach abstractApproach=doFirstAvail(params); return(PkgClsExtractDtPanel) abstractApproach;}} class ParallelDtApproachProvider implements AbstractApproachProvider { public ParallelDtApproachProvider() { super();} public AbstractApproach provideApproach() { return null;}} class AproachSeq { static int num=1; static int next() { return num++;}} class ParallelApproachProviderSubscriber implements AbstractApproachProvider { ParallelPanelAg panelAg; public ParallelApproachProviderSubscriber(ParallelPanelAg panelAg) { super(); this.panelAg=panelAg;} public AbstractApproach provideApproach() { return new SourceDtPanel(panelAg);}} class ParallelApproachProviderReenock implements AbstractApproachProvider { ParallelPanelAg panelAg; public ParallelApproachProviderReenock(ParallelPanelAg panelAg) { super(); this.panelAg=panelAg;} public AbstractApproach provideApproach() { return new MainClsSearchDtPanel(panelAg);}} class ParallelApproachProviderHeuristics implements AbstractApproachProvider { ParallelPanelAg panelAg; public ParallelApproachProviderHeuristics(ParallelPanelAg panelAg) { super(); this.panelAg=panelAg;} public AbstractApproach provideApproach() { return new PkgClsExtractDtPanel(panelAg.getRightPanel().getClassesPanel(),panelAg);}}