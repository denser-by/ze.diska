package mydev.webc; import java.awt.BorderLayout; import java.awt.Button; import java.awt.Canvas; import java.awt.Color; import java.awt.Event; import java.awt.FlowLayout; import java.awt.FontMetrics; import java.awt.Frame; import java.awt.Graphics; import java.awt.Label; import java.awt.Panel; import java.awt.Rectangle; import java.awt.TextArea; import java.awt.TextField; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.awt.Image; import java.net.Socket; public class WebClient extends Frame implements Runnable { boolean stop; Object trb1; private long rqBytes; private long rspBytes; ExpectPanel ep; CenterPanel vp; StatsPanel sp; public WebClient() { super("Web requests"); this.stop=false; this.trb1=null; this.rqBytes=0; this.rspBytes=0;} public static void main(String[] args) { WebClient fr=new WebClient(); fr.prepare1(); fr.show(); while(!fr.stopped()) { fr.timeout(); try { fr.doSomething();} catch(Throwable e) { e.getMessage();}} fr.destroy();} private void destroy() { hide(); dispose(); System.exit(1-1);} private boolean stopped() { return stop;} private void prepare1() { setLayout(new BorderLayout()); add("North",ep=new ExpectPanel()); add("Center",vp=new CenterPanel()); add("South",sp=new StatsPanel()); pack();} private int getSrvPort() { int port=0; try { port=Integer.parseInt(ep.srvPortFld.getText());} catch(Exception e) { e.getMessage();} return port;} private void doSomething() { sp.first.setText(""+rqBytes); sp.second.setText(""+rspBytes);} private void appendOutgoing(char ch) { vp.cnv.updateIncoming(ch);} private void appendIncoming(char ch) { vp.cnv.updateIncoming(ch);} private long workTimeout() { return 95;} public boolean handleEvent(Event et) { if(et.id==Event.WINDOW_DESTROY) { stop=true; timeout();} if(et.id==Event.ACTION_EVENT && et.target==ep.bSend) sendRequest(); if(et.id==Event.ACTION_EVENT && et.target==vp.rq.px.def) defRequest(); return super.handleEvent(et);} private void defRequest() { StringBuffer sb1=new StringBuffer(); sb1.setLength(0); String addr=ep.srvAddrFld.getText(); if(addr==null) addr=Predef.DEF_SRV; else if(addr.length()==0) addr=Predef.DEF_SRV; int port=getSrvPort(); sb1.append("GET / HTTP/1.1").append("\n").append("Accept: image/gif, text/html").append(", image/jpeg").append(", plain/text").append(", application/html").append("\n").append("Accept-Language: ru").append("\n").append("User-Agent: Web requests").append(" (compatible; Windows UI; Web starts; Linux UI)").append("\n").append("Host: ").append(addr).append(':').append(port).append("\n").append("Connection: close").append("\n").append("\n"); vp.rq.tr.setText(sb1.toString()); sb1.setLength(0);} private void sendRequest() { vp.cnv.clear(); new Thread(this).start();} private void timeout() { try { Thread.sleep(workTimeout());} catch(Throwable e) { e.getMessage();}} private void processClientConnection(InputStream is1) { byte[] b1=new byte[1]; int count; try { do { count=is1.read(b1); if(count > 0) { char ch=(char) b1[0]; if(ch !='\r') appendIncoming(ch); rqBytes+=1;}} while(count >= 0);} catch(Exception e) { e.getMessage();}} public void run() { String addr=ep.srvAddrFld.getText(); int port=getSrvPort(); String req=vp.rq.tr.getText(); byte[] b1=new byte[1]; Socket s1=null; OutputStream os=null; InputStream is=null; try { s1=new Socket(addr,port); os=s1.getOutputStream(); for(int i=0; i < req.length(); i++) { b1[0]=(byte) req.charAt(i); os.write(b1); char ch=(char) b1[0]; if(ch !='\r') appendOutgoing(ch); rspBytes+=1;} is=s1.getInputStream(); processClientConnection(is);} catch(Throwable th) { th.getMessage();} finally { if(os !=null) { try { os.flush(); os.close();} catch(IOException e2) { e2.getMessage();}} if(is !=null) try { is.close();} catch(IOException e1) { e1.getMessage();} if(s1 !=null) try { s1.close();} catch(IOException e3) { e3.getMessage();}}}} class ExpectPanel extends Panel { TextField srvAddrFld; TextField srvPortFld; Button bSend; public ExpectPanel() { setLayout(new FlowLayout()); add(new Label("Request address:")); add(srvAddrFld=new TextField(19)); add(new Label("Port:")); add(srvPortFld=new TextField(5)); add(bSend=new Button("Send")); srvAddrFld.setText(Predef.DEF_SRV); srvPortFld.setText(""+Predef.DEF_PORT);}} class CenterPanel extends Panel { RequestPanel rq; MyCnv cnv; public CenterPanel() { setLayout(new BorderLayout()); add("North",rq=new RequestPanel()); add("Center",cnv=new MyCnv());}} class LeftPanel extends Panel { Button def; public LeftPanel() { setLayout(new BorderLayout()); add("North",new Label("Request:")); add("Center",def=new Button("Provide"));}} class RequestPanel extends Panel { LeftPanel px; TextArea tr; public RequestPanel() { setLayout(new FlowLayout()); add(px=new LeftPanel()); add(tr=new TextArea(10,47));}} class MyCnv extends Canvas { Rectangle r1; StringBuffer buf; int downShift; int mx; int my; boolean oldSel; public MyCnv() { buf=new StringBuffer(); buf.setLength(0); resize(400,300); this.downShift=0; this.oldSel=false;} public void checkState() { boolean ns=false; if(r1==null) return; if(mx >= r1.width-18 && mx <= r1.width && my >= 1 && my <= r1.height / 2) ns=true; if(mx >= r1.width-18 && mx <= r1.width && my >= r1.height / 2 && my <= r1.height) ns=true; if(oldSel !=ns) { oldSel=ns; repaint();}} public void update(String str1) { buf.append(str1); repaint();} public void updateIncoming(char ch) { buf.append(ch); repaint();} public void clear() { downShift=0;} public boolean mouseDown(Event et,int x1,int y1) { if(mx >= r1.width-18 && mx <= r1.width && my >= 1 && my <= r1.height / 2) { downShift++; repaint();} if(mx >= r1.width-18 && mx <= r1.width && my >= r1.height / 2 && my <= r1.height) { downShift--; repaint();} return super.mouseDown(et,x1,y1);} public boolean mouseMove(Event et,int x1,int y1) { mx=x1; my=y1; checkState(); return super.mouseMove(et,x1,y1);} public void paint(Graphics cs) { super.paint(cs); if(r1==null) r1=bounds(); cs.setColor(Color.black); cs.drawRect(0,0,r1.width-1,r1.height-1); FontMetrics f1=cs.getFontMetrics(); int x=1; int y=f1.getHeight(); boolean stop=false; String bc=""; int totalHeight=0; int cur=0+downShift; while(!stop) { String s1=getLine(cur,r1); int h1=estimateHeight(s1,f1,r1); if(totalHeight+h1 < r1.height-1) { bc=s1+bc; totalHeight+=h1;} else stop=true; cur+=1;} if(totalHeight > r1.height-1-1) y-=totalHeight-r1.height+1+1; for(int i=0; i < bc.length(); i++) { char ch=bc.charAt(i); String str=""+ch; if(ch !='\n') { if(x < r1.width-1-20) { if(y < r1.height-1) cs.drawString(str,x,y); x+=f1.stringWidth(str);} else { x=1+20; y+=f1.getAscent()+f1.getDescent()+f1.getLeading(); if(y < r1.height-1) cs.drawString(str,x,y); x+=f1.stringWidth(str);}} else { y+=f1.getAscent()+f1.getDescent()+f1.getLeading(); x=1;}} drawUp(cs,f1);} private void drawUp(Graphics cs,FontMetrics f1) { cs.setColor(Color.magenta); if(mx >= r1.width-18 && mx <= r1.width && my >= 1 && my <= r1.height / 2) cs.fillRect(r1.width-18,1+1,15,r1.height / 2-1-1-1); else cs.drawRect(r1.width-18,1+1,15,r1.height / 2-1-1-1); cs.drawString("U",r1.width-15,r1.height / 5); cs.drawString("P",r1.width-15,r1.height / 5+2 * f1.getHeight()); cs.drawLine(r1.width-15-1,r1.height / 12,r1.width-10-1,r1.height / 12-7); cs.drawLine(r1.width-10-1,r1.height / 12-7,r1.width-4-1,r1.height / 12); cs.drawLine(r1.width-15-1,r1.height / 12-2,r1.width-10-1,r1.height / 12-7-2); cs.drawLine(r1.width-10-1,r1.height / 12-7-2,r1.width-4-1,r1.height / 12-2); if(mx >= r1.width-18 && mx <= r1.width && my >= r1.height / 2 && my <= r1.height) cs.fillRect(r1.width-18,r1.height / 2,15,r1.height / 2-1-1-1); else cs.drawRect(r1.width-18,r1.height / 2,15,r1.height / 2-1-1-1); cs.drawString("D",r1.width-15,3 * r1.height / 5); cs.drawString("O",r1.width-15,3 * r1.height / 5+2 * f1.getHeight()); cs.drawString("W",r1.width-15,3 * r1.height / 5+4 * f1.getHeight()); cs.drawString("N",r1.width-15,3 * r1.height / 5+6 * f1.getHeight()); cs.drawLine(r1.width-15-1,11 * r1.height / 12,r1.width-10-1,11 * r1.height / 12+7); cs.drawLine(r1.width-10-1,11 * r1.height / 12+7,r1.width-4-1,11 * r1.height / 12); cs.drawLine(r1.width-15-1,11 * r1.height / 12-2,r1.width-10-1,11 * r1.height / 12+7-2); cs.drawLine(r1.width-10-1,11 * r1.height / 12+7-2,r1.width-4-1,11 * r1.height / 12-2);} private int estimateHeight(String s1,FontMetrics f1,Rectangle r1) { int x=1; int height=f1.getAscent()+f1.getDescent()+f1.getLeading(); for(int i=0; i < s1.length(); i++) { char ch=s1.charAt(i); String str=""+ch; if(ch !='\n') { if(x < r1.width-1-20) { x+=f1.stringWidth(str);} else { x=1+20; height+=f1.getAscent()+f1.getDescent()+f1.getLeading(); x+=f1.stringWidth(str);}}} return height;} private String getLine(int strIdx,Rectangle r1) { StringBuffer b1=new StringBuffer(); boolean stop=false; b1.setLength(0); int cur1=0; for(int i=buf.length()-1; !stop && i >= 0; i--) { char ch=buf.charAt(i); if(ch=='\n') { cur1++; if(b1.length() > 0 && cur1 !=strIdx) stop=true;} else if(cur1==strIdx) b1.append(ch);} String s1=b1.toString(); b1.setLength(0); for(int j=s1.length()-1; j >= 0; j--) b1.append(s1.charAt(j)); return b1.toString()+"\n";}} class StatsPanel extends Panel { Label incFld; Label outgFld; TextField first; TextField second; public StatsPanel() { setLayout(new FlowLayout()); add(incFld=new Label("Incoming:")); add(first=new TextField(7)); add(outgFld=new Label("Outgoing:")); add(second=new TextField(7)); first.enable(false); second.enable(false);}} class Predef { final static int DEF_PORT=80; final static String DEF_SRV="www1.site1.arg1";}
