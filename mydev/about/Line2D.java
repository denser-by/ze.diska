package mydev.about; public class Line2D extends Colorfull implements Reposition,Decompose { protected Point2D p1; protected Vector3 vect; public Line2D(int x1,int y1,int x2,int y2) { this(new Point2D(x1,y1),new Point2D(x2,y2),ColorsArray.blackColorInt);} public Line2D(int x1,int y1,int x2,int y2,int color) { this(new Point2D(x1,y1,color),new Point2D(x2,y2,color),color);} public Line2D(float x1,float y1,float x2,float y2) { this(new Point2D(x1,y1),new Point2D(x2,y2),ColorsArray.blackColorInt);} public Line2D(float x1,float y1,float x2,float y2,int color) { this(new Point2D(x1,y1,color),new Point2D(x2,y2,color),color);} public Line2D(double x1,double y1,double x2,double y2) { this(new Point2D(x1,y1),new Point2D(x2,y2),ColorsArray.blackColorInt);} public Line2D(double x1,double y1,double x2,double y2,int color) { this(new Point2D(x1,y1,color),new Point2D(x2,y2,color),color);} public Line2D(short x1,short y1,short x2,short y2) { this(new Point2D(x1,y1),new Point2D(x2,y2),ColorsArray.blackColorInt);} public Line2D(short x1,short y1,short x2,short y2,int color) { this(new Point2D(x1,y1,color),new Point2D(x2,y2,color),color);} public Line2D(Point2D p1,Point2D p2) { super(Color.middleColor(p1,p2)); this.p1=p1; updateVector(p2);} public Line2D(Point2D p1,Vector3 v1) { super(p1.color); this.p1=p1; this.vect=v1;} public Line2D(Point2D p1,Point2D p2,int color) { super(color); this.p1=p1; updateVector(p2);} public Line2D(Line2D l) { super(l.color); this.p1=l.p1; this.vect=l.vect;} public void represent(Matrix2D matrix) { matrix.addLine(this);} public void toPen(Canvas ics,Paint pn) { ics.drawLine(p1.getX(),p1.getY(),p1.getX()+vect.dx,p1.getY()+vect.dy,pn);} public void shift(Vector3 shVect) { p1.shift(shVect);} public void moveTo(Point2D newLoc) { p1.moveTo(newLoc);} public void moveTo(Point3D newLoc) { p1.moveTo(newLoc);} public void moveTo(int newX,int newY) { p1.moveTo(newX,newY);} public void moveTo(float newX,float newY) { p1.moveTo(newX,newY);} public void moveTo(double newX,double newY) { p1.moveTo(newX,newY);} public void moveTo(short newX,short newY) { p1.moveTo(newX,newY);} public void moveTo(int newX,int newY,int newZ) { p1.moveTo(newX,newY,newZ);} public void moveTo(float newX,float newY,float newZ) { p1.moveTo(newX,newY,newZ);} public void moveTo(double newX,double newY,double newZ) { p1.moveTo(newX,newY,newZ);} public void moveTo(short newX,short newY,short newZ) { p1.moveTo(newX,newY,newZ);} public Point2D getP1() { return p1;} public Point2D getP2() { return vect.destination(p1);} public Vector3 getVect() { return vect;} public Vector3 updateVector(Point2D p2) { this.vect=Vector3.shift(p2,p1); return vect;} public double length() { return vect.module();} public static Line2D createLine(Point2D start,Point2D direction,long length) { Line2D tmp=new Line2D(start,direction,start.color); Line2DIterator it=tmp.obtainIterator(start,Color.middleColor(start,direction)); while(it.hasNext()) { Point2D p=it.getNext(); if(start.distance(p) >= length) return new Line2D(start,p,start.color);} return new Line2D(start,direction,start.color);} public Point2D find2(Line2D isec) { Point2D p2Tmp=getP2(); PairXY[] r1=Matrix2D.line(p1.getX(),p1.getY(),p2Tmp.getX(),p2Tmp.getY()); Point2D isecp2tmp=isec.getP2(); PairXY[] r2=Matrix2D.line(isec.p1.getX(),isec.p1.getY(),isecp2tmp.getX(),isecp2tmp.getY()); for(int i=0; i < r1.length; i++) for(int j=0; j < r2.length; j++) if(r1[i].equals(r2[j])) return new Point2D(r1[i].x,r1[i].y,color); return new Point2D(0,0,color);} public Point2D findIntersection(Line2D isec) { Point2D p2tmp=getP2(); float k1=(float)(p2tmp.getY()-p1.getY()) /(float)(p2tmp.getX()-p1.getX()); float b1=(float) p1.getY()-k1 *(float) p1.getX(); Point2D isecP2=isec.getP2(); float k2=(float)(isecP2.getY()-isec.p1.getY()) /(float)(isecP2.getX()-isec.p1.getX()); float b2=(float) isec.p1.getY()-k2 *(float) isec.p1.getX(); int xi=0; int yi=0; int yii=0; if(k2 !=k1) { xi=(int)((b2-b1) /(k1-k2)); yi=(int)(((b2-b1) /(k1-k2)) * k1+b1); yii=(int)(((b2-b1) /(k1-k2)) * k2+b2);} return new Point2D(xi,(yi+yii) / 2,color);} public Triangle2D triangle(Point2D point) { return new Triangle2D(point,this,getColor());} public Line2DIterator obtainIterator(Point2D start,int produceColor) { return new Line2DIterator(start,start.equals(p1) ? vect.destination(p1) : p1,produceColor);} public Point2D midpoint() { return vect.half().destination(p1);} public Point2D midpointProportion(double proport) { return vect.halfLikeProportion(proport).destination(p1);} public boolean equals(Object o) { if(o !=null && o instanceof Line2D) { if(p1.equals(((Line2D) o).p1) && getP2().equals(((Line2D) o).getP2())) return true; if(p1.equals(((Line2D) o).getP2()) && getP2().equals(((Line2D) o).p1)) return true;} return false;} public boolean intersects(Line2D line) { boolean result=new Triangle2D(getP1(),line).area()+new Triangle2D(getP2(),line).area()==new Triangle2D(line.getP1(),this).area()+new Triangle2D(line.getP2(),this).area(); return result;} public boolean intersects(Circle2D circle) { return circle.intersects(this);} public String toString() { return "Line("+p1+", "+vect+")";} public static Line2D createLine(Point2D p,Point2D a,double min) { return createLine(p,a,(int)(min+0.5f));} public Point2D findPoint(double xda,double xdb) { Point2D a=p1; Point2D b=getP2(); if(xdb !=0f) { double k=xda / xdb; double x3=a.x+k *(b.x-a.x); double y3=a.y+k *(b.y-a.y); return new Point2D((float) x3,(float) y3,color);} return b;} public Point2D A() { return getP1();} public Point2D B() { return getP2();} public Line2D AB() { return new Line2D(A(),B());} public Line3D[] ribs() { return null;} public Line2D[] ribsProjections() { Line2D[] result=new Line2D[1]; result[0]=AB(); return result;} public Point3D[] vertices() { return null;} public Point2D[] verticesProjections() { Point2D[] result=new Point2D[2]; result[0]=A(); result[1]=B(); return result;} public Triangle3D[] planes() { return null;} public Triangle2D[] planesProjections() { return null;} public Vector3 lineVector(Point2D point) { if(point.equals(p1)) return vect.copyVector(); return vect.backVector();}} class Line2DIterator { Point2D start; Point2D end; Point2D cur; PairXY[] all; int idxAll; int color; public Line2DIterator(Point2D start,Point2D end,int color) { this.start=start; this.end=end; this.all=Matrix2D.line(start.getX(),start.getY(),end.getX(),end.getY()); this.idxAll=0; this.color=color; this.cur=new Point2D(all[idxAll].x,all[idxAll].y,color);} public boolean hasNext() { return cur !=null;} public Point2D getNext() { Point2D result=cur; cur=++idxAll < all.length ? new Point2D(all[idxAll].x,all[idxAll].y,color) : null; return result;}} class PairXY { short x; short y; public PairXY(short x,short y) { this.x=x; this.y=y;} public short getX() { return x;} public short getY() { return y;} public boolean equals(Object o) { return x==((PairXY) o).x && y==((PairXY) o).y;}}