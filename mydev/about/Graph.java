package mydev.about; import mydev.vutils.Queue; public class Graph extends Colorfull { protected int width; protected int height; protected double[] pointsArray; protected double min; protected double max; private Queue data; public Graph(int width,int height,int color) { super(color); this.width=width; this.height=height; this.data=new Queue();} public void represent(Matrix2D matrix) {} public void toPen(CanvasAdapter ics,PaintAdapter pn) { if(pointsArray !=null && pointsArray.length > 1) { int linesNum=pointsArray.length-1; int partWidth=width / linesNum; double diff=max-min; for(int i=0; i < linesNum; i++) { Line2D line=new Line2D(new Point2D(i * partWidth,height *(1f-1f / diff * pointsArray[i])),new Point2D((i+1) * partWidth,height *(1.f-1.f / diff * pointsArray[i+1])),ColorsArray.redPoint.ic()); line.toPen(ics,pn.select(line));}} else { Text2D line=new Text2D(new Point2D(width / 3+10 / 2,height / 2-1-1),"Waiting for data",ColorsArray.orangePoint.ic()); line.toPen(ics,pn.select(line));}} public void clearPoints() { min=0f; max=0f; pointsArray=null; data.clearQueue();} public void updatePoints(double minTime,double averageTime,double maxTime) { min=minTime; max=maxTime; data.enqueueQueueRecord(averageTime); if(data.sizeOfQueue() > 1) { int linesNum=(int) data.sizeOfQueue()-1; int partWidth=width / linesNum; if(linesNum > width / 2) { partWidth=2; linesNum=width / partWidth;} double[] newPointsArray=new double[linesNum+1]; Object[] arr=data.getQueueRecordsArray(); double k=(float) arr.length / newPointsArray.length; for(int i=0; i < newPointsArray.length; i++) { double k2; int j=i; double avg=0f; double avgSum=0f; do { avgSum+=(Double) arr[j]; avg=avgSum /(j-i+1); k2=(float) j / i; j++;} while(k2 < k && j < arr.length); newPointsArray[i]=avg;} pointsArray=newPointsArray;}}}