package mydev.about; public class Point2D extends Colorfull implements Reposition { public static final double SAME_POINT_MISTAKE=.3f; protected int x; protected int y; public Point2D() { super(ColorsArray.blackColorInt);} public Point2D(int x,int y) { super(ColorsArray.blackColorInt); this.x=x; this.y=y;} public Point2D(int x,int y,int color) { super(color); this.x=x; this.y=y;} public Point2D(float x,float y) { this((int)(x+0.5f),(int)(y+0.5f));} public Point2D(float x,float y,int color) { this((int)(x+0.5f),(int)(y+0.5f),color);} public Point2D(double x,double y) { this((float) x,(float) y);} public Point2D(double x,double y,int color) { this((float) x,(float) y,color);} public Point2D(short x,short y) { super(ColorsArray.blackColorInt); this.x=x; this.y=y;} public Point2D(short x,short y,int color) { super(color); this.x=x; this.y=y;} public Point2D(Point2D p) { this(p,p.color);} public Point2D(Point2D p,int color) { super(color); this.x=p.x; this.y=p.y;} public void represent(Matrix2D matrix) { matrix.addPoint(this);} public void toPen(CanvasAdapter ics,PaintAdapter pn) { ics.drawPoint(x,y,pn);} public void shift(Vector3 shVect) { if(shVect.hasX()) this.x+=shVect.dx; if(shVect.hasY()) this.y+=shVect.dy;} public void moveTo(Point2D newLoc) { this.x=newLoc.x; this.y=newLoc.y;} public void moveTo(Point3D newLoc) { this.x=newLoc.x; this.y=newLoc.y;} public void moveTo(int newX,int newY) { this.x=newX; this.y=newY;} public void moveTo(float newX,float newY) { this.x=(int)(newX+0.5f); this.y=(int)(newY+0.5f);} public void moveTo(double newX,double newY) { moveTo((float) newX,(float) newY);} public void moveTo(short newX,short newY) { this.x=newX; this.y=newY;} public void moveTo(int newX,int newY,int newZ) { this.x=newX; this.y=newY;} public void moveTo(float newX,float newY,float newZ) { this.x=(int)(newX+0.5f); this.y=(int)(newY+0.5f);} public void moveTo(double newX,double newY,double newZ) { moveTo((float) newX,(float) newY);} public void moveTo(short newX,short newY,short newZ) { this.x=newX; this.y=newY;} public int getX() { return x;} public void setX(int x) { this.x=x;} public int dx(Point2D p) { return x > p.x ? x-p.x : p.x-x;} public int getY() { return y;} public void setY(int y) { this.y=y;} public int dy(Point2D p) { return y > p.y ? y-p.y : p.y-y;} public Line2D line(Point2D p) { return new Line2D(this,p,Color.middleColor(this,p));} public Triangle2D triangle(Line2D line) { return new Triangle2D(this,line,Color.middleColor(this,line));} public Triangle2D triangle(Point2D p,Point2D p2) { return new Triangle2D(this,p,p2,Color.middleColor(this,p,p2));} public Circle2D circle(Point2D conturePoint) { Circle2D result=new Circle2D(this,this.distance(conturePoint),Color.middleColor(this,conturePoint)); return result;} public Circle2D circle(int r) { Circle2D result=new Circle2D(this,r,color); return result;} public double distance(Point2D p) { return Math.sqrt((long) dx(p) *(long) dx(p)+(long) dy(p) *(long) dy(p));} public double distance(Line2D side) { double dist1=distance(side.getP1()); double dist2=distance(side.getP2()); double height=new Triangle2D(this,side).height(this); if(height <= dist1 && height <= dist2) return height; return dist1 <= dist2 ? dist1 : dist2;} public Point2D middleDistancePoint(Point2D p) { Point2D result=new Line2D(this,p).midpoint(); return result;} public int ic() { return getColor();} public boolean belongs(Line2D line) { boolean result=line.getP1().distance(this)+line.getP2().distance(this)==line.length(); return result;} public boolean belongs(Circle2D circle) { boolean result=circle.center.distance(this) <= circle.r; return result;} public boolean belongs(Rectangle2D rectangle) { if(x >= rectangle.uc.x && x <= rectangle.uc.x+rectangle.width) if(y >= rectangle.uc.y && y <= rectangle.uc.y+rectangle.height) return true; return false;} public boolean belongs(Triangle2D triangle) { Line2D AB=triangle.AB(); Line2D BC=triangle.BC(); Line2D AC=triangle.AC(); double areaSum=triangle.area(); Triangle2D firstPart=new Triangle2D(this,AB); Triangle2D secondPart=new Triangle2D(this,BC); Triangle2D thirdPart=new Triangle2D(this,AC); if(firstPart.area()+secondPart.area()+thirdPart.area() <= areaSum+1) return true; return false;} public boolean belongs(FourCornersConture2D fc) { Triangle2D first=new Triangle2D(fc.getP1(),fc.getP3(),fc.getP2()); Triangle2D second=new Triangle2D(fc.getP1(),fc.getP3(),fc.getP4()); if(belongs(first)) return true; return belongs(second);} public String toString() { return "Point("+x+","+y+")";} public void update(Point2D point) { this.moveTo(point);} public Point2D labelA(int between) { Point2D labelPoint=Vector3.shiftX(between).getShiftedCopy(this); return labelPoint;}}