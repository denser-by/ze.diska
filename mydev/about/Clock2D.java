package mydev.about; import java.util.Date; public class Clock2D extends Circle2D { final static int cMinBg=Color.rgb(255,255,255); static final int cMinText=Color.rgb(0,0,111); final static int cMinBorder=Color.rgb(255,0,0); static final int cClockBg=cMinText; protected Circle2D cInt; protected Circle2D cIntCircle; protected Circle2D cExt; protected Circle2D cExtCircle; protected Clock2DTextHours2D textHours; protected Clock2DTextMinutes2D textMinutes; protected Clock2DTextSeconds2D textSeconds; protected Time ast; public Clock2D(Point2D center,int r) { super(center,r,cClockBg); this.ast=Time.current(); this.cInt=new Circle2D(center,10,cMinBg,true); this.cIntCircle=new Circle2D(center,10,cMinBorder,false); this.cExt=new Circle2D(center,r,cClockBg,true); this.cExtCircle=new Circle2D(center,r,cMinBorder,false); this.textHours=new Clock2DTextHours2D(center.getX(),center.getY(),r,ast,this); this.textMinutes=new Clock2DTextMinutes2D(center.getX(),center.getY(),r,ast,this); this.textSeconds=new Clock2DTextSeconds2D(center.getX(),center.getY(),r,ast,this);} public Clock2D(Point2D center,float r) { this(center,(int)(r+0.5f));} public Clock2D(Point2D center,short r) { this(center,(int) r);} public Clock2D(Circle2D circle) { this(circle.getCenter(),circle.getR());} public void represent(Matrix2D matrix) { cExt.represent(matrix); textHours.represent(matrix); textMinutes.represent(matrix); textSeconds.represent(matrix); cInt.represent(matrix); cIntCircle.represent(matrix); cExtCircle.represent(matrix);} public void toPen(Canvas ics,Paint pn) { cExt.toPen(ics,pn.select(cExt)); textHours.toPen(ics,pn.select(textHours)); textMinutes.toPen(ics,pn.select(textMinutes)); textSeconds.toPen(ics,pn.select(textSeconds)); cInt.toPen(ics,pn.select(cInt)); cIntCircle.toPen(ics,pn.select(cIntCircle)); cExtCircle.toPen(ics,pn.select(cExtCircle));} public void setFill(boolean fill) { super.setFill(false);} static TextSizeHolder textSizeHolder=new TextSizeHolder(0);} class Clock2DTextDim { short cx; short cy; public Clock2DTextDim(int cx,int cy) { this.cx=(short) cx; this.cy=(short) cy;} public Clock2DTextDim(Rect r) { this.cx=mod(r.getRightX(),r.getLeftX()); this.cy=mod(r.getBottomY(),r.getTopY());} public short mod(int a,int b) { if(a >= b) return(short)(a-b); return(short)(b-a);} public short getCx() { return cx;} public short getCy() { return cy;} public String toString() { return "Clock2DTextDim [cx="+cx+", cy="+cy+"]";}} class Clock2DTextHours2D extends Clock2DTextTime2D { public Clock2DTextHours2D(int x,int y,int r,Time ast,Clock2D clockRef) { super(x,y,r,ast,clockRef);} void makeText(Paint pn,Canvas cz) { String buf=ast.prepareHours(); Rect rText=new Rect(); pn.getTextBounds(buf,0,buf.length()-1,rText); Clock2DTextDim sz=new Clock2DTextDim(rText); cz.drawText(buf,ast.hh % 12 > 6 && ast.hh % 12 <= 12 ? 1 : fwz-sz.cx-1,(fhz-sz.cy) / 2,pn);} public void represent(Matrix2D matrix) { matrix.addText(this);} public void toPen(Canvas ics,Paint pn) { ics.drawText(""+ast.hh,c.getX(),c.getY(),pn);}} class Clock2DTextMinutes2D extends Clock2DTextTime2D { public Clock2DTextMinutes2D(int x,int y,int r,Time ast,Clock2D clockRef) { super(x,y,r,ast,clockRef);} void makeText(Paint pn,Canvas cz) { String buf=ast.prepareMinutes(); Rect rText=new Rect(); pn.getTextBounds(buf,0,buf.length()-1,rText); Clock2DTextDim sz=new Clock2DTextDim(rText); cz.drawText(buf,ast.mm > 30 && ast.mm <= 60 ? 1 : fwz-sz.cx-1,(fhz-sz.cy) / 2,pn);} public void represent(Matrix2D matrix) { matrix.addText(this);} public void toPen(Canvas ics,Paint pn) { ics.drawText(""+ast.mm,c.getX(),c.getY(),pn);}} class Clock2DTextSeconds2D extends Clock2DTextTime2D { public Clock2DTextSeconds2D(int x,int y,int r,Time ast,Clock2D clockRef) { super(x,y,r,ast,clockRef);} void makeText(Paint pn,Canvas cz) { String buf=ast.prepareSeconds(); Rect rText=new Rect(); pn.getTextBounds(buf,0,buf.length()-1,rText); Clock2DTextDim sz=new Clock2DTextDim(rText); cz.drawText(buf,ast.ss > 30 && ast.ss <= 60 ? 1 : fwz-sz.cx-1,(fhz-sz.cy) / 2,pn);} public void represent(Matrix2D matrix) { matrix.addText(this);} public void toPen(Canvas ics,Paint pn) { ics.drawText(""+ast.ss,c.getX(),c.getY(),pn);}} abstract class Clock2DTextTime2D extends Colorfull { final static short SPSPS=6; final static short fwz=111; final static short fhz=22; int[] pvzh; Point2D c; int r; Time ast; Clock2D refClock; public Clock2DTextTime2D(int x,int y,int r,Time ast,Clock2D refClock) { super(Clock2D.cMinBg); this.pvzh=new int[fwz * fhz]; this.c=new Point2D(x,y,color); this.r=r; this.ast=ast; this.refClock=refClock;} abstract void makeText(Paint pn,Canvas cz); int frefTextSize(Paint pn) { int getted=refClock.textSizeHolder.get(); if(getted==0) { int tmpSize=5; String buf="Seconds"; Clock2DTextDim sz; do { pn.setTextSize(++tmpSize); Rect rText=new Rect(); pn.getTextBounds(buf,0,buf.length()-1,rText); sz=new Clock2DTextDim(rText);} while(sz.cx <= fwz && sz.cy <= fhz); getted=tmpSize-1; refClock.textSizeHolder.set(getted);} return getted;} public void update(Paint pn) { Bitmap bitmap=new Bitmap(fwz,fhz,Clock2D.cMinBg,Clock2D.cMinBorder,pn.comp); Canvas cz=new Canvas(bitmap); pn.setTextSize(frefTextSize(pn)); pn.setColor(Clock2D.cMinText); makeText(pn,cz); bitmap.getPixels(pvzh,0,fwz,0,0,fwz,fhz); drawRect(pvzh,fwz,fhz,Clock2D.cMinBorder);} void drawRect(int[] m,int w,int h,int c) { for(int i=0; i < w; i++) { m[0 * w+i]=c; m[(h-1) * w+i]=c;} for(int i=0; i < h; i++) { m[i * w+0]=c; m[i * w+w-1]=c;}} public String toString() { return "Clock2DTextTime2D [pvzh="+pvzh+", c="+c+", r="+r+", ast="+ast+", refClock="+refClock+"]";}} class TextSizeHolder { private int textSize=0; public TextSizeHolder(int textSize) { super(); this.textSize=textSize;} public synchronized int get() { return textSize;} public synchronized void set(int ts) { this.textSize=ts;}} class Time { int hh; int mm; int ss; Time(int hh,int mm,int ss) { this.hh=hh; this.mm=mm; this.ss=ss;} public static Time current() { Date dt=new Date(); return new Time(dt.getHours(),dt.getMinutes(),dt.getSeconds());} private String wrap(int x) { String result=""+x; if(result.length() < 2) result="0"+result; return result;} public String prepareHours() { String hrs=""+hh; if(hrs.equalsIgnoreCase("0")) hrs="12"; String dim=" "; if(hh !=(hh / 2) * 2) dim="  "; if(hh % 12 > 6 && hh % 12 <= 12) return hrs+dim+"hours "; return "Hours"+dim+hrs+" ";} public String prepareMinutes() { String min=""+mm; if(min.equalsIgnoreCase("0")) min="60"; String dim=" "; if(mm !=(mm / 2) * 2) dim="  "; if(mm > 30 && mm <= 60) return min+dim+"minutes "; return "Minutes"+dim+min+" ";} public String prepareSeconds() { String sec=""+ss; if(sec.equalsIgnoreCase("0")) sec="60"; String dim=" "; if(ss !=(ss / 2) * 2) dim="  "; if(ss > 30 && ss <= 60) return sec+dim+"seconds "; return "Seconds"+dim+sec+" ";} public String toString() { return "Time [hh="+hh+", mm="+mm+", ss="+ss+"]";}} class Rect { protected short leftX; protected short topY; protected short rightX; protected short bottomY; public Rect() { super();} public Rect(short startX,short startY,short width,short height) { super(); this.leftX=startX; this.topY=startY; this.rightX=(short)(startX+width); this.bottomY=(short)(startY+height);} public String toString() { return "Rect [leftX="+leftX+", topY="+topY+", rightX="+rightX+", bottomY="+bottomY+"]";} public short getLeftX() { return leftX;} public short getTopY() { return topY;} public short getRightX() { return rightX;} public short getBottomY() { return bottomY;} public void update(int textBufWidth,int textBufHeight) { rightX=(short)(leftX+textBufWidth); bottomY=(short)(topY+textBufHeight);} public void update(int startX,int startY,int textBufWidth,int textBufHeight) { leftX=(short) startX; topY=(short) startY; update(textBufWidth,textBufHeight);}}