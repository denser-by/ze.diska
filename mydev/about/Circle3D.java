package mydev.about; public class Circle3D extends FillFullable implements Reposition { protected Point3D center; protected int r; protected Plane3D plane; public Circle3D(Point3D center,int r,Plane3D plane) { this(center,r,plane,center.color,false);} public Circle3D(Point3D center,int r,Plane3D plane,int color) { this(center,r,plane,color,false);} public Circle3D(Point3D center,int r,Plane3D plane,int color,boolean solid) { super(color,solid); this.center=center; this.r=r; this.plane=plane;} public Circle3D(Point3D center,float r,Plane3D plane) { this(center,(int)(r+0.5f),plane,center.color);} public Circle3D(Point3D center,float r,Plane3D plane,int color) { this(center,(int)(r+0.5f),plane,color);} public Circle3D(Point3D center,float r,Plane3D plane,int color,boolean solid) { this(center,(int)(r+0.5f),plane,color,solid);} public Circle3D(Point3D center,double r,Plane3D plane) { this(center,(float) r,plane,center.color);} public Circle3D(Point3D center,double r,Plane3D plane,int color) { this(center,(float) r,plane,color);} public Circle3D(Point3D center,double r,Plane3D plane,int color,boolean solid) { this(center,(float) r,plane,color,solid);} public Circle3D(Point3D center,short r,Plane3D plane) { this(center,(int) r,plane,center.color);} public Circle3D(Point3D center,short r,Plane3D plane,int color) { this(center,(int) r,plane,color);} public Circle3D(Point3D center,short r,Plane3D plane,int color,boolean solid) { this(center,(int) r,plane,color,solid);} public Circle3D(Circle3D c) { this(c.center,c.r,c.plane,c.color,c.full);} public void represent(Matrix2D matrix) { matrix.addCircle3D(this);} public void toPenSolid(Canvas ics,Paint pn) { ics.fillCircle3D(center,r,plane,pn);} public void toPenConture(Canvas ics,Paint pn) { ics.drawCircle3D(center,r,plane,pn);} public void shift(Vector3 shVect) { center.shift(shVect);} public void moveTo(Point2D newLoc) { center.moveTo(newLoc);} public void moveTo(Point3D newLoc) { center.moveTo(newLoc);} public void moveTo(int newX,int newY) { center.moveTo(newX,newY);} public void moveTo(float newX,float newY) { center.moveTo(newX,newY);} public void moveTo(double newX,double newY) { center.moveTo(newX,newY);} public void moveTo(short newX,short newY) { center.moveTo(newX,newY);} public void moveTo(int newX,int newY,int newZ) { center.moveTo(newX,newY,newZ);} public void moveTo(float newX,float newY,float newZ) { center.moveTo(newX,newY,newZ);} public void moveTo(double newX,double newY,double newZ) { center.moveTo(newX,newY,newZ);} public void moveTo(short newX,short newY,short newZ) { center.moveTo(newX,newY,newZ);} public int getR() { return r;} public void setR(int r) { this.r=r;} public Point3D getCenter() { return center;} public Plane3D getPlane() { return plane;} public String toString() { return "Circle3D("+center+", "+r+", "+plane+")";} public boolean intersects(Circle3D circle) { if(r+circle.r >= center.distance(circle.center)) return true; return false;} public boolean isInside(Point3D point) { return point.belongs(plane) && center.distance(point) <= r;} public boolean intersects(Line3D line) { Triangle3D tri=new Triangle3D(center,line); double centerHeight=tri.height(center); Point3D p1=line.getP1(); Point3D p2=line.getP2(); if(isInside(p1) && !isInside(p2)) return true; else if(!isInside(p1) && isInside(p2)) return true; else if(!isInside(p1) && !isInside(p2)) return centerHeight <= r; return false;}}