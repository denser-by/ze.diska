package mydev.about; import mydev.vutils.Queue; public class GridPlaneLinears extends PlaneLinears { final static int GS=5; private int gridColor; private Line2D[] lineArray; public GridPlaneLinears(int screenWidth,int screenHeight,int color,int proxyColor) { super(screenWidth,screenHeight,color); this.gridColor=Color.middleColor(Color.middleColor(Color.middleColor(Color.middleColor(color,proxyColor),proxyColor),proxyColor),proxyColor);} public void represent(Matrix2D matrix) { super.represent(matrix);} public void toPen(CanvasAdapter ics,PaintAdapter pn) { if(lineArray==null) createLineArray(); for(int i=0; i < lineArray.length; i++) { Line2D dis=lineArray[i]; dis.toPen(ics,pn.select(dis));} super.toPen(ics,pn);} void createLineArray() { Queue lineQueue=new Queue(); for(int i=0; i < screenWidth; i+=GS) { Line2D x12=new Line2D(new Point2D(i,0),new Point2D(i,screenHeight),gridColor); lineQueue.enqueueQueueRecord(x12);} for(int i=0; i < screenHeight; i+=GS) { Line2D y12=new Line2D(new Point2D(0,i),new Point2D(screenWidth,i),gridColor); lineQueue.enqueueQueueRecord(y12);} Object[] queueRecordsArray=lineQueue.getQueueRecordsArray(); lineArray=new Line2D[queueRecordsArray.length]; for(int i=0; i < lineArray.length; i++) lineArray[i]=(Line2D) queueRecordsArray[i];} public void notifyNewSize(short screenWidth,short screenHeight) { super.notifyNewSize(screenWidth,screenHeight); createLineArray();}}