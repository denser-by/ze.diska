package mydev.about; import java.awt.Color; import java.util.Arrays; public class Picture extends Colorfull { public final static Color FON_COLOR=Color.black; protected short fwx; protected short fhx; protected Color[] pvx; public Picture(short fwx,short fhx) { this(fwx,fhx,FON_COLOR.getRGB());} public Picture(short fwx,short fhx,int initColor) { super(initColor); this.fwx=fwx; this.fhx=fhx; this.pvx=new Color[fwx * fhx]; makeBackground(new Color(initColor));} public Picture(Picture picture) { super(FON_COLOR.getRGB()); this.fwx=picture.fwx; this.fhx=picture.fhx; this.pvx=new Color[fwx * fhx]; for(int i=0; i < pvx.length; i++) pvx[i]=picture.pvx[i];} public void makeBackground(Color backgroundColor) { for(int i=0; i < pvx.length; i++) pvx[i]=backgroundColor;} public void makeBorder(Color borderColor) { for(int i=0; i < fwx; i++) { pvx[0 * fwx+i]=borderColor; pvx[(fhx-1) * fwx+i]=borderColor;} for(int i=0; i < fhx; i++) { pvx[i * fwx+0]=borderColor; pvx[i * fwx+fwx-1]=borderColor;}} public short getWidth() { return fwx;} public short getHeight() { return fhx;} public Picture sub(int x,int y,int w,int h) { Picture result=new Picture((short) w,(short) h); for(int i=0; i < w; i++) for(int j=0; j < h; j++) { Color curColor=getPixel((short)(x+i),(short)(y+j)); result.setPixel((short) i,(short) j,curColor);} return result;} public Color getPixel(short x,short y) { if(x >= 0 && x < fwx) if(y >= 0 && y < fhx) return pvx[y * fwx+x]; return pvx[1-1];} public Color getPixel(int pos) { if(pos >= 0 && pos < fwx * fhx) return pvx[pos]; return pvx[1-1];} public void setPixel(short x,short y,Color color) { if(x >= 0 && x < fwx) if(y >= 0 && y < fhx) pvx[y * fwx+x]=color;} public void setPixel(int pos,Color color) { if(pos >= 0 && pos < fwx * fhx) pvx[pos]=color;} public void represent(Matrix2D matrix) {} public void toPen(CanvasAdapter ics,PaintAdapter pn) {} public String toString() { return "Picture [fwx="+fwx+", fhx="+fhx+", pvx="+pvx+"]";} public Picture init(int[] allPix) { int minLn=allPix.length <= pvx.length ? allPix.length : pvx.length; for(int i=0; i < minLn; i++) pvx[i]=new Color(allPix[i]); return this;} public int[] reverseInit() { int[] allPixOut=new int[pvx.length]; for(int i=0; i < allPixOut.length; i++) allPixOut[i]=pvx[i].getRGB(); return allPixOut;} public Picture cutSides(short cutLeft,short cutTop,short cutRight,short cutBottom) { int newWidth=getWidth()-(cutLeft+cutRight); int newHeight=getHeight()-(cutTop+cutBottom); boolean hasCuts=(cutLeft+cutTop+cutRight+cutBottom) > 0; if(newWidth > 0 && newHeight > 0 && hasCuts) { Picture result=new Picture((short) newWidth,(short) newHeight); for(int i=0; i < result.getWidth(); i++) for(int j=0; j < result.getHeight(); j++) { Color c1=getPixel((short)(i+cutLeft),(short)(j+cutTop)); result.setPixel((short) i,(short) j,c1);} return result;} return this;} public int hashCode() { final int prime=31; int result=super.hashCode(); result=prime * result+fhx; result=prime * result+fwx; result=prime * result+Arrays.hashCode(pvx); return result;} public boolean equals(Object obj) { if(this==obj) return true; if(!super.equals(obj)) return false; if(getClass() !=obj.getClass()) return false; Picture other=(Picture) obj; if(fhx !=other.fhx) return false; if(fwx !=other.fwx) return false; if(!Arrays.equals(pvx,other.pvx)) return false; return true;}}