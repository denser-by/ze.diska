package mydev.about; public abstract class Colorfull implements Pencil { protected int color; public Colorfull(int color) { this.color=color;} public Colorfull(Color color) { this.color=color.rgb();} public int getColor() { return color;} public void setColor(int color) { this.color=color;} public int min(int a,int b,int c,int d) { int res=a; if(b < res) res=b; if(c < res) res=c; if(d < res) res=d; return res;} public int max(int a,int b,int c,int d) { int res=a; if(b > res) res=b; if(c > res) res=c; if(d > res) res=d; return res;} public int min(int a,int b) { int res=a; if(b < res) res=b; return res;} public int max(int a,int b) { int res=a; if(b > res) res=b; return res;} public int hashCode() { final int prime=31; int result=1; result=prime * result+color; return result;} public boolean equals(Object obj) { if(this==obj) return true; if(obj==null) return false; if(getClass() !=obj.getClass()) return false; Colorfull other=(Colorfull) obj; if(color !=other.color) return false; return true;}}