package mydev.about; public class Circle2D extends FillFullable implements Reposition { protected Point2D center; protected int r; public Circle2D(Point2D center,int r) { this(center,r,center.color,false);} public Circle2D(Point2D center,int r,int color) { this(center,r,color,false);} public Circle2D(Point2D center,int r,int color,boolean solid) { super(color,solid); this.center=center; this.r=r;} public Circle2D(Point2D center,float r) { this(center,(int)(r+0.5f),center.color);} public Circle2D(Point2D center,float r,int color) { this(center,(int)(r+0.5f),color);} public Circle2D(Point2D center,float r,int color,boolean solid) { this(center,(int)(r+0.5f),color,solid);} public Circle2D(Point2D center,double r) { this(center,(float) r,center.color);} public Circle2D(Point2D center,double r,int color) { this(center,(float) r,color);} public Circle2D(Point2D center,double r,int color,boolean solid) { this(center,(float) r,color,solid);} public Circle2D(Point2D center,short r) { this(center,(int) r,center.color);} public Circle2D(Point2D center,short r,int color) { this(center,(int) r,color);} public Circle2D(Point2D center,short r,int color,boolean solid) { this(center,(int) r,color,solid);} public Circle2D(Circle2D c) { this(c.center,c.r,c.color,c.full);} public void represent(Matrix2D matrix) { matrix.addCircle(this);} public void toPenSolid(Canvas ics,Paint pn) { ics.fillCircle(center.getX(),center.getY(),r,pn);} public void toPenConture(Canvas ics,Paint pn) { ics.drawCircle(center.getX(),center.getY(),r,pn);} public void shift(Vector3 shVect) { center.shift(shVect);} public void moveTo(Point2D newLoc) { center.moveTo(newLoc);} public void moveTo(Point3D newLoc) { center.moveTo(newLoc);} public void moveTo(int newX,int newY) { center.moveTo(newX,newY);} public void moveTo(float newX,float newY) { center.moveTo(newX,newY);} public void moveTo(double newX,double newY) { center.moveTo(newX,newY);} public void moveTo(short newX,short newY) { center.moveTo(newX,newY);} public void moveTo(int newX,int newY,int newZ) { center.moveTo(newX,newY,newZ);} public void moveTo(float newX,float newY,float newZ) { center.moveTo(newX,newY,newZ);} public void moveTo(double newX,double newY,double newZ) { center.moveTo(newX,newY,newZ);} public void moveTo(short newX,short newY,short newZ) { center.moveTo(newX,newY,newZ);} public Point2D getCenter() { return center;} public int getR() { return r;} public void setR(int r) { this.r=r;} public void update(Point2D center,int r) { this.center.moveTo(center); this.r=r;} public void update(Point2D center,float r) { this.center.moveTo(center); this.r=(int)(r+0.5f);} public void update(Point2D center,short r) { this.center.moveTo(center); this.r=r;} public boolean equals(Object o) { if(o !=null && o instanceof Circle2D) if(center.equals(((Circle2D) o).center) && r==((Circle2D) o).r) return true; return false;} public String toString() { return "Circle("+center+", "+r+")";} public boolean intersects(Circle2D circle) { if(r+circle.r >= center.distance(circle.center)) return true; return false;} public boolean isInside(Point2D point) { return center.distance(point) <= r;} public boolean intersects(Line2D line) { Triangle2D tri=new Triangle2D(center,line); double centerHeight=tri.height(center); Point2D p1=line.getP1(); Point2D p2=line.getP2(); if(isInside(p1) && !isInside(p2)) return true; else if(!isInside(p1) && isInside(p2)) return true; else if(!isInside(p1) && !isInside(p2)) return centerHeight <= r; return false;} public Sector2D sector(int angleStart,int angleDt) { return new Sector2D(this,angleStart,angleDt);} public Sector2D sector(short angleStart,short angleDt) { return new Sector2D(this,angleStart,angleDt);} public Sector2D sector(float angleStart,float angleDt) { return new Sector2D(this,angleStart,angleDt);} public Sector2D sector(double angleStart,double angleDt) { return new Sector2D(this,angleStart,angleDt);}}