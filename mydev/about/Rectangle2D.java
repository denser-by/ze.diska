package mydev.about; public class Rectangle2D extends FillFullable implements Reposition,Decompose { protected Point2D uc; protected int width; protected int height; public Rectangle2D(int width,int height) { this(new Point2D(0,0),width,height,ColorsArray.blackColorInt,false);} public Rectangle2D(Point2D uc,int width,int height) { this(uc,width,height,uc.color,false);} public Rectangle2D(Point2D uc,int width,int height,int color) { this(uc,width,height,color,false);} public Rectangle2D(Point2D uc,int width,int height,int color,boolean solid) { super(color,solid); this.uc=uc; this.width=width; this.height=height;} public Rectangle2D(Point2D uc,float width,float height) { this(uc,(int)(width+0.5f),(int)(height+0.5f),uc.color,false);} public Rectangle2D(Point2D uc,float width,float height,int color) { this(uc,(int)(width+0.5f),(int)(height+0.5f),color,false);} public Rectangle2D(Point2D uc,float width,float height,int color,boolean solid) { this(uc,(int)(width+0.5f),(int)(height+0.5f),color,solid);} public Rectangle2D(Point2D uc,double width,double height) { this(uc,(int)(width+0.5f),(int)(height+0.5f),uc.color,false);} public Rectangle2D(Point2D uc,double width,double height,int color) { this(uc,(int)(width+0.5f),(int)(height+0.5f),color,false);} public Rectangle2D(Point2D uc,double width,double height,int color,boolean solid) { this(uc,(int)(width+0.5f),(int)(height+0.5f),color,solid);} public Rectangle2D(Point2D uc,short width,short height) { this(uc,(int) width,(int) height,uc.color,false);} public Rectangle2D(Point2D uc,short width,short height,int color) { this(uc,(int) width,(int) height,color,false);} public Rectangle2D(Point2D uc,short width,short height,int color,boolean solid) { this(uc,(int) width,(int) height,color,solid);} public Rectangle2D(Rectangle2D r) { this(r.uc,r.width,r.height,r.color,r.full);} public void represent(Matrix2D matrix) { matrix.addRectangle(this);} public void toPenSolid(Canvas ics,Paint pn) { ics.fillRect(uc.getX(),uc.getY(),width,height,pn);} public void toPenConture(Canvas ics,Paint pn) { ics.drawRect(uc.getX(),uc.getY(),width,height,pn);} public Conture2D conture() { Conture2D conture=new Conture2D(color); conture.addPoint(A()); conture.addPoint(B()); conture.addPoint(C()); conture.addPoint(D()); return conture;} public void shift(Vector3 shVect) { uc.shift(shVect);} public void moveTo(Point2D newLoc) { uc.moveTo(newLoc);} public void moveTo(Point3D newLoc) { uc.moveTo(newLoc);} public void moveTo(int newX,int newY) { uc.moveTo(newX,newY);} public void moveTo(float newX,float newY) { uc.moveTo(newX,newY);} public void moveTo(double newX,double newY) { uc.moveTo(newX,newY);} public void moveTo(short newX,short newY) { uc.moveTo(newX,newY);} public void moveTo(int newX,int newY,int newZ) { uc.moveTo(newX,newY,newZ);} public void moveTo(float newX,float newY,float newZ) { uc.moveTo(newX,newY,newZ);} public void moveTo(double newX,double newY,double newZ) { uc.moveTo(newX,newY,newZ);} public void moveTo(short newX,short newY,short newZ) { uc.moveTo(newX,newY,newZ);} public Point2D getUc() { return uc;} public int getWidth() { return width;} public void setWidth(int width) { this.width=width;} public int getHeight() { return height;} public void setHeight(int height) { this.height=height;} public void incrHeight(int dt) { height+=dt;} public void incrWidth(int dt) { width+=dt;} public void resize(int width,int height) { this.width=width; this.height=height;} public void resize(float width,float height) { this.width=(int)(width+0.5f); this.height=(int)(height+0.5f);} public void update(Point2D uc,int width,int height) { this.uc.moveTo(uc); resize(width,height);} public void update(Point2D uc,float width,float height) { this.uc.moveTo(uc); resize(width,height);} public void update(Point2D uc,short width,short height) { this.uc.moveTo(uc); resize(width,height);} public Circle2D outterCircle() { Line2D diagonal=diagLine(); Circle2D result=new Circle2D(diagonal.midpoint(),diagonal.halfLength(),color,full); return result;} public Line2D diagLine() { Vector3 diagVector=Vector3.shiftXY(width,height); Point2D rd=new Point2D(uc); rd.shift(diagVector); Line2D diagLine=new Line2D(uc,rd); return diagLine;} public Point2D getCenter() { Line2D diagonal=diagLine(); Point2D center=diagonal.midpoint(); return center;} public String toString() { return "Rectangle2D [uc="+uc+", width="+width+", height="+height+"]";} public int x() { return uc.getX();} public int y() { return uc.getY();} public int w() { return width;} public int h() { return height;} public Point2D A() { return getP1();} public Point2D B() { return getP2();} public Point2D C() { return getP3();} public Point2D D() { return getP4();} public Point2D getP1() { return uc;} public Point2D getP2() { return Vector3.shiftX(width).getShiftedCopy(uc);} public Point2D getP3() { return Vector3.shiftXY(width,height).getShiftedCopy(uc);} public Point2D getP4() { return Vector3.shiftY(height).getShiftedCopy(uc);} public Line2D AB() { return new Line2D(A(),B());} public Line2D BC() { return new Line2D(B(),C());} public Line2D CD() { return new Line2D(C(),D());} public Line2D DA() { return new Line2D(D(),A());} public Line3D[] ribs() { return null;} public Line2D[] ribsProjections() { Line2D[] result=new Line2D[4]; result[0]=AB(); result[1]=BC(); result[2]=CD(); result[3]=DA(); return result;} public Point3D[] vertices() { return null;} public Point2D[] verticesProjections() { Point2D[] result=new Point2D[4]; result[0]=A(); result[1]=B(); result[2]=C(); result[3]=D(); return result;} public Triangle3D[] planes() { return null;} public Triangle2D[] planesProjections() { return null;} public boolean isInside(Point2D point) { boolean result=point.belongs(this); return result;} public boolean intersects(Line2D line) { Point2D p1=line.getP1(); Point2D p2=line.getP2(); if(isInside(p1) && !isInside(p2)) return true; else if(!isInside(p1) && isInside(p2)) return true; Line2D[] ribsProjections=ribsProjections(); for(int i=0; i < ribsProjections.length; i++) if(ribsProjections[i].intersects(line)) return true; return false;} public double perim() { double result=0f; Line2D[] ribsProjections=ribsProjections(); for(int i=0; i < ribsProjections.length; i++) result+=ribsProjections[i].length(); return result;} public Triangle2D[] trianglesIterator(Point2D mainVertex) { Conture2D conture=conture(); Triangle2D[] trianglesIterator=conture.trianglesIterator(mainVertex); return trianglesIterator;} public Triangle2D[] midpointTriangles() { Point2D mainVertex=getCenter(); Triangle2D[] triangles=trianglesIterator(mainVertex); return triangles;} public double area() { double result=width * height; return result;} public Point2D labelA(int between) { Triangle2D tri=new Triangle2D(A(),B(),D()); Point2D labelPoint=tri.labelA(between); return labelPoint;} public Point2D labelB(int between) { Triangle2D tri=new Triangle2D(B(),C(),A()); Point2D labelPoint=tri.labelA(between); return labelPoint;} public Point2D labelC(int between) { Triangle2D tri=new Triangle2D(C(),D(),B()); Point2D labelPoint=tri.labelA(between); return labelPoint;} public Point2D labelD(int between) { Triangle2D tri=new Triangle2D(D(),A(),C()); Point2D labelPoint=tri.labelA(between); return labelPoint;} public int hashCode() { final int prime=31; int result=1; result=prime * result+height; result=prime * result+((uc==null) ? 0 : uc.hashCode()); result=prime * result+width; return result;} public boolean equals(Object obj) { if(this==obj) return true; if(obj==null) return false; if(getClass() !=obj.getClass()) return false; Rectangle2D other=(Rectangle2D) obj; if(height !=other.height) return false; if(uc==null) { if(other.uc !=null) return false;} else if(!uc.equals(other.uc)) return false; if(width !=other.width) return false; return true;}}