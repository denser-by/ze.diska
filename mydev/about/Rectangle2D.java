package mydev.about; import java.util.Enumeration; import java.util.Vector; public class Rectangle2D extends FillFullable implements Reposition,Decompose { protected Point2D uc; protected int width; protected int height; public Rectangle2D(int width,int height) { this(new Point2D(0,0),width,height,ColorsArray.blackColorInt,false);} public Rectangle2D(Point2D uc,int width,int height) { this(uc,width,height,uc.color,false);} public Rectangle2D(Point2D uc,int width,int height,int color) { this(uc,width,height,color,false);} public Rectangle2D(Point2D uc,int width,int height,int color,boolean solid) { super(color,solid); this.uc=uc; this.width=width; this.height=height;} public Rectangle2D(Point2D uc,float width,float height) { this(uc,(int)(width+0.5f),(int)(height+0.5f),uc.color,false);} public Rectangle2D(Point2D uc,float width,float height,int color) { this(uc,(int)(width+0.5f),(int)(height+0.5f),color,false);} public Rectangle2D(Point2D uc,float width,float height,int color,boolean solid) { this(uc,(int)(width+0.5f),(int)(height+0.5f),color,solid);} public Rectangle2D(Point2D uc,double width,double height) { this(uc,(int)(width+0.5f),(int)(height+0.5f),uc.color,false);} public Rectangle2D(Point2D uc,double width,double height,int color) { this(uc,(int)(width+0.5f),(int)(height+0.5f),color,false);} public Rectangle2D(Point2D uc,double width,double height,int color,boolean solid) { this(uc,(int)(width+0.5f),(int)(height+0.5f),color,solid);} public Rectangle2D(Point2D uc,short width,short height) { this(uc,(int) width,(int) height,uc.color,false);} public Rectangle2D(Point2D uc,short width,short height,int color) { this(uc,(int) width,(int) height,color,false);} public Rectangle2D(Point2D uc,short width,short height,int color,boolean solid) { this(uc,(int) width,(int) height,color,solid);} public Rectangle2D(Rectangle2D r) { this(r.uc,r.width,r.height,r.color,r.full);} public void represent(Matrix2D matrix) { matrix.addRectangle(this);} public void toPenSolid(Canvas ics,Paint pn) { ics.fillRect(uc.getX(),uc.getY(),width,height,pn);} public void toPenConture(Canvas ics,Paint pn) { ics.drawRect(uc.getX(),uc.getY(),width,height,pn);} public Conture2D conture() { Conture2D conture=new Conture2D(color); Point2D p1=new Point2D(uc); conture.addPoint(p1); Point2D p2=new Point2D(uc); p2.shift(Vector3.shiftX(width)); conture.addPoint(p2); Point2D p3=new Point2D(uc); p3.shift(Vector3.shiftXY(width,height)); conture.addPoint(p3); Point2D p4=new Point2D(uc); p4.shift(Vector3.shiftY(height)); conture.addPoint(p4); return conture;} public void shift(Vector3 shVect) { uc.shift(shVect);} public void moveTo(Point2D newLoc) { uc.moveTo(newLoc);} public void moveTo(Point3D newLoc) { uc.moveTo(newLoc);} public void moveTo(int newX,int newY) { uc.moveTo(newX,newY);} public void moveTo(float newX,float newY) { uc.moveTo(newX,newY);} public void moveTo(double newX,double newY) { uc.moveTo(newX,newY);} public void moveTo(short newX,short newY) { uc.moveTo(newX,newY);} public void moveTo(int newX,int newY,int newZ) { uc.moveTo(newX,newY,newZ);} public void moveTo(float newX,float newY,float newZ) { uc.moveTo(newX,newY,newZ);} public void moveTo(double newX,double newY,double newZ) { uc.moveTo(newX,newY,newZ);} public void moveTo(short newX,short newY,short newZ) { uc.moveTo(newX,newY,newZ);} public Point2D getUc() { return uc;} public int getWidth() { return width;} public void setWidth(int width) { this.width=width;} public int getHeight() { return height;} public void setHeight(int height) { this.height=height;} public void resize(int width,int height) { this.width=width; this.height=height;} public void resize(float width,float height) { this.width=(int)(width+0.5f); this.height=(int)(height+0.5f);} public void update(Point2D uc,int width,int height) { this.uc.moveTo(uc); resize(width,height);} public void update(Point2D uc,float width,float height) { this.uc.moveTo(uc); resize(width,height);} public void update(Point2D uc,short width,short height) { this.uc.moveTo(uc); resize(width,height);} public Circle2D extCircle() { Line2D diagonal=diagLine(); return new Circle2D(diagonal.midpoint(),diagonal.length() / 2f,color,full);} public Line2D diagLine() { Vector3 diagVector=Vector3.shiftXY(width,height); Point2D rd=new Point2D(uc); rd.shift(diagVector); Line2D diagLine=new Line2D(uc,rd); return diagLine;} public Point2D getCenter() { Line2D diagonal=diagLine(); Point2D center=diagonal.midpoint(); return center;} public boolean equals(Object o) { if(o !=null && o instanceof Rectangle2D) if(uc.equals(((Rectangle2D) o).uc) && width==((Rectangle2D) o).width && height==((Rectangle2D) o).height) return true; return false;} public String toString() { return "Rectangle("+uc+", "+width+", "+height+")";} public int x() { return uc.getX();} public int y() { return uc.getY();} public int w() { return width;} public int h() { return height;} public Enumeration ribsIterator() { Vector ribs=new Vector(); Point2D a=new Point2D(uc); a.shift(Vector3.shiftX(width)); ribs.addElement(new Line2D(uc,a)); Point2D b=new Point2D(a); b.shift(Vector3.shiftY(height)); ribs.addElement(new Line2D(a,b)); Point2D c=new Point2D(uc); c.shift(Vector3.shiftY(height)); ribs.addElement(new Line2D(b,c)); ribs.addElement(new Line2D(c,uc)); return ribs.elements();} public Enumeration verticesIterator() { Vector verts=new Vector(); verts.addElement(new Point2D(uc)); Point2D tmp=new Point2D(uc); tmp.shift(Vector3.shiftX(width)); verts.addElement(tmp); tmp=new Point2D(uc); tmp.shift(Vector3.shiftXY(width,height)); verts.addElement(tmp); tmp=new Point2D(uc); tmp.shift(Vector3.shiftY(height)); verts.addElement(tmp); return verts.elements();} public Enumeration planesIterator() { Vector planes=new Vector(); return planes.elements();} public boolean isInside(Point2D point) { boolean result=point.belongs(this); return result; } public boolean intersects(Line2D line) { Point2D p1=line.getP1(); Point2D p2=line.getP2(); if(isInside(p1) && !isInside(p2)) return true; else if(!isInside(p1) && isInside(p2)) return true; Enumeration ribsIterator=ribsIterator(); while(ribsIterator.hasMoreElements()) { Line2D side=(Line2D) ribsIterator.nextElement(); if(side.intersects(line)) return true;} return false;}}