package mydev.about; public class Line3D extends LineAbstract { protected Point3D p1; public Line3D(Point3D p1,Point3D p2) { this(p1,p2,Color.middleColor(p1,p2));} public Line3D(Point3D p1,Point3D p2,int color) { super(color); this.p1=p1; updateVector(p2);} public Line3D(Point3D p1,Vector3 v1) { this(p1,v1,p1.color);} public Line3D(Point3D p1,Vector3 v1,int color) { super(color); this.p1=p1; this.vect=v1;} public Line3D(Line3D l) { this(l,l.color);} public Line3D(Line3D l,int color) { super(l.color); this.p1=l.p1; this.vect=l.vect;} public void represent(Matrix2D matrix) { matrix.addLine(this);} public void toPen(Canvas ics,Paint pn) { Point3D p2tmp=getP2(); ics.drawLine(p1.getX(),p1.getY(),p1.getZ(),p2tmp.getX(),p2tmp.getY(),p2tmp.getZ(),pn);} protected Reposition mainPoint() { return p1;} public Point3D getP1() { return p1;} public Point3D getP2() { return vect.destination(p1);} public Vector3 updateVector(Point3D p2) { this.vect=Vector3.shift(p2,p1); return vect;} public Point3D midpoint() { return vect.half().destination(p1);} public Point3D midpointProportion(double proport) { return vect.halfLikeProportion(proport).destination(p1);} public boolean belongs(Plane3D plane) { boolean result=getP1().belongs(plane) && getP2().belongs(plane); return result;} public boolean intersects(Plane3D plane) { return false;} public Point3D getIntersect(Plane3D plane) { return null;} public boolean intersects(Line3D line) { boolean result=new Triangle3D(getP1(),line).area()+new Triangle3D(getP2(),line).area()==new Triangle3D(line.getP1(),this).area()+new Triangle3D(line.getP2(),this).area(); return result;} public Point3D findIntersection(Line3D line) { if(intersects(line)) { if(line.length() > 1 && length() > 1) { Line3D[] AA=line.halves(); Line3D[] BB=halves(); Point3D r1=AA[0].findIntersection(BB[0]); if(r1 !=null) return r1; Point3D r2=AA[0].findIntersection(BB[1]); if(r2 !=null) return r2; Point3D r3=AA[1].findIntersection(BB[0]); if(r3 !=null) return r3; Point3D r4=AA[1].findIntersection(BB[1]); if(r4 !=null) return r4;} else return new Line3D(midpoint(),line.midpoint()).midpoint();} return null;} public Line3D[] halves() { Point3D mp=midpoint(); Line3D first=new Line3D(getP1(),mp); Line3D second=new Line3D(getP2(),mp); Line3D[] result=new Line3D[1+1]; result[0]=first; result[1]=second; return result;} public boolean intersects(Cube cube) { return false;} public Point3D[] getIntersect(Cube cube) { return null;} public boolean intersects(Sphere sphere) { return sphere.intersects(this);} public Point3D[] getIntersect(Sphere sphere) { return null;} public boolean intersects(Circle3D circle) { return circle.intersects(this);} public Triangle3D triangle(Point3D point) { return new Triangle3D(point,this,getColor());} public String toString() { return "Line("+A()+", "+B()+")";} public static Line3D createLine(Point3D start,Point3D direction,long length) { Line3D result=createLine(start,direction,(double) length); return result;} public static Line3D createLine(Point3D start,Point3D direction,double length) { Line3D patternLine=new Line3D(start,direction); Vector3 ptrnVect=patternLine.getVect(); Vector3 resultVect=ptrnVect.halfLikeProportion(length / ptrnVect.module()); Point3D finish=resultVect.getShiftedCopy(start); Line3D result=new Line3D(start,finish); return result;} public Point3D A() { return getP1();} public Point3D B() { return getP2();} public Line3D AB() { return new Line3D(A(),B());} public Vector3 lineVector(Point3D startPoint) { if(startPoint.equals(p1)) return getVect(); return getBackVect();} public void update(Point3D p1,Point3D p2) { this.p1.moveTo(p1); this.vect=Vector3.shift(p2,p1);} public Point3D labelA(int between) { Vector3 abVectBack=new Line3D(A(),B()).getVect().backVector(); Vector3 reverse=abVectBack.halfLikeProportion((float) between / abVectBack.module()); Point3D labelPoint=reverse.getShiftedCopy(A()); return labelPoint;} public Point3D labelB(int between) { Vector3 baVectBack=new Line3D(B(),A()).getVect().backVector(); Vector3 reverse=baVectBack.halfLikeProportion((float) between / baVectBack.module()); Point3D labelPoint=reverse.getShiftedCopy(B()); return labelPoint;} public Line3D midSideHeight(int length) { Point3D thirdPoint=null; if(vect.dx==0) thirdPoint=Vector3.shiftX(length).getShiftedCopy(midpoint()); else if(vect.dy==0) thirdPoint=Vector3.shiftY(length).getShiftedCopy(midpoint()); else if(vect.dx==0 && vect.dy==0) return null; else { if(vect.dx > vect.dy) thirdPoint=Vector3.shiftX(A().x).getShiftedCopy(midpoint()); else thirdPoint=Vector3.shiftY(A().y).getShiftedCopy(midpoint());} Triangle3D tri=new Triangle3D(thirdPoint,this,color); Line3D triMidHeight=tri.midSideHeightAB(); Point3D linePoint=triMidHeight.midpoint(); Vector3 heightVect=triMidHeight.getVect().halfLikeProportion((double) length / triMidHeight.getVect().module()); return new Line3D(linePoint,heightVect,color);} public Line3D heightLineA(int length) { Line3D heightLine=midSideHeight(length); Vector3 shiftVect=Vector3.shift(midpoint(),B()); heightLine.shift(shiftVect); return heightLine;} public Line3D heightLineB(int length) { Line3D heightLine=midSideHeight(length); Vector3 shiftVect=Vector3.shift(midpoint(),A()); heightLine.shift(shiftVect); return heightLine;} public Line3D invect() { vect=vect.backVector(); return this;} public Line3D half() { vect=vect.half(); return this;} public Line3D doub() { vect=vect.doub(); return this;} public int hashCode() { final int prime=31; int result=super.hashCode(); result=prime * result+((p1==null) ? 0 : p1.hashCode()); return result;} public boolean equals(Object obj) { if(this==obj) return true; if(!super.equals(obj)) return false; if(getClass() !=obj.getClass()) return false; Line3D other=(Line3D) obj; if(p1==null) { if(other.p1 !=null) return false;} else if(!p1.equals(other.p1)) return false; return true;}}