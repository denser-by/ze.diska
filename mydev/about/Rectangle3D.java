package mydev.about; public class Rectangle3D extends FillFullable { protected Point3D p1; protected Point3D p2; protected Point3D p3; protected Point3D p4; public Rectangle3D(Point3D p1,Point3D p2,Point3D p3,Point3D p4) { this(p1,p2,p3,p4,ColorsArray.blackColorInt,false);} public Rectangle3D(Point3D p1,Point3D p2,Point3D p3,Point3D p4,int color) { this(p1,p2,p3,p4,color,false);} public Rectangle3D(Point3D p1,Point3D p2,Point3D p3,Point3D p4,int color,boolean solid) { super(color,solid); this.p1=p1; this.p2=p2; this.p3=p3; this.p4=p4;} public void represent(Matrix2D matrix) {} public void toPenSolid(Canvas ics,Paint pn) {} public void toPenConture(Canvas ics,Paint pn) {} public Point3D getP1() { return p1;} public Point3D getP2() { return p2;} public Point3D getP3() { return p3;} public Point3D getP4() { return p4;} public String toString() { return "Rectangle3D [p1="+p1+", p2="+p2+", p3="+p3+", p4="+p4+"]";} public Rectangle3D createParallelX(Rectangle3D leftRightWall) { int dx=leftRightWall.getP1().getX()-p1.getX(); Vector3 dxVect=Vector3.shiftX(dx); Rectangle3D result=getShiftCopy(dxVect); return result;} public Rectangle3D createParallelY(Rectangle3D topBottomWall) { int dy=topBottomWall.getP1().getY()-p1.getY(); Vector3 dyVect=Vector3.shiftY(dy); Rectangle3D result=getShiftCopy(dyVect); return result;} public Rectangle3D createParallelZ(Rectangle3D backFrontWall) { int dz=backFrontWall.getP1().getZ()-p1.getZ(); Vector3 dzVect=Vector3.shiftZ(dz); Rectangle3D result=getShiftCopy(dzVect); return result;} public Rectangle3D getShiftCopy(Vector3 dxVect) { Rectangle3D result=new Rectangle3D(dxVect.getShiftedCopy(p1),dxVect.getShiftedCopy(p2),dxVect.getShiftedCopy(p3),dxVect.getShiftedCopy(p4)); return result;}}