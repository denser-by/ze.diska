package mydev.rcv; import java.awt.Button; import java.awt.Color; import java.awt.Container; import java.awt.Event; import java.awt.FlowLayout; import java.awt.Frame; import java.awt.Label; import java.awt.List; import java.awt.Panel; import java.awt.TextField; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.OutputStream; import java.net.Socket; import java.util.Date; import java.util.Vector; import mydev.mnoga.Load; import mydev.mnoga.Save; public class Soop { public static void main(String[] args) { Frame fm=new Frame("rcv"); ExitRequest er=new ExitRequest(); PanelExpectResult per; PanelPackage pp; fm.setLayout(new FlowLayout()); fm.setBackground(Color.gray); fm.add(new Label("Chose some content sending or specify to store incoming")); PanelContent pc=new PanelContent(); fm.add(pc.initCompounds()); Provider cpc1=new ContentPathProvider(pc); pp=new PanelPackage(cpc1); fm.add(pp.initCompounds()); Provider ftp1p=new FilesTreePathProvider(pp); PanelSend panelSend=new PanelSend(ftp1p); fm.add(panelSend.initCompounds()); Provider ftrp1=new FilesTreeResProvider(pp); fm.add(new PanelExpect(ftrp1).initCompounds()); fm.add((per=new PanelExpectResult()).initCompounds()); fm.add(new PanelExit(er).initCompounds()); fm.show(); fm.resize(430,350); TaskLauncher.instance().per(per); while(!er.hasStop()) { try { Thread.sleep(700);} catch(InterruptedException e) { e.getMessage();}} fm.hide(); fm.dispose(); System.out.println("stop"); System.exit(1-1);}} class PanelContent extends Panel implements Expector { Label chDir; ExitRequest er; TextField tfContentPath; Button btnPack; public PanelContent() { super();} public String getContentPath() { return ""+tfContentPath.getText();} public void ready() { btnPack.enable(); tfContentPath.enable();} public void notReady() { btnPack.disable(); tfContentPath.disable();} public Container initCompounds() { setBackground(Color.white); chDir=new Label("Target folder:"); add(chDir); tfContentPath=new TextField("path/to/some/contents"); add(tfContentPath); btnPack=new Button("Pack"); add(btnPack); TaskLauncher.instance().addExpector(this); return this;} public boolean handleEvent(Event evt) { if(evt.id==Event.ACTION_EVENT && evt.target==btnPack) { String path=tfContentPath.getText(); TaskLauncher.instance().launchPack(path);} return super.handleEvent(evt);}} class PanelPackage extends Panel implements Expector { Label chPkg; TextField tfFilesTreePath; Button btnUnpk; Provider p1; public PanelPackage(Provider p1) { super(); this.p1=p1;} public String getFilesTreePath() { return ""+tfFilesTreePath.getText();} public void ready() { btnUnpk.enable(); tfFilesTreePath.enable();} public void notReady() { btnUnpk.disable(); tfFilesTreePath.disable();} public Container initCompounds() { setBackground(Color.white); setLayout(new FlowLayout()); chPkg=new Label("Files tree:"); add(chPkg); tfFilesTreePath=new TextField(""+new FilesTreeProvider().obtain()); add(tfFilesTreePath); btnUnpk=new Button("Unpack"); add(btnUnpk); TaskLauncher.instance().addExpector(this); return this;} public boolean handleEvent(Event evt) { if(evt.id==Event.ACTION_EVENT && evt.target==btnUnpk) { String contentDstPath=p1.provide(); TaskLauncher.instance().launchUnpack(contentDstPath);} return super.handleEvent(evt);}} class PanelExit extends Panel implements Expector { Button exitBtn; Button quitBtn; Button closeBtn; ExitRequest er; public PanelExit(ExitRequest er) { super(); this.er=er;} public void ready() { } public void notReady() { } public Container initCompounds() { setBackground(Color.white); setLayout(new FlowLayout()); exitBtn=new Button("Exit"); add(exitBtn); quitBtn=new Button("Quit"); add(quitBtn); closeBtn=new Button("Close"); add(closeBtn); return this;} public boolean handleEvent(Event evt) { if(evt.id==Event.ACTION_EVENT && evt.target==exitBtn) er.stop(); if(evt.id==Event.ACTION_EVENT && evt.target==quitBtn) er.stop(); if(evt.id==Event.ACTION_EVENT && evt.target==closeBtn) er.stop(); return super.handleEvent(evt);}} class PanelExpect extends Panel implements Expector { Label chPort; TextField tfPort; Button btnExpect; Button btnStop; Provider p1; public PanelExpect(Provider p1) { super(); this.p1=p1;} public void ready() { btnExpect.enable(); tfPort.enable();} public void notReady() { btnExpect.disable(); tfPort.disable();} public Container initCompounds() { setBackground(Color.white); setLayout(new FlowLayout()); chPort=new Label("Local port:"); add(chPort); tfPort=new TextField("6012"); add(tfPort); btnExpect=new Button("Expect"); add(btnExpect); btnStop=new Button("Stop"); add(btnStop); btnStop.disable(); TaskLauncher.instance().addExpector(this); return this;} public boolean handleEvent(Event evt) { if(evt.id==Event.ACTION_EVENT && evt.target==btnExpect) { int port=Integer.parseInt(tfPort.getText()); String filesTreePath=p1.provide(); TaskLauncher.instance().launchExpect(port,filesTreePath);} if(evt.id==Event.ACTION_EVENT && evt.target==btnStop) { closeLocalSrv();} if(evt.id==Event.ACTION_EVENT && evt.target==btnExpect) { btnStop.enable(); btnExpect.disable();} if(evt.id==Event.ACTION_EVENT && evt.target==btnStop) { btnExpect.enable(); btnStop.disable();} return super.handleEvent(evt);} private void closeLocalSrv() { try { int prt=Integer.parseInt(tfPort.getText()); Socket s1=new Socket("localhost",prt); OutputStream osx=s1.getOutputStream(); byte[] b1=new byte[1]; b1[0]=1; osx.write(b1); osx.close(); s1.close();} catch(Throwable th) { th.getMessage();}}} class PanelExpectResult extends Panel implements Expector { List activity; TextField started; TextField stopped; public PanelExpectResult() { super();} public void ready() { } public void notReady() { } public Container initCompounds() { setBackground(Color.white); setLayout(new FlowLayout()); activity=new List(); activity.addItem("Packing"); activity.addItem("Unpacking"); activity.addItem("Sending"); activity.addItem("Expecting"); activity.disable(); add(activity); started=new TextField("Started:"+" ready "); started.disable(); add(started); stopped=new TextField("Stoped:"+" ready "); stopped.disable(); add(stopped); return this;} public boolean handleEvent(Event evt) { return super.handleEvent(evt);} String tos(int sx) { String s=""+sx; if(s.length() < 2) return "0"+s; return ""+s;} public void packingLaunched() { activity.select(0); Date d1=new Date(); String dts=tos(d1.getHours())+":"+tos(d1.getMinutes())+":"+tos(d1.getSeconds()); started.setText("Started:"+dts); stopped.setText("in progress");} public void expectingLaunched() { activity.select(3); Date d1=new Date(); String dts=tos(d1.getHours())+":"+tos(d1.getMinutes())+":"+tos(d1.getSeconds()); started.setText("Started:"+dts); stopped.setText("in progress");} public void unpackingLaunched() { activity.select(1); Date d1=new Date(); String dts=tos(d1.getHours())+":"+tos(d1.getMinutes())+":"+tos(d1.getSeconds()); started.setText("Started:"+dts); stopped.setText("in progress");} public void sendingLaunched() { activity.select(2); Date d1=new Date(); String dts=tos(d1.getHours())+":"+tos(d1.getMinutes())+":"+tos(d1.getSeconds()); started.setText("Started:"+dts); stopped.setText("in progress");} public void packingCompleted() { Date d1=new Date(); String dts=tos(d1.getHours())+":"+tos(d1.getMinutes())+":"+tos(d1.getSeconds()); stopped.setText("Ready:"+dts);} public void unpackingCompleted() { Date d1=new Date(); String dts=tos(d1.getHours())+":"+tos(d1.getMinutes())+":"+tos(d1.getSeconds()); stopped.setText("Ready:"+dts);} public void sendingCompleted() { Date d1=new Date(); String dts=tos(d1.getHours())+":"+tos(d1.getMinutes())+":"+tos(d1.getSeconds()); stopped.setText("Ready:"+dts);} public void expectingCompleted() { Date d1=new Date(); String dts=tos(d1.getHours())+":"+tos(d1.getMinutes())+":"+tos(d1.getSeconds()); stopped.setText("Ready:"+dts);}} class PanelSend extends Panel implements Expector { Label chPort; Label chDstIp; Button btnSend; TextField tfPort; TextField tfAddr; Provider p1; public PanelSend(Provider p1) { super(); this.p1=p1;} public void ready() { btnSend.enable(); tfPort.enable(); tfAddr.enable();} public void notReady() { btnSend.disable(); tfPort.disable(); tfAddr.disable();} public Container initCompounds() { setBackground(Color.white); setLayout(new FlowLayout()); chPort=new Label("To port:"); add(chPort); tfPort=new TextField("6012"); add(tfPort); chDstIp=new Label("To address:"); add(chDstIp); tfAddr=new TextField("192.168.1.128"); add(tfAddr); btnSend=new Button("Send"); add(btnSend); TaskLauncher.instance().addExpector(this); return this;} public boolean handleEvent(Event evt) { if(evt.id==Event.ACTION_EVENT && evt.target==btnSend) { int port=Integer.parseInt(tfPort.getText()); String addr=tfAddr.getText(); String filesTreePath=p1.provide(); TaskLauncher.instance().launchSend(addr,port,filesTreePath);} return super.handleEvent(evt);}} class ExitRequest { boolean needStop; public ExitRequest() { super(); this.needStop=false;} public void stop() { needStop=true;} public boolean hasStop() { return needStop;}} class FilesTreeProvider { public FilesTreeProvider() { super();} public String obtain() { String s1=new File("files.tree").getAbsolutePath(); String[] ptrn=new String[2]; ptrn[0]="\\./"; ptrn[1]="/./"; int code; for(int i=0; i < ptrn.length; i++) { do { code=s1.indexOf(ptrn[i]); if(code > 0) s1=s1.substring(0,code+1)+s1.substring(code+ptrn[i].length());} while(code > 0);} return s1;}} interface Expector { Container initCompounds(); void ready(); void notReady();} class TaskLauncher { static TaskLauncher obj; Vector expectors; PanelExpectResult per; static TaskLauncher instance() { if(obj==null) obj=new TaskLauncher(); return obj;} TaskLauncher() { super(); expectors=new Vector();} public void per(PanelExpectResult per) { this.per=per;} public void addExpector(Expector ex1) { expectors.addElement(ex1);} public void launchExpect(int port,String filesTreePath) { per.expectingLaunched(); for(int i=0; i < expectors.size(); i++)((Expector) expectors.elementAt(i)).notReady(); Runnable rn=new RunnableExpecting(per,expectors); new ReceiveTask(rn,port,filesTreePath).tskStart();} public void launchPack(String path) { per.packingLaunched(); for(int i=0; i < expectors.size(); i++)((Expector) expectors.elementAt(i)).notReady(); Runnable rp=new RunnablePacking(per,expectors); new PackTask(rp,path).tskStart();} public void launchUnpack(String path) { per.unpackingLaunched(); for(int i=0; i < expectors.size(); i++)((Expector) expectors.elementAt(i)).notReady(); Runnable ru=new RunnableUnpacking(per,expectors); new UnpackTask(ru,path).tskStart();} public void launchSend(String addr,int port,String filesTreePath) { per.sendingLaunched(); for(int i=0; i < expectors.size(); i++)((Expector) expectors.elementAt(i)).notReady(); Runnable rs=new RunnableSending(per,expectors); new SendTask(rs,addr,port,filesTreePath).tskStart();}} interface Task { void tskStart(); void tskMakings(); void tskStop();} abstract class IntermTask implements Task,Runnable { boolean started; boolean completed; String t1Started; String t2Completed; String t3Stopped; Runnable last; public IntermTask(Runnable onComplete) { super(); this.started=false; this.completed=false; this.last=onComplete;} public void tskStart() { if(started==false) { started=true; new Thread(this).start(); t1Started=new Date().toString();}} public void run() { while(started) { if(completed==false) { tskMakings(); completed=true; t2Completed=new Date().toString(); if(last !=null) last.run();}}} public void tskStop() { t3Stopped=new Date().toString();}} class SendTask extends IntermTask { String addr; int port; String filesTreePath; public SendTask(Runnable onComplete,String addr,int port,String filesTreePath) { super(onComplete); this.addr=addr; this.port=port; this.filesTreePath=filesTreePath;} public void tskMakings() { try { System.out.println("attempt: "+addr+" "+port+" "+filesTreePath); MyIp.ftPath=filesTreePath; String[] args=new String[3]; args[0]="java mydev.rcv.MyIp"; args[1]=""+addr; args[2]=""+port; MyIp.main(args);} catch(Throwable th) { th.getMessage(); System.out.println("attempt fail: "+th.getMessage());} try { Thread.sleep(1000);} catch(InterruptedException e) { e.printStackTrace();}}} class ReceiveTask extends IntermTask { int localPort; String filesTreePath; public ReceiveTask(Runnable onComplete,int port,String filesTreePath) { super(onComplete); this.localPort=port; this.filesTreePath=filesTreePath;} public void tskMakings() { try { System.out.println("attempt: "+localPort+" "+filesTreePath); MyIpRcv.ftPath=filesTreePath; String[] args=new String[2]; args[0]="java mydev.rcv.MyIpRcv"; args[1]=""+localPort; MyIpRcv.main(args);} catch(Throwable th) { th.getMessage(); System.out.println("attempt fail: "+th.getMessage());} try { Thread.sleep(1000);} catch(InterruptedException e) { e.printStackTrace();} System.out.println("receiving finished");}} class UnpackTask extends IntermTask { String contentDstPath; public UnpackTask(Runnable onComplete,String ftPath) { super(onComplete); this.contentDstPath=ftPath;} public void tskMakings() { try { System.out.println("attempt: load "+contentDstPath); String[] args=new String[1]; args[0]=contentDstPath; Load.main(args);} catch(Throwable th) { th.getMessage(); System.out.println("attempt fail: "+th.getMessage());} try { Thread.sleep(1000);} catch(InterruptedException e) { e.printStackTrace();} System.out.println("attempt: load exit");}} class PackTask extends IntermTask { String contentPath; public PackTask(Runnable onComplete,String path) { super(onComplete); this.contentPath=path;} public void tskMakings() { try { System.out.println("attempt: save "+contentPath); String[] args=new String[1]; args[0]=contentPath; Save.main(args); if(1+1 <= 1-1) { String mstk=".files.tree"; if(new File(mstk).exists()) { FileInputStream is=new FileInputStream(new File(mstk)); FileOutputStream os=new FileOutputStream(new File("files.tree")); int cnt=1; while(cnt > 0) { byte[] buf=new byte[8192]; cnt=is.read(buf); if(cnt >= buf.length) os.write(buf); else if(cnt > 0) for(int i=0; i < cnt; i++) { byte[] b1=new byte[1]; b1[0]=buf[i]; os.write(b1);}} is.close(); os.close(); }}} catch(Throwable th) { th.getMessage(); System.out.println("attempt fail: "+th.getMessage());} try { Thread.sleep(1000);} catch(InterruptedException e) { e.printStackTrace();} System.out.println("attempt: save exit");}} interface Provider { String provide();} class RunnableExpecting implements Runnable { PanelExpectResult per; Vector expectors; public RunnableExpecting(PanelExpectResult per,Vector expectors) { super(); this.per=per; this.expectors=expectors;} public void run() { for(int i=0; i < expectors.size(); i++)((Expector) expectors.elementAt(i)).ready(); per.expectingCompleted();}} class RunnablePacking implements Runnable { PanelExpectResult per; Vector expectors; public RunnablePacking(PanelExpectResult per,Vector expectors) { super(); this.per=per; this.expectors=expectors;} public void run() { for(int i=0; i < expectors.size(); i++)((Expector) expectors.elementAt(i)).ready(); per.packingCompleted();}} class RunnableUnpacking implements Runnable { PanelExpectResult per; Vector expectors; public RunnableUnpacking(PanelExpectResult per,Vector expectors) { super(); this.per=per; this.expectors=expectors;} public void run() { for(int i=0; i < expectors.size(); i++)((Expector) expectors.elementAt(i)).ready(); per.unpackingCompleted();}} class RunnableSending implements Runnable { PanelExpectResult per; Vector expectors; public RunnableSending(PanelExpectResult per,Vector expectors) { super(); this.per=per; this.expectors=expectors;} public void run() { for(int i=0; i < expectors.size(); i++)((Expector) expectors.elementAt(i)).ready(); per.sendingCompleted();}} class ContentPathProvider implements Provider { PanelContent pc1; public ContentPathProvider(PanelContent pc1) { super(); this.pc1=pc1;} public String provide() { return pc1.getContentPath();}} class FilesTreePathProvider implements Provider { PanelPackage pp1; public FilesTreePathProvider(PanelPackage pp1) { super(); this.pp1=pp1;} public String provide() { return pp1.getFilesTreePath();}} class FilesTreeResProvider implements Provider { PanelPackage pp1; public FilesTreeResProvider(PanelPackage pp1) { super(); this.pp1=pp1;} public String provide() { return pp1.getFilesTreePath();}}
