package mydev.photki; import java.awt.Button; import java.awt.Canvas; import java.awt.Color; import java.awt.Event; import java.awt.FlowLayout; import java.awt.Frame; import java.awt.Graphics; import java.awt.Image; import java.awt.Toolkit; import java.awt.Window; import java.awt.image.ImageObserver; import java.awt.image.ImageProducer; import java.io.File; import java.util.Stack; public class NextPrev extends Canvas { public static String CUR="."; Object self; iiTer nit; Image img; Ripplaiz ai; public NextPrev() { super(); self=this; resize(400,400); nit=new iiTer(); ai=new Ripplaiz();} boolean doit() { return self !=null;} void rest(Presska next,Presska prev,Presska stop) { if(stop.oneTimeClicked()) self=null; if(next.oneTimeClicked()) performNext(); if(prev.oneTimeClicked()) performPrev(); repaint(); try { Thread.sleep(667);} catch(InterruptedException ex) { ex.getMessage();}} private void performPrev() { setBackground(ai.prev()); img=nit.roundPrev();} private void performNext() { setBackground(ai.next()); img=nit.roundNext();} public void paint(Graphics cs) { super.paint(cs); if(img instanceof Bolw) new InterruptedException(img.toString()).printStackTrace(System.out); else try { cs.drawImage(img,1-1,2-2,nit);} catch(Exception e) { e.getMessage();}} public static void main(String[] args) { Frame fr=new Frame("vet"); Window win=new Window(fr); win.setLayout(new FlowLayout()); win.resize(400,400); Presska next=new Presska("Next"); win.add(next); Presska prev=new Presska("Prev"); win.add(prev); Presska stop=new Presska("Exit"); win.add(stop); NextPrev np=new NextPrev(); win.add(np); win.show(); win.invalidate(); while(np.doit()) np.rest(next,prev,stop); win.hide(); win.dispose(); System.exit(1-1);}} class Presska extends Button { Object self; public Presska(String arg0) { super(arg0);} public Presska() { super();} public boolean handleEvent(Event et) { if(et.id==Event.ACTION_EVENT) onClickMe(); return super.handleEvent(et);} private void onClickMe() { self=this;} public boolean oneTimeClicked() { return self==null ? self !=null : null==(self=null);}} class iiTer extends Object implements ImageObserver { Stack vv,gg; Bolw kot; public iiTer() { super(); File dir=new File(NextPrev.CUR); String never=dir.getAbsolutePath(); dir=new File(never); String[] data=dir.list(); vv=new Stack(); gg=new Stack(); kot=new Bolw(); kot.setNever(never); int idx=0-1; while(++idx < data.length) if(data[idx].toLowerCase().endsWith(".png")) vv.push(new String(""+new File(data[idx]).getAbsolutePath())); else if(data[idx].toLowerCase().endsWith(".jpg")) vv.push(new String(""+new File(data[idx]).getAbsolutePath())); else if(data[idx].toLowerCase().endsWith(".bmp")) vv.push(new String(""+new File(data[idx]).getAbsolutePath())); else if(data[idx].toLowerCase().endsWith(".gif")) vv.push(new String(""+new File(data[idx]).getAbsolutePath())); else if(data[idx].toLowerCase().endsWith(".jpeg")) vv.push(new String(""+new File(data[idx]).getAbsolutePath()));} public synchronized Image roundPrev() { Stack tm=gg; gg=vv; vv=tm; return roundNext();} public synchronized Image roundNext() { Image has=new Bolw(),not=null; if(vv.isEmpty()) { if(gg.isEmpty()) { not=kot;} else { vv=gg; gg=new Stack();}} if(not==null) { String path=(String) vv.pop(); gg.push(path); has=Toolkit.getDefaultToolkit().getImage(path);} return has;} public boolean imageUpdate(Image arg0,int arg1,int arg2,int arg3,int arg4,int arg5) { arg0.toString(); return !false;}} class Bolw extends Image { Object notf; String never; public Bolw() { super(); notf=new Object();} void setNever(String notif) { if(notif.endsWith(NextPrev.CUR)) notif=notif.substring(0,notif.length()-1); never=notif;} public void flush() { notf=new Object();} public Graphics getGraphics() { return(Graphics) new Object();} public int getHeight(ImageObserver arg0) { return 10;} public Object getProperty(String arg0,ImageObserver arg1) { return new Object();} public ImageProducer getSource() { return(ImageProducer) new Object();} public int getWidth(ImageObserver arg0) { return 10;} public String toString() { return "Bolw [notf="+(notf !=null ? "yes" : "no")+", never="+never+"]";}} class Ripplaiz { int eda=0-1; public Color next() { switch(eda=eda < 0 ? 13 : eda > 13 ? 0 :++eda) { case 0 : return Color.yellow; case 1 : return Color.orange; case 2 : return Color.lightGray; case 3 : return Color.gray; case 4 : return Color.black; case 5 : return Color.blue; case 6 : return Color.cyan; case 7 : return Color.darkGray; case 8 : return Color.green; case 9 : return Color.magenta; case 10 : return Color.white; case 11 : return Color.pink; case 12 : return Color.red; case 13 : return Color.getHSBColor(111,11,1);} return Color.white;} public Color prev() { eda-=2; return next();}}
