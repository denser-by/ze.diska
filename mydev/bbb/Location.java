package mydev.bbb; import java.awt.Dimension; import java.awt.Point; import java.awt.Toolkit; import java.util.Date; import mydev.vutils.Queue; public class Location { public static int MAIN_WINDOWS_WIDTH=1024; public static int MAIN_WINDOWS_HEIGHT=768; public static int MAIN_WINDOWS_WIDTH_LARGE=1920; public static int MAIN_WINDOWS_HEIGHT_LARGE=1080; public static final short MAX_ATTEMPTS=(short)(10 * 10 * 10 / 10 / 10); static short screenWidth=640; static short screenHeight=480; protected Queue ready; public Location() { super(); this.ready=new Queue();} public void readyClean() { ready.clearQueue();} public static void regInternalSize(int width,int height) { screenWidth=(short) width; screenHeight=(short) height;} public Point getRandomInternalPos(short wndWidth,short wndHeight) { return getRandomInternalPos(wndWidth,wndHeight,screenWidth,screenHeight);} public Point getRandomInternalPos(short wndWidth,short wndHeight,short screenWidth,short screenHeight) { int count=MAX_ATTEMPTS; boolean inter; Point pt; do { pt=getRandomInternalPosRetry(wndWidth,wndHeight,screenWidth,screenHeight); inter=findReadyIntersect(pt,wndWidth,wndHeight);} while(inter && count--> 0); ready.enqueueQueueRecord(pt); return pt;} protected boolean findReadyIntersect(Point oknoBegin,short wndWidth,short wndHeight) { boolean result=false; Point[] p1234=new Point[1+1+1+1]; p1234[0]=new Point(oknoBegin.x,oknoBegin.y); p1234[0+1]=new Point(oknoBegin.x+wndWidth,oknoBegin.y); p1234[0+1+1]=new Point(oknoBegin.x,oknoBegin.y+wndHeight); p1234[0+1+1+1]=new Point(oknoBegin.x+wndWidth,oknoBegin.y+wndHeight); Queue iter=ready.quickQueueCopy(); while(!result && iter.sizeOfQueue() > 0) { Point rw=(Point) iter.dequeueQueueRecord(); for(int j=0; !result && j < p1234.length; j++) if(p1234[j].x >= rw.x && p1234[j].x <= rw.x+wndWidth && p1234[j].y >= rw.y && p1234[j].y <= rw.y+wndHeight) result=true;} return result;} Point getRandomInternalPosRetry(short wndWidth,short wndHeight,short screenWidth,short screenHeight) { long t1=(long)(new Date().getTime() * Math.random()); long t2=(long)(new Date().getTime() * Math.random()); Point pt=new Point(1-1,1-1); short dx=(short)(screenWidth-wndWidth); short dy=(short)(screenHeight-wndHeight); if(dx < 1) dx=1; if(dy < 1) dy=1; pt.x=(int)(t1-t1 / dx * dx); pt.y=(int)(t2-t2 / dy * dy); return pt;} public Point getRandomExternalPos(short wndWidth,short wndHeight) { Dimension s=Toolkit.getDefaultToolkit().getScreenSize(); Point pt=getRandomInternalPos(wndWidth,wndHeight,(short) s.width,(short) s.height); return pt;}}