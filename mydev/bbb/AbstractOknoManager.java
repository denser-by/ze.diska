package mydev.bbb; import java.awt.Point; import mydev.aaa.Okno; import mydev.aaa.Slipstream; import mydev.aaa.Stop; import mydev.vutils.Queue; public abstract class AbstractOknoManager { Queue windows=new Queue(); public void addOkno(Okno okno) { windows.enqueueQueueRecord(okno);} public Okno getOkno(int idx) { return(Okno) windows.getQueueRecord(idx);} public Okno getOkno(String wndId) { Queue iter=windows.quickQueueCopy(); while(iter.sizeOfQueue() > 0) { Okno wnd=(Okno) iter.dequeueQueueRecord(); if(((Identifiable) wnd).checkWndId(wndId)) return wnd;} return null;} public void updateCommonWidthHeightAllWindows(short commonWidth,short commonHeight) { Queue iter=windows.quickQueueCopy(); while(iter.sizeOfQueue() > 0) { Okno wnd=(Okno) iter.dequeueQueueRecord(); wnd.size(commonWidth,commonHeight);}} public void saveCloseAllWindows() { Slipstream slipstream=Enter2.instance().slipstream(); Queue iter=windows.quickQueueCopy(); while(iter.sizeOfQueue() > 0) { Okno wnd=(Okno) iter.dequeueQueueRecord(); slipstream.push(wnd.finish());} windows.clearQueue();} public void repositionInternal() { Location ol=Enter2.instance().location(); short mw=10; short mh=10; Queue iter=windows.quickQueueCopy(); while(iter.sizeOfQueue() > 0) { Okno wnd=(Okno) iter.dequeueQueueRecord(); BOknoFrame frame=new BOknoFrame(); frame.recall(wnd.memo()); if(mw < frame.w) mw=frame.w; if(mh < frame.h) mh=frame.h;} iter=windows.quickQueueCopy(); while(iter.sizeOfQueue() > 0) { Okno wnd=(Okno) iter.dequeueQueueRecord(); Point p=ol.getRandomInternalPos(mw,mh); wnd.move((short) p.x,(short) p.y);}} public void repositionExternal(Stop ka) { hideAllWindows(); reloadInternal(ka); Location ol=Enter2.instance().location(); short mw=10; short mh=10; Queue iter=windows.quickQueueCopy(); while(iter.sizeOfQueue() > 0) { BOkno wnd=(BOkno) iter.dequeueQueueRecord(); BOknoFrame frame=new BOknoFrame(); frame.recall(wnd.memo()); if(mw < frame.w) mw=frame.w; if(mh < frame.h) mh=frame.h;} iter=windows.quickQueueCopy(); while(iter.sizeOfQueue() > 0) { BOkno wnd=(BOkno) iter.dequeueQueueRecord(); Point p=ol.getRandomExternalPos(mw,mh); wnd.move((short) p.x,(short) p.y);} hideAllWindows(); reloadExternal();} public abstract void reloadInternal(Stop ka); public abstract void hideAllWindows(); public abstract void reloadExternal(); public abstract void reset();}