package mydev.csprofile; import mydev.about.CanvasAdapter; import mydev.about.ColorsArray; import mydev.about.Matrix2D; import mydev.about.PaintAdapter; import mydev.cs.Bounds; import mydev.cs.ConturePlane; import mydev.cs.PlaneType; import mydev.cs.PlanesProfile; public class OpenFrontCubeProfile extends PlanesProfile { public OpenFrontCubeProfile(int contureColor) { super(contureColor);} public void represent(Matrix2D matrix) {} public void toPen(CanvasAdapter ics,PaintAdapter pn) {} protected ConturePlane obtainPlaneBack(int contureColor) { return new CubePlaneWrap(contureColor,new OpenFrontCubePlaneBack(contureColor,ColorsArray.orangePoint.ic()));} protected ConturePlane obtainPlaneTop(int contureColor) { return new CubePlaneWrap(contureColor,new OpenFrontCubePlaneTop(contureColor,ColorsArray.lightGrayPoint.ic()));} protected ConturePlane obtainPlaneRight(int contureColor) { return new CubePlaneWrap(contureColor,new OpenFrontCubePlaneRight(contureColor,ColorsArray.blackPoint.ic()));} protected ConturePlane obtainPlaneBottom(int contureColor) { return new CubePlaneWrap(contureColor,new OpenFrontCubePlaneBottom(contureColor,ColorsArray.lightGrayPoint.ic()));} protected ConturePlane obtainPlaneLeft(int contureColor) { return new CubePlaneWrap(contureColor,new OpenFrontCubePlaneLeft(contureColor,ColorsArray.blackPoint.ic()));} protected ConturePlane obtainPlaneFront(int contureColor) { return new CubePlaneWrap(contureColor,new OpenFrontCubePlaneFront(contureColor));}} class OpenFrontCubePlaneBack extends CubeSolidColorPlane { public OpenFrontCubePlaneBack(int borderColor,int fillColor) { super(borderColor,fillColor,PlaneType.PT_BACK);} public void update(Bounds front,Bounds back) { getP1().moveTo(back.getLeftX(),back.getTopY()); getP2().moveTo(back.getRightX(),back.getTopY()); getP3().moveTo(back.getRightX(),back.getBottomY()); getP4().moveTo(back.getLeftX(),back.getBottomY());}} class OpenFrontCubePlaneFront extends CubeConturePlane { public OpenFrontCubePlaneFront(int color) { super(color,PlaneType.PT_FRONT);} public void update(Bounds front,Bounds back) { getP1().moveTo(front.getLeftX(),front.getTopY()); getP2().moveTo(front.getRightX(),front.getTopY()); getP3().moveTo(front.getRightX(),front.getBottomY()); getP4().moveTo(front.getLeftX(),front.getBottomY());}} class OpenFrontCubePlaneLeft extends CubeSolidColorPlane { public OpenFrontCubePlaneLeft(int borderColor,int fillColor) { super(borderColor,fillColor,PlaneType.PT_LEFT);} public void update(Bounds front,Bounds back) { getP1().moveTo(front.getLeftX(),front.getTopY()); getP2().moveTo(back.getLeftX(),back.getTopY()); getP3().moveTo(back.getLeftX(),back.getBottomY()); getP4().moveTo(front.getLeftX(),front.getBottomY());}} class OpenFrontCubePlaneRight extends CubeSolidColorPlane { public OpenFrontCubePlaneRight(int borderColor,int fillColor) { super(borderColor,fillColor,PlaneType.PT_RIGHT);} public void update(Bounds front,Bounds back) { getP1().moveTo(front.getRightX(),front.getTopY()); getP2().moveTo(back.getRightX(),back.getTopY()); getP3().moveTo(back.getRightX(),back.getBottomY()); getP4().moveTo(front.getRightX(),front.getBottomY());}} class OpenFrontCubePlaneTop extends CubeSolidColorPlane { public OpenFrontCubePlaneTop(int borderColor,int fillColor) { super(borderColor,fillColor,PlaneType.PT_TOP);} public void update(Bounds front,Bounds back) { getP1().moveTo(front.getLeftX(),front.getTopY()); getP2().moveTo(back.getLeftX(),back.getTopY()); getP3().moveTo(back.getRightX(),back.getTopY()); getP4().moveTo(front.getRightX(),front.getTopY());}} class OpenFrontCubePlaneBottom extends CubeSolidColorPlane { public OpenFrontCubePlaneBottom(int borderColor,int fillColor) { super(borderColor,fillColor,PlaneType.PT_BOTTOM);} public void update(Bounds front,Bounds back) { getP1().moveTo(front.getLeftX(),front.getBottomY()); getP2().moveTo(back.getLeftX(),back.getBottomY()); getP3().moveTo(back.getRightX(),back.getBottomY()); getP4().moveTo(front.getRightX(),front.getBottomY());}}