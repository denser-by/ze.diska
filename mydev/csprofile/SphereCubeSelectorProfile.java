package mydev.csprofile; import mydev.about.CanvasAdapter; import mydev.about.Matrix2D; import mydev.about.PaintAdapter; import mydev.cs.Bounds; import mydev.cs.ConturePlane; import mydev.cs.PlaneType; import mydev.cs.PlanesProfile; public class SphereCubeSelectorProfile extends PlanesProfile { public SphereCubeSelectorProfile(int contureColor) { super(contureColor);} public void represent(Matrix2D matrix) {} public void toPen(CanvasAdapter ics,PaintAdapter pn) {} protected ConturePlane obtainPlaneBack(int contureColor) { return new CubePlaneWrap(contureColor,new SpherePlaneBack(contureColor));} protected ConturePlane obtainPlaneTop(int contureColor) { return new CubePlaneWrap(contureColor,new SpherePlaneTop(contureColor));} protected ConturePlane obtainPlaneRight(int contureColor) { return new CubePlaneWrap(contureColor,new SpherePlaneRight(contureColor));} protected ConturePlane obtainPlaneBottom(int contureColor) { return new CubePlaneWrap(contureColor,new SpherePlaneBottom(contureColor));} protected ConturePlane obtainPlaneLeft(int contureColor) { return new CubePlaneWrap(contureColor,new SpherePlaneLeft(contureColor));} protected ConturePlane obtainPlaneFront(int contureColor) { return new CubePlaneWrap(contureColor,new SpherePlaneFront(contureColor));}} class SpherePlaneBack extends ConturePlane { public SpherePlaneBack(int color) { super(color,PlaneType.PT_BACK);} public void particularDrawing(CanvasAdapter ics,PaintAdapter pn) {} public void particularDrawing(Matrix2D matrix) {} public void update(Bounds front,Bounds back) { getP1().moveTo(back.getLeftX(),back.getTopY()); getP2().moveTo(back.getRightX(),back.getTopY()); getP3().moveTo(back.getRightX(),back.getBottomY()); getP4().moveTo(back.getLeftX(),back.getBottomY());}} class SpherePlaneFront extends ConturePlane { public SpherePlaneFront(int color) { super(color,PlaneType.PT_FRONT);} public void particularDrawing(CanvasAdapter ics,PaintAdapter pn) {} public void particularDrawing(Matrix2D matrix) {} public void update(Bounds front,Bounds back) { getP1().moveTo(front.getLeftX(),front.getTopY()); getP2().moveTo(front.getRightX(),front.getTopY()); getP3().moveTo(front.getRightX(),front.getBottomY()); getP4().moveTo(front.getLeftX(),front.getBottomY());}} class SpherePlaneLeft extends ConturePlane { public SpherePlaneLeft(int color) { super(color,PlaneType.PT_LEFT);} public void particularDrawing(CanvasAdapter ics,PaintAdapter pn) {} public void particularDrawing(Matrix2D matrix) {} public void update(Bounds front,Bounds back) { getP1().moveTo(front.getLeftX(),front.getTopY()); getP2().moveTo(back.getLeftX(),back.getTopY()); getP3().moveTo(back.getLeftX(),back.getBottomY()); getP4().moveTo(front.getLeftX(),front.getBottomY());}} class SpherePlaneBottom extends ConturePlane { public SpherePlaneBottom(int color) { super(color,PlaneType.PT_BOTTOM);} public void particularDrawing(CanvasAdapter ics,PaintAdapter pn) {} public void particularDrawing(Matrix2D matrix) {} public void update(Bounds front,Bounds back) { getP1().moveTo(front.getLeftX(),front.getBottomY()); getP2().moveTo(back.getLeftX(),back.getBottomY()); getP3().moveTo(back.getRightX(),back.getBottomY()); getP4().moveTo(front.getRightX(),front.getBottomY());}} class SpherePlaneRight extends ConturePlane { public SpherePlaneRight(int color) { super(color,PlaneType.PT_RIGHT);} public void particularDrawing(CanvasAdapter ics,PaintAdapter pn) {} public void particularDrawing(Matrix2D matrix) {} public void update(Bounds front,Bounds back) { getP1().moveTo(front.getRightX(),front.getTopY()); getP2().moveTo(back.getRightX(),back.getTopY()); getP3().moveTo(back.getRightX(),back.getBottomY()); getP4().moveTo(front.getRightX(),front.getBottomY());}} class SpherePlaneTop extends ConturePlane { public SpherePlaneTop(int color) { super(color,PlaneType.PT_TOP);} public void particularDrawing(CanvasAdapter ics,PaintAdapter pn) {} public void particularDrawing(Matrix2D matrix) {} public void update(Bounds front,Bounds back) { getP1().moveTo(front.getLeftX(),front.getTopY()); getP2().moveTo(back.getLeftX(),back.getTopY()); getP3().moveTo(back.getRightX(),back.getTopY()); getP4().moveTo(front.getRightX(),front.getTopY());}}