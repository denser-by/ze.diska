package mydev.csprofile; import mydev.about.Canvas; import mydev.about.ColorsArray; import mydev.about.Matrix2D; import mydev.about.Paint; import mydev.about.Point2D; import mydev.about.Rectangle2D; import mydev.cs.ContureWall; import mydev.cs.SolidColorWall; import mydev.cs.WallsProfile; public class RoomCOknoProfile extends WallsProfile { public final static int DEF_BORDER_COLOR=ColorsArray.redPoint.ic(); public final static int DEF_FULLFILL_COLOR=ColorsArray.grayPoint.ic(); public RoomCOknoProfile(int contureColor) { super(contureColor);} public void represent(Matrix2D matrix) {} public void toPen(Canvas ics,Paint pn) {} protected ContureWall obtainFarSide(int contureColor) { return new RoomWallWrap(contureColor,new RoomFarSide(DEF_BORDER_COLOR));} protected ContureWall obtainCeiling(int contureColor) { return new RoomWallWrap(contureColor,new RoomCeiling(DEF_BORDER_COLOR));} protected ContureWall obtainRightSide(int contureColor) { return new RoomWallWrap(contureColor,new RoomRightSide(DEF_BORDER_COLOR,DEF_FULLFILL_COLOR));} protected ContureWall obtainFloor(int contureColor) { return new RoomWallWrap(contureColor,new RoomFloor(DEF_BORDER_COLOR));} protected ContureWall obtainLeftSide(int contureColor) { return new RoomWallWrap(contureColor,new RoomLeftSide(DEF_BORDER_COLOR,DEF_FULLFILL_COLOR));} protected ContureWall obtainNearGlass(int contureColor) { return new RoomWallWrap(contureColor,new RoomNearGlass(DEF_BORDER_COLOR,DEF_FULLFILL_COLOR));}} class RoomWallWrap extends CommonSolidColorWall implements ReConture { protected CommonSolidColorWall solidWall; protected CommonLinesWall linesWall; protected CommonPictureWall pictureWall; public RoomWallWrap(int borderColor,CommonSolidColorWall customWall) { super(borderColor,borderColor); this.solidWall=customWall;} public RoomWallWrap(int borderColor,CommonLinesWall customWall) { super(borderColor,borderColor); this.linesWall=customWall;} public RoomWallWrap(int borderColor,CommonPictureWall pictureWall) { super(borderColor,borderColor); this.pictureWall=pictureWall;} public void represent(Matrix2D matrix) { if(solidWall !=null) solidWall.represent(matrix); else if(linesWall !=null) linesWall.represent(matrix); else pictureWall.represent(matrix);} public void toPen(Canvas ics,Paint pn) { if(solidWall !=null) solidWall.toPen(ics,pn); else if(linesWall !=null) linesWall.toPen(ics,pn); else pictureWall.toPen(ics,pn);} public void particularDrawing(Canvas ics,Paint pn) { if(solidWall !=null) solidWall.particularDrawing(ics,pn); else if(linesWall !=null) linesWall.particularDrawing(ics,pn); else pictureWall.particularDrawing(ics,pn);} public void update(Rectangle2D area) { if(solidWall !=null) solidWall.update(area); else if(linesWall !=null) linesWall.update(area); else pictureWall.update(area);} public String toString() { return "RoomWallWrap [solidWall="+solidWall+", linesWall="+linesWall+", pictureWall="+pictureWall+"]";} public void updateContureAfter() { if(solidWall !=null) solidWall.updateContureAfter(); else if(linesWall !=null) linesWall.updateContureAfter(); else pictureWall.updateContureAfter();} protected boolean pointsCriteria(Point2D point,float middleX,float middleY) { if(solidWall !=null) return solidWall.pointsCriteria(point,middleX,middleY); else if(linesWall !=null) return linesWall.pointsCriteria(point,middleX,middleY); return pictureWall.pointsCriteria(point,middleX,middleY);} public void updateConture(Point2D[] verticesProjections,float middleX,float middleY) { if(solidWall !=null) solidWall.updateConture(verticesProjections,middleX,middleY); else if(linesWall !=null) linesWall.updateConture(verticesProjections,middleX,middleY); else pictureWall.updateConture(verticesProjections,middleX,middleY);} public void drawConture(Canvas ics,Paint pn) { if(solidWall !=null) solidWall.drawConture(ics,pn); else if(linesWall !=null) linesWall.drawConture(ics,pn); else pictureWall.drawConture(ics,pn);}} abstract class CommonSolidColorWall extends SolidColorWall implements ReConture { public CommonSolidColorWall(int borderColor,int fillColor) { super(borderColor,fillColor);} public void update(Rectangle2D area) {} public void updateConture(Point2D[] verticesProjections,float middleX,float middleY) { Point2D p1c=null; Point2D p2c=null; Point2D p3c=null; Point2D p4c=null; for(int i=0; i < verticesProjections.length; i++) { Point2D point=verticesProjections[i]; if(p1c==null && pointsCriteria(point,middleX,middleY)) { p1c=point; continue;} else if(p2c==null && pointsCriteria(point,middleX,middleY)) { p2c=point; continue;} else if(p3c==null && pointsCriteria(point,middleX,middleY)) { p3c=point; continue;} else if(p4c==null && pointsCriteria(point,middleX,middleY)) { p4c=point; continue;}} if(p1c !=null) { p1.moveTo(p1c); p2.moveTo(p2c); p3.moveTo(p3c); p4.moveTo(p4c);}} protected abstract boolean pointsCriteria(Point2D point,float middleX,float middleY);} class RoomRightSide extends CommonSolidColorWall { public RoomRightSide(int borderColor,int fullFillColor) { super(borderColor,fullFillColor);} public void updateContureAfter() {} protected boolean pointsCriteria(Point2D point,float middleX,float middleY) { return point.getX() >= middleX;}} class RoomNearGlass extends CommonSolidColorWall { public RoomNearGlass(int borderColor,int fillColor) { super(borderColor,fillColor); this.full=false; this.contureDrawing=false;} public void updateContureAfter() {} protected boolean pointsCriteria(Point2D point,float middleX,float middleY) { return false;}} class RoomLeftSide extends CommonSolidColorWall { public RoomLeftSide(int borderColor,int fullFillColor) { super(borderColor,fullFillColor);} public void updateContureAfter() {} protected boolean pointsCriteria(Point2D point,float middleX,float middleY) { return point.getX() <= middleX;}} class RoomFloor extends CommonSolidColorWall { public RoomFloor(int borderColor) { super(borderColor,ColorsArray.darkGrayPoint.ic());} protected boolean pointsCriteria(Point2D point,float middleX,float middleY) { return point.getY() >= middleY;} public void updateContureAfter() { Point2D tmp=new Point2D(1-1,1-1); tmp.moveTo(p1); p1.moveTo(p2); p2.moveTo(tmp);}} class RoomFarSide extends CommonSolidColorWall { public RoomFarSide(int borderColor) { super(borderColor,ColorsArray.cyanPoint.ic());} protected boolean pointsCriteria(Point2D point,float middleX,float middleY) { Point2D middle=new Point2D(middleX,middleY); return point.dx(middle) <= middleX && point.dy(middle) <= middleY && point.getX() >= middleX / 2 && point.getX() <= middleX * 2-middleX / 2f;} public void updateContureAfter() { Point2D tmp=new Point2D(1-1,1-1); tmp.moveTo(p1); p1.moveTo(p2); p2.moveTo(tmp);}} class RoomCeiling extends CommonSolidColorWall { public RoomCeiling(int borderColor) { super(borderColor,ColorsArray.lightGrayPoint.ic());} protected boolean pointsCriteria(Point2D point,float middleX,float middleY) { return point.getY() <= middleY;} public void updateContureAfter() { Point2D tmp=new Point2D(1-1,1-1); tmp.moveTo(p1); p1.moveTo(p2); p2.moveTo(tmp);}}