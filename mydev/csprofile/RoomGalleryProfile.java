package mydev.csprofile; import mydev.about.Canvas; import mydev.about.Color; import mydev.about.ColorsArray; import mydev.about.Matrix2D; import mydev.about.Paint; import mydev.about.Picture; import mydev.about.Point2D; import mydev.cs.ContureWall; import mydev.cs.WallsProfile; public class RoomGalleryProfile extends WallsProfile { public final static int DEF_BORDER_COLOR=ColorsArray.bluePoint.ic(); public final static int DEF_FULLFILL_COLOR=ColorsArray.blackPoint.ic(); private static Picture pictureLeft; private static Picture pictureFar; private static Picture pictureRight; private static Dead4PictureProjector cpp; public RoomGalleryProfile(int contureColor) { super(contureColor);} public static void init(Dead4PictureProjector cpp,Picture pictureLeft,Picture pictureFar,Picture pictureRight) { RoomGalleryProfile.cpp=cpp; RoomGalleryProfile.pictureLeft=pictureLeft; RoomGalleryProfile.pictureFar=pictureFar; RoomGalleryProfile.pictureRight=pictureRight;} public void represent(Matrix2D matrix) {} public void toPen(Canvas ics,Paint pn) {} protected ContureWall obtainFarSide(int contureColor) { return new RoomWallWrap(contureColor,new ScanRoomFarSide(DEF_BORDER_COLOR));} protected ContureWall obtainCeiling(int contureColor) { return new RoomWallWrap(contureColor,new GalleryRoomCeiling(DEF_BORDER_COLOR));} protected ContureWall obtainFloor(int contureColor) { return new RoomWallWrap(contureColor,new GalleryRoomFloor(DEF_BORDER_COLOR));} protected ContureWall obtainLeftSide(int contureColor) { return new RoomWallWrap(contureColor,new ScanRoomLeftSide(DEF_BORDER_COLOR,pictureLeft,cpp));} protected ContureWall obtainRightSide(int contureColor) { return new RoomWallWrap(contureColor,new ScanRoomRightSide(DEF_BORDER_COLOR,pictureRight,cpp));} protected ContureWall obtainNearGlass(int contureColor) { return new RoomWallWrap(contureColor,new ScanRoomNearGlass(DEF_BORDER_COLOR,DEF_FULLFILL_COLOR));}} class GalleryRoomLeftSide extends CommonSolidColorWall { public GalleryRoomLeftSide(int borderColor,int fillColor) { super(borderColor,ColorsArray.grayPoint.ic());} public void updateContureAfter() {} protected boolean pointsCriteria(Point2D point,float middleX,float middleY) { return point.getX() <= middleX;}} class GalleryRoomRightSide extends CommonSolidColorWall { public GalleryRoomRightSide(int borderColor,int fillColor) { super(borderColor,ColorsArray.grayPoint.ic());} public void updateContureAfter() {} protected boolean pointsCriteria(Point2D point,float middleX,float middleY) { return point.getX() >= middleX;}} class GalleryRoomFloor extends ScanRoomFloor { public GalleryRoomFloor(int borderColor) { super(borderColor); setStepPercentBetweenLines(5);}} class GalleryRoomCeiling extends ScanRoomCeiling { public GalleryRoomCeiling(int borderColor) { super(borderColor); setFillColor(Color.middleColor(Color.middleColor(ColorsArray.whitePoint,Color.middleColor(ColorsArray.whitePoint,ColorsArray.magentaPoint)),Color.middleColor(ColorsArray.whitePoint,Color.middleColor(ColorsArray.whitePoint,ColorsArray.greenPoint))));}} class GalleryRoomFarSide extends CommonPictureWall { public GalleryRoomFarSide(int borderColor,Picture fillPicture,Dead4PictureProjector cpp) { super(borderColor,fillPicture,cpp,false);} protected boolean pointsCriteria(Point2D point,float middleX,float middleY) { Point2D middle=new Point2D(middleX,middleY); return point.dx(middle) <= middleX && point.dy(middle) <= middleY && point.getX() >= middleX / 2 && point.getX() <= middleX * 2-middleX / 2f;} public void updateContureAfter() { Point2D tmp=new Point2D(1-1,1-1); tmp.moveTo(p1); p1.moveTo(p2); p2.moveTo(tmp);}}