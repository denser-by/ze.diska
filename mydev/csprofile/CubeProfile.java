package mydev.csprofile; import mydev.about.CanvasAdapter; import mydev.about.ColorsArray; import mydev.about.Matrix2D; import mydev.about.PaintAdapter; import mydev.about.Point2D; import mydev.cs.Bounds; import mydev.cs.ConturePlane; import mydev.cs.LinesPlane; import mydev.cs.PlaneType; import mydev.cs.PlanesProfile; public class CubeProfile extends PlanesProfile { public CubeProfile(int contureColor) { super(contureColor);} public void represent(Matrix2D matrix) {} public void toPen(CanvasAdapter ics,PaintAdapter pn) {} protected ConturePlane obtainPlaneBack(int contureColor) { return new CubePlaneWrap(contureColor,new CubePlaneBack(contureColor));} protected ConturePlane obtainPlaneTop(int contureColor) { return new CubePlaneWrap(contureColor,new CubePlaneTop(contureColor,ColorsArray.winPoint.ic(),true,11));} protected ConturePlane obtainPlaneRight(int contureColor) { return new CubePlaneWrap(contureColor,new CubePlaneRight(contureColor));} protected ConturePlane obtainPlaneBottom(int contureColor) { return new CubePlaneWrap(contureColor,new CubePlaneBottom(contureColor,ColorsArray.lightGrayPoint.ic()));} protected ConturePlane obtainPlaneLeft(int contureColor) { return new CubePlaneWrap(contureColor,new CubePlaneLeft(contureColor));} protected ConturePlane obtainPlaneFront(int contureColor) { return new CubePlaneWrap(contureColor,new CubePlaneFront(contureColor));}} class CubePlaneWrap extends ConturePlane { protected ConturePlane customPlane; public CubePlaneWrap(int contureColor,ConturePlane customPlane) { super(contureColor,customPlane.getPlaneType()); this.customPlane=customPlane;} public void represent(Matrix2D matrix) { customPlane.represent(matrix);} public void toPen(CanvasAdapter ics,PaintAdapter pn) { customPlane.toPen(ics,pn);} public void particularDrawing(CanvasAdapter ics,PaintAdapter pn) { customPlane.particularDrawing(ics,pn);} public void particularDrawing(Matrix2D matrix) { customPlane.particularDrawing(matrix);} public void update(Bounds front,Bounds back) { customPlane.update(front,back);} public Point2D midpoint() { return customPlane.midpoint();}} abstract class CubeConturePlane extends ConturePlane { public CubeConturePlane(int borderColor,PlaneType planeType) { super(borderColor,planeType);} public void particularDrawing(CanvasAdapter ics,PaintAdapter pn) {} public void particularDrawing(Matrix2D matrix) {}} class CubePlaneBack extends CubeConturePlane { public CubePlaneBack(int color) { super(color,PlaneType.PT_BACK);} public void update(Bounds front,Bounds back) { p1.moveTo(back.getLeftX(),back.getTopY()); p2.moveTo(back.getRightX(),back.getTopY()); p3.moveTo(back.getRightX(),back.getBottomY()); p4.moveTo(back.getLeftX(),back.getBottomY());}} class CubePlaneFront extends CubeConturePlane { public CubePlaneFront(int color) { super(color,PlaneType.PT_FRONT);} public void update(Bounds front,Bounds back) { p1.moveTo(front.getLeftX(),front.getTopY()); p2.moveTo(front.getRightX(),front.getTopY()); p3.moveTo(front.getRightX(),front.getBottomY()); p4.moveTo(front.getLeftX(),front.getBottomY());}} class CubePlaneLeft extends CubeConturePlane { public CubePlaneLeft(int borderColor) { super(borderColor,PlaneType.PT_LEFT);} public void update(Bounds front,Bounds back) { p1.moveTo(front.getLeftX(),front.getTopY()); p2.moveTo(back.getLeftX(),back.getTopY()); p3.moveTo(back.getLeftX(),back.getBottomY()); p4.moveTo(front.getLeftX(),front.getBottomY());}} class CubePlaneRight extends CubeConturePlane { public CubePlaneRight(int borderColor) { super(borderColor,PlaneType.PT_RIGHT);} public void update(Bounds front,Bounds back) { p1.moveTo(front.getRightX(),front.getTopY()); p2.moveTo(back.getRightX(),back.getTopY()); p3.moveTo(back.getRightX(),back.getBottomY()); p4.moveTo(front.getRightX(),front.getBottomY());}} class CubePlaneTop extends LinesPlane { public CubePlaneTop(int borderColor,int linesColor,boolean vertLines,int stepPercentBetweenLines) { super(borderColor,linesColor,vertLines,stepPercentBetweenLines,PlaneType.PT_TOP);} public void update(Bounds front,Bounds back) { p1.moveTo(front.getLeftX(),front.getTopY()); p2.moveTo(back.getLeftX(),back.getTopY()); p3.moveTo(back.getRightX(),back.getTopY()); p4.moveTo(front.getRightX(),front.getTopY());}} class CubePlaneBottom extends CubeSolidColorPlane { public CubePlaneBottom(int borderColor,int fillColor) { super(borderColor,fillColor,PlaneType.PT_BOTTOM);} public void update(Bounds front,Bounds back) { p1.moveTo(front.getLeftX(),front.getBottomY()); p2.moveTo(back.getLeftX(),back.getBottomY()); p3.moveTo(back.getRightX(),back.getBottomY()); p4.moveTo(front.getRightX(),front.getBottomY());}}