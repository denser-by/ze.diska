package mydev.conf; import java.awt.BorderLayout; import java.awt.Canvas; import java.awt.Checkbox; import java.awt.Color; import java.awt.Dimension; import java.awt.Event; import java.awt.FlowLayout; import java.awt.Frame; import java.awt.Graphics; import java.awt.List; import java.awt.Panel; public class Cinematics extends Frame { private boolean stop; LogCat cat; Presska prs; View3D v3d; public Cinematics() { super("Podrabotka"); stop=false; prs=new Presska(); setLayout(new BorderLayout()); cat=new LogCat(prs); add("East",new Settings()); add("Center",v3d=new View3D(prs,cat.res)); add("South",cat); pack();} public static void main(String[] args) { Cinematics cs=new Cinematics(); cs.show(); while(!cs.stop) { try { Thread.sleep(130);} catch(InterruptedException e) { e.getMessage();} cs.cat.move.scedule(); if(cs.cat.res.peek()) cs.v3d.prepareUpdate(); cs.v3d.scedule();} cs.hide(); cs.dispose(); System.exit(1-1); System.out.println("create");} public boolean handleEvent(Event et) { if(et.id==Event.WINDOW_DESTROY) stop=true; return super.handleEvent(et);}} class Settings extends Panel { List tf1; public Settings() { super(); setLayout(new FlowLayout()); add(tf1=new List(22,false)); tf1.setBackground(Color.white); tf1.addItem("Object-1");}} class View3D extends CanvasX { Color hPen1; Color hPen2; Color hPrevPen; short xDa; short yDa; short wDa; short hDa; int W12=95; int H12=35; int SPS=3; short xLog; short yLog; short wLog; short hLog; short xMonitor; short yMonitor; short wMonitor; short hMonitor; short xCtrl; short yCtrl; short wCtrl; short hCtrl; float xt; String buf="12"; Color cp; short cx; short cy; short rx1; short rx2; short ry1; short ry2; short h1; short h2; short wx; short wy; short wz; short diWidth; short diHeight; short diLength; int msg; short x; short y; short z; Presska prs; Results res; public View3D(Presska prs,Results res) { super(); this.prs=prs; resize(550,400); resize1((short) 550,(short) 400); recount1((short) 550,(short) 400); setBackground(Color.black); x=0; y=0; z=0; wx=-160; wy=-115; wz=180; diWidth=55; diHeight=29; diLength=60; cp=Color.black; this.res=res;} public void scedule() { if(prs.forward==1) { z+=7; prepareUpdate();} if(prs.backward==1) { z-=7; prepareUpdate();} if(prs.left==1) { x-=7; prepareUpdate();} if(prs.right==1) { x+=7; prepareUpdate();} if(prs.up==1) { y+=7; prepareUpdate();} if(prs.down==1) { y-=7; prepareUpdate();} super.scedule();} public void paint(Graphics cs) { Dimension d=size(); resize1((short) d.width,(short) d.height); recount1((short) d.width,(short) d.height); super.paint(cs); cs1=cs; if(init==0) { init=1; hPen1=RGB(255,255,255); hPen2=RGB(111,186,248);} cs.setColor(RGB(255,255,255)); hPrevPen=hPen1; border(xDa,yDa,xDa+wDa,yDa+hDa); border(cx-5,cy-5,cx+5,cy+5); MoveToEx(cx,cy-14); LineTo(cx,cy+14); MoveToEx(cx-14,cy); LineTo(cx+14,cy); drawScene(); bus(x,y,z,hPen2);} void recount1(short right,short bottom) { short left=0; short top=0; rx1=(short)(SPS); ry1=(short)(SPS); rx2=(short)(right-SPS-SPS-(right-left-SPS-SPS) / 4); ry2=(short)(bottom-top-SPS-SPS-(bottom-top-SPS-SPS-SPS-26) / 4); cx=(short)(xDa+wDa / 2); cy=(short)(yDa+hDa / 2); h1=(short)(cy+(ry1+ry2) / 23); h2=(short)(ry2-h1);} void resize1(short right,short bottom) { short left=0; short top=0; short filePathX=(short)(left+SPS); short filePathY=(short)(top+SPS); short filePathWidth=(short)(right-left-SPS-SPS); short contentHeight=(short)(bottom-top-SPS-SPS); short elementsWidth=(short)(filePathWidth / 4); short ctrlHeight=(short)(contentHeight / 4); ctrlHeight=0; xLog=filePathX; yLog=(short)(filePathY+contentHeight-ctrlHeight); wLog=(short)(filePathWidth-elementsWidth); hLog=ctrlHeight; elementsWidth=0; xMonitor=(short)(filePathX+filePathWidth-elementsWidth); yMonitor=filePathY; wMonitor=elementsWidth; hMonitor=(short)(contentHeight-ctrlHeight); xCtrl=(short)(filePathX+filePathWidth-elementsWidth+SPS); yCtrl=(short)(filePathY+contentHeight+SPS-ctrlHeight); wCtrl=elementsWidth; hCtrl=ctrlHeight; xDa=filePathX; yDa=filePathY; wDa=(short)(xMonitor-filePathX-SPS); hDa=(short)(yLog-filePathY-SPS);} Color setColor(Color c1) { Color cpx=cp; cs1.setColor(c1); cp=c1; return cpx;} void bus(short uax,short uay,short uaz,Color hPen2) { float lx; float ly; float lx2; float ly2; float cply; float cply2; float cplx; float cplx2; float ax1; float ax2; float ay1; float ay2; float bx1; float bx2; float by1; float by2; int i; float dl; short k; Color hPrevPen; ax1=0; ay1=0; ax2=0; ay2=0; bx1=0; by1=0; bx2=0; by2=0; setColor(Color.white); i=wz-uaz; if(i==wz-uaz) { lx=xDa+(float) i / 300 *(wDa / 2-W12); ly=yDa+hDa-(float) i / 300 *(hDa / 2-H12); lx2=xDa+wDa-(float) i / 300 *(wDa / 2-W12); ly2=yDa+(float) i / 300 *(hDa / 2-H12); if(res.sx.getState()) { MoveToEx(lx,ly); LineTo(lx2,ly); LineTo(lx2,ly2); LineTo(lx,ly2); LineTo(lx,ly);} cply=ly; cply2=ly2; cplx=lx; cplx2=lx2; if(res.bx.getState()) { ly=yDa+hDa / 2; ly2=uay-wy; ly2=ly2-(float) i / 300 *(ly2-(float) H12 /(hDa / 2) * ly2); if(ly+ly2 >= cply2 && ly+ly2 <= cply) { MoveToEx(lx,ly+ly2); LineTo(lx2,ly+ly2);} ly=yDa+hDa / 2; ly2=uay-wy-diHeight; ly2=ly2-(float) i / 300 *(ly2-(float) H12 /(hDa / 2) * ly2); if(ly+ly2 >= cply2 && ly+ly2 <= cply) { MoveToEx(lx,ly+ly2); LineTo(lx2,ly+ly2);}} if(res.by.getState()) { lx=xDa+wDa / 2; lx2=uax-wx; lx2=lx2-(float) i / 300 *(lx2-(float) W12 /(wDa / 2) * lx2); if(lx-lx2 <= cplx2 && lx-lx2 >= cplx) { MoveToEx(lx-lx2,cply); LineTo(lx-lx2,cply2);} lx=xDa+wDa / 2; lx2=uax-wx-diWidth; lx2=lx2-(float) i / 300 *(lx2-(float) W12 /(wDa / 2) * lx2); if(lx-lx2 <= cplx2 && lx-lx2 >= cplx) { MoveToEx(lx-lx2,cply); LineTo(lx-lx2,cply2);}} hPrevPen=setColor(hPen2); lx=xDa+wDa / 2; lx2=uax-wx; lx2=lx2-(float) i / 300 *(lx2-(float) W12 /(wDa / 2) * lx2); ax1=lx-lx2; lx=xDa+wDa / 2; lx2=uax-wx-diWidth; lx2=lx2-(float) i / 300 *(lx2-(float) W12 /(wDa / 2) * lx2); ax2=lx-lx2; ly=yDa+hDa / 2; ly2=uay-wy-diHeight; ly2=ly2-(float) i / 300 *(ly2-(float) H12 /(hDa / 2) * ly2); ay1=ly+ly2; ly=yDa+hDa / 2; ly2=uay-wy; ly2=ly2-(float) i / 300 *(ly2-(float) H12 /(hDa / 2) * ly2); ay2=ly+ly2; MoveToEx(ax1,ay1); LineTo(ax2,ay1); LineTo(ax2,ay2); LineTo(ax1,ay2); LineTo(ax1,ay1); setColor(hPrevPen);} do { dl=(float) diLength * H12 /(hDa / 2)+(diLength-(float) diLength * H12 /(hDa / 2)) *(float)(300-i) / 300;} while(i <= 300 && i++<= wz+dl-uaz); setColor(Color.white); if(i >= wz+dl-uaz) { lx=xDa+(float) i / 300 *(wDa / 2-W12); ly=yDa+hDa-(float) i / 300 *(hDa / 2-H12); lx2=xDa+wDa-(float) i / 300 *(wDa / 2-W12); ly2=yDa+(float) i / 300 *(hDa / 2-H12); if(res.sx.getState()) { MoveToEx(lx,ly); LineTo(lx2,ly); LineTo(lx2,ly2); LineTo(lx,ly2); LineTo(lx,ly);} cply=ly; cply2=ly2; cplx=lx; cplx2=lx2; if(res.bx.getState()) { ly=yDa+hDa / 2; ly2=uay-wy; ly2=ly2-(float) i / 300 *(ly2-(float) H12 /(hDa / 2) * ly2); if(ly+ly2 >= cply2 && ly+ly2 <= cply) { MoveToEx(lx,ly+ly2); LineTo(lx2,ly+ly2);} ly=yDa+hDa / 2; ly2=uay-wy-diHeight; ly2=ly2-(float) i / 300 *(ly2-(float) H12 /(hDa / 2) * ly2); if(ly+ly2 >= cply2 && ly+ly2 <= cply) { MoveToEx(lx,ly+ly2); LineTo(lx2,ly+ly2);}} if(res.by.getState()) { lx=xDa+wDa / 2; lx2=uax-wx; lx2=lx2-(float) i / 300 *(lx2-(float) W12 /(wDa / 2) * lx2); if(lx-lx2 <= cplx2 && lx-lx2 >= cplx) { MoveToEx(lx-lx2,cply); LineTo(lx-lx2,cply2);} lx=xDa+wDa / 2; lx2=uax-wx-diWidth; lx2=lx2-(float) i / 300 *(lx2-(float) W12 /(wDa / 2) * lx2); if(lx-lx2 <= cplx2 && lx-lx2 >= cplx) { MoveToEx(lx-lx2,cply); LineTo(lx-lx2,cply2);}} hPrevPen=setColor(hPen2); lx=xDa+wDa / 2; lx2=uax-wx; lx2=lx2-(float) i / 300 *(lx2-(float) W12 /(wDa / 2) * lx2); bx1=lx-lx2; lx=xDa+wDa / 2; lx2=uax-wx-diWidth; lx2=lx2-(float) i / 300 *(lx2-(float) W12 /(wDa / 2) * lx2); bx2=lx-lx2; ly=yDa+hDa / 2; ly2=uay-wy-diHeight; ly2=ly2-(float) i / 300 *(ly2-(float) H12 /(hDa / 2) * ly2); by1=ly+ly2; ly=yDa+hDa / 2; ly2=uay-wy; ly2=ly2-(float) i / 300 *(ly2-(float) H12 /(hDa / 2) * ly2); by2=ly+ly2; MoveToEx(bx1,by1); LineTo(bx2,by1); LineTo(bx2,by2); LineTo(bx1,by2); LineTo(bx1,by1); setColor(hPrevPen);} hPrevPen=setColor(hPen2); MoveToEx(ax1,ay1); LineTo(bx1,by1); MoveToEx(ax2,ay1); LineTo(bx2,by1); MoveToEx(ax2,ay2); LineTo(bx2,by2); MoveToEx(ax1,ay2); LineTo(bx1,by2); setColor(hPrevPen); setColor(Color.white); i=uax-wx; if(i==uax-wx) { lx=xDa+wDa / 2-i; ly=yDa+hDa; lx2=xDa+wDa / 2-(float) i /(wDa / 2) *(W12); ly2=yDa+hDa-(float) 300 / 300 *(hDa / 2-H12); if(res.sy.getState()) { MoveToEx(lx,ly); LineTo(lx2,ly2); LineTo(lx2,ly2-2 * H12); LineTo(lx,ly-hDa); LineTo(lx,ly);} if(res.bz.getState()) { if(ly-hDa / 2-(wy+diHeight-uay) >= yDa && ly-hDa / 2-(wy+diHeight-uay) <= yDa+hDa) { MoveToEx(lx,ly-hDa / 2-(wy+diHeight-uay)); LineTo(lx2,ly2-(float)(wy+diHeight-uay+hDa / 2) /(hDa / 2) * H12);} if(ly-hDa / 2-(wy-uay) >= yDa && ly-hDa / 2-(wy-uay) <= yDa+hDa) { MoveToEx(lx,ly-hDa / 2-(wy-uay)); LineTo(lx2,ly2-(float)(wy-uay+hDa / 2) /(hDa / 2) * H12);}}} i=uax-wx-diWidth; if(i==uax-wx-diWidth) { lx=xDa+wDa / 2-i; ly=yDa+hDa; lx2=xDa+wDa / 2-(float) i /(wDa / 2) *(W12); ly2=yDa+hDa-(float) 300 / 300 *(hDa / 2-H12); if(res.sy.getState()) { MoveToEx(lx,ly); LineTo(lx2,ly2); LineTo(lx2,ly2-2 * H12); LineTo(lx,ly-hDa); LineTo(lx,ly);} if(res.bz.getState()) { if(ly-hDa / 2-(wy+diHeight-uay) >= yDa && ly-hDa / 2-(wy+diHeight-uay) <= yDa+hDa) { MoveToEx(lx,ly-hDa / 2-(wy+diHeight-uay)); LineTo(lx2,ly2-(float)(wy+diHeight-uay+hDa / 2) /(hDa / 2) * H12);} if(ly-hDa / 2-(wy-uay) >= yDa && ly-hDa / 2-(wy-uay) <= yDa+hDa) { MoveToEx(lx,ly-hDa / 2-(wy-uay)); LineTo(lx2,ly2-(float)(wy-uay+hDa / 2) /(hDa / 2) * H12);}}} if(res.sz.getState()) { setColor(Color.white); i=wy+diHeight-uay; if(i==wy+diHeight-uay) { MoveToEx(xDa,yDa+hDa / 2-i); LineTo(xDa+wDa,yDa+hDa / 2-i); lx=xDa+wDa / 2+W12; ly=yDa+hDa / 2-(float) i /(hDa / 2) * H12; LineTo(lx,ly); LineTo(lx-2 * W12,ly); LineTo(xDa,yDa+hDa / 2-i);} i=wy-uay; if(i==wy-uay) { MoveToEx(xDa,yDa+hDa / 2-i); LineTo(xDa+wDa,yDa+hDa / 2-i); lx=xDa+wDa / 2+W12; ly=yDa+hDa / 2-(float) i /(hDa / 2) * H12; LineTo(lx,ly); LineTo(lx-2 * W12,ly); LineTo(xDa,yDa+hDa / 2-i);}}} void border(int rx1,int ry1,int rx2,int ry2) { MoveToEx(rx1,ry1); LineTo(rx2,ry1); LineTo(rx2,ry2); LineTo(rx1,ry2); LineTo(rx1,ry1);} void drawScene() { char buf[]=new char[32]; short x1; short y1; short x2; short y2; int i; x2=-1; y2=-1; for(i=30; i <= 300; i+=30) { x1=(short)(xDa+wDa-(float) i / 300 *(wDa / 2-W12)); y1=(short)(yDa+hDa-(float) i / 300 *(hDa / 2-H12)); if(x2 !=-1) { xt=(y2-y1) /(x1-x2);} else { x2=x1; y2=y1;}} x1=(short)(xDa+(float) 0 / 300 *(wDa / 2-W12)); y1=(short)(yDa+hDa-(float) 0 / 300 *(hDa / 2-H12)); MoveToEx(x1,y1); x1=(short)(xDa+(float) 300 / 300 *(wDa / 2-W12)); y1=(short)(yDa+hDa-(float) 300 / 300 *(hDa / 2-H12)); LineTo(x1,y1); x1=(short)(xDa+wDa-(float) 300 / 300 *(wDa / 2-W12)); y1=(short)(yDa+hDa-(float) 300 / 300 *(hDa / 2-H12)); LineTo(x1,y1); x1=(short)(xDa+wDa-(float) 0 / 300 *(wDa / 2-W12)); y1=(short)(yDa+hDa-(float) 0 / 300 *(hDa / 2-H12)); LineTo(x1,y1); x1=(short)(xDa+(float) 0 / 300 *(wDa / 2-W12)); y1=(short)(yDa+(float) 0 / 300 *(hDa / 2-H12)); MoveToEx(x1,y1); x1=(short)(xDa+(float) 300 / 300 *(wDa / 2-W12)); y1=(short)(yDa+(float) 300 / 300 *(hDa / 2-H12)); LineTo(x1,y1); x1=(short)(xDa+wDa-(float) 300 / 300 *(wDa / 2-W12)); y1=(short)(yDa+(float) 300 / 300 *(hDa / 2-H12)); LineTo(x1,y1); x1=(short)(xDa+wDa-(float) 0 / 300 *(wDa / 2-W12)); y1=(short)(yDa+(float) 0 / 300 *(hDa / 2-H12)); LineTo(x1,y1); x1=(short)(xDa+wDa-(float) 300 / 300 *(wDa / 2-W12)); y1=(short)(yDa+(float) 300 / 300 *(hDa / 2-H12)); MoveToEx(x1,y1); x1=(short)(xDa+wDa-(float) 300 / 300 *(wDa / 2-W12)); y1=(short)(yDa+hDa-(float) 300 / 300 *(hDa / 2-H12)); LineTo(x1,y1); x1=(short)(xDa+(float) 300 / 300 *(wDa / 2-W12)); y1=(short)(yDa+hDa-(float) 300 / 300 *(hDa / 2-H12)); MoveToEx(x1,y1); x1=(short)(xDa+(float) 300 / 300 *(wDa / 2-W12)); y1=(short)(yDa+(float) 300 / 300 *(hDa / 2-H12)); LineTo(x1,y1);}} class LogCat extends Panel { Moving move; Results res; public LogCat(Presska prs) { super(); setLayout(new BorderLayout()); add("East",move=new Moving(prs)); add("Center",res=new Results());}} class Results extends Panel { Checkbox sx; Checkbox sy; Checkbox sz; Checkbox bx; Checkbox by; Checkbox bz; boolean upd; public Results() { super(); setLayout(new FlowLayout()); add(sx=new Checkbox("stripe-x")); add(sy=new Checkbox("stripe-y")); add(sz=new Checkbox("stripe-z")); add(bx=new Checkbox("bulk-x")); add(by=new Checkbox("bulk-y")); add(bz=new Checkbox("bulk-z")); sx.setState(true); sy.setState(true); sz.setState(true); bx.setState(true); by.setState(true); bz.setState(true); upd=false;} boolean peek() { boolean r; r=upd; upd=false; return r;} public boolean handleEvent(Event et) { if(et.id==Event.ACTION_EVENT) upd=true; if(et.id==Event.KEY_PRESS) upd=true; if(et.id==Event.MOUSE_DOWN) upd=true; return super.handleEvent(et);}} class CanvasX extends Canvas { short init; protected short cx; protected short cy; protected Graphics cs1; protected boolean rep; public CanvasX() { super();} protected Color RGB(int r,int g,int b) { return new Color(b,g,r);} protected void LineTo(int x,int y) { cs1.drawLine(cx,cy,x,y); cx=(short) x; cy=(short) y;} protected void LineTo(float x,float y) { cs1.drawLine(cx,cy,(int) x,(int) y); cx=(short) x; cy=(short) y;} protected void MoveToEx(int x,int y) { cx=(short) x; cy=(short) y;} protected void MoveToEx(float x,float y) { cx=(short) x; cy=(short) y;} void prepareUpdate() { rep=true;} public void scedule() { if(rep) { rep=false; repaint();}}} class Presska { short forward; short backward; short left; short right; short up; short down; public Presska() { drop();} public void drop() { up=0; down=0; left=0; right=0; forward=0; backward=0;}} class Moving extends CanvasX { short ctrl; short active; short caBot; short caRight; int side; int step; Presska prs; Color hPen1; Color hPen12; Color hPen2; Color hPrevPen; public Moving(Presska prs) { super(); resize(220,130); init=0; ctrl=0; active=0; caRight=220; caBot=130; rep=false; this.prs=prs;} public void paint(Graphics cs) { super.paint(cs); cs1=cs; Dimension d=size(); cs.setColor(Color.black); cs.drawRect(0,0,d.width-1,d.height-1); if(init==0) { init=1; hPen1=RGB(0,0,0); hPen12=RGB(10,242,255); hPen2=RGB(127,127,255);} hPrevPen=hPen2; side=caBot / 5; step=side * 3 / 7; cs.setColor(prs.forward==1 ? hPen2 : active==1 ? hPen12 : hPen1); MoveToEx(caRight / 2-side,caBot / 2-step / 2-2 * side); LineTo(caRight / 2+side,caBot / 2-step / 2-2 * side); LineTo(caRight / 2+side,caBot / 2-step / 2); LineTo(caRight / 2-side,caBot / 2-step / 2); LineTo(caRight / 2-side,caBot / 2-step / 2-2 * side); MoveToEx(caRight / 2,caBot / 2-step); LineTo(caRight / 2,caBot / 2-step-2 * side+step); MoveToEx(caRight / 2-side+step / 2,caBot / 2-step / 2-side); LineTo(caRight / 2,caBot / 2-step-2 * side+step); LineTo(caRight / 2+side-step / 2,caBot / 2-step / 2-side); cs.setColor(hPrevPen); cs.setColor(prs.backward==1 ? hPen2 : active==2 ? hPen12 : hPen1); MoveToEx(caRight / 2-side,caBot / 2-step / 2-2 * side+2 * side+step); LineTo(caRight / 2+side,caBot / 2-step / 2-2 * side+2 * side+step); LineTo(caRight / 2+side,caBot / 2-step / 2+2 * side+step); LineTo(caRight / 2-side,caBot / 2-step / 2+2 * side+step); LineTo(caRight / 2-side,caBot / 2-step / 2-2 * side+2 * side+step); MoveToEx(caRight / 2,caBot / 2-step+2 * side+step); LineTo(caRight / 2,caBot / 2-step-2 * side+step+2 * side+step); MoveToEx(caRight / 2-side+step / 2,caBot / 2-step / 2-side+2 * side+step); LineTo(caRight / 2,caBot / 2-step+2 * side+step+1); LineTo(caRight / 2+side-step / 2,caBot / 2-step / 2-side+2 * side+step); cs.setColor(hPrevPen); cs.setColor(prs.left==1 ? hPen2 : active==3 ? hPen12 : hPen1); MoveToEx(caRight / 2-side-step-2 * side,caBot / 2-step / 2+step); LineTo(caRight / 2+side-step-2 * side,caBot / 2-step / 2+step); LineTo(caRight / 2+side-step-2 * side,caBot / 2-step / 2+2 * side+step); LineTo(caRight / 2-side-step-2 * side,caBot / 2-step / 2+2 * side+step); LineTo(caRight / 2-side-step-2 * side,caBot / 2-step / 2+step); MoveToEx(caRight / 2-side-step / 2-2 * side,caBot / 2-step / 2+step+side); LineTo(caRight / 2-side-step / 2-2 * side+2 * side-step,caBot / 2-step / 2+step+side); MoveToEx(caRight / 2-step-2 * side+1,caBot / 2+step); LineTo(caRight / 2-side-step / 2-2 * side,caBot / 2-step / 2+step+side); LineTo(caRight / 2-step-2 * side,caBot / 2+2 * side); cs.setColor(hPrevPen); cs.setColor(prs.right==1 ? hPen2 : active==4 ? hPen12 : hPen1); MoveToEx(caRight / 2-side+step+2 * side,caBot / 2-step / 2-2 * side+2 * side+step); LineTo(caRight / 2+side+step+2 * side,caBot / 2-step / 2-2 * side+2 * side+step); LineTo(caRight / 2+side+step+2 * side,caBot / 2-step / 2-2 * side+2 * side+2 * side+step); LineTo(caRight / 2-side+step+2 * side,caBot / 2-step / 2-2 * side+2 * side+2 * side+step); LineTo(caRight / 2-side+step+2 * side,caBot / 2-step / 2-2 * side+2 * side+step); MoveToEx(caRight / 2-side-step+3 * side,caBot / 2-step / 2+step+side); LineTo(caRight / 2-side-step+3 * side+2 * side-step,caBot / 2-step / 2+step+side); MoveToEx(caRight / 2-step-step / 2+3 * side-1,caBot / 2+step); LineTo(caRight / 2+step / 2+3 * side,caBot / 2-step / 2+step+side); LineTo(caRight / 2-step-step / 2+3 * side,caBot / 2+2 * side); cs.setColor(hPrevPen); cs.setColor(prs.up==1 ? hPen2 : active==5 ? hPen12 : hPen1); MoveToEx(caRight / 2-side-2 * side-step,caBot / 2-step / 2-2 * side); LineTo(caRight / 2+side-2 * side-step,caBot / 2-step / 2-2 * side); LineTo(caRight / 2+side-2 * side-step,caBot / 2-step / 2); LineTo(caRight / 2-side-2 * side-step,caBot / 2-step / 2); LineTo(caRight / 2-side-2 * side-step,caBot / 2-step / 2-2 * side); MoveToEx(caRight / 2-side+step / 2-2 * side-step,caBot / 2-step / 2-side); LineTo(caRight / 2-2 * side-step,caBot / 2-step-2 * side+step); LineTo(caRight / 2+side-step / 2-2 * side-step,caBot / 2-step / 2-side); MoveToEx(caRight / 2-side+step / 2-2 * side-step,caBot / 2-step / 2-side+side-step / 2); LineTo(caRight / 2-2 * side-step,caBot / 2-step-2 * side+step+side-step / 2); LineTo(caRight / 2+side-step / 2-2 * side-step,caBot / 2-step / 2-side+side-step / 2); cs.setColor(hPrevPen); cs.setColor(prs.down==1 ? hPen2 : active==6 ? hPen12 : hPen1); MoveToEx(caRight / 2-side+2 * side+step,caBot / 2-step / 2-2 * side); LineTo(caRight / 2+side+2 * side+step,caBot / 2-step / 2-2 * side); LineTo(caRight / 2+side+2 * side+step,caBot / 2-step / 2); LineTo(caRight / 2-side+2 * side+step,caBot / 2-step / 2); LineTo(caRight / 2-side+2 * side+step,caBot / 2-step / 2-2 * side); MoveToEx(caRight / 2-side+step / 2+2 * side+step,caBot / 2-step / 2-side); LineTo(caRight / 2+2 * side+step,caBot / 2-step+1); LineTo(caRight / 2+side-step / 2+2 * side+step,caBot / 2-step / 2-side); MoveToEx(caRight / 2-side+step / 2+2 * side+step,caBot / 2-2 * side); LineTo(caRight / 2+2 * side+step,caBot / 2-step-side+step / 2+1); LineTo(caRight / 2+side-step / 2+2 * side+step,caBot / 2-2 * side); cs.setColor(hPrevPen);} public boolean mouseDown(Event evt,int mx,int my) { prs.drop(); side=caBot / 5; step=side * 3 / 7; if(caRight / 2-side <= mx && mx <= caRight / 2+side && caBot / 2-step / 2-2 * side <= my && my <= caBot / 2-step / 2) prs.forward=1; if(caRight / 2-side <= mx && mx <= caRight / 2+side && caBot / 2-step / 2-2 * side+2 * side+step <= my && my <= caBot / 2-step / 2+2 * side+step) prs.backward=1; if(caRight / 2-side-step-2 * side <= mx && mx <= caRight / 2+side-step-2 * side && caBot / 2-step / 2+step <= my && my <= caBot / 2-step / 2+2 * side+step) prs.left=1; if(caRight / 2-side+step+2 * side <= mx && mx <= caRight / 2+side+step+2 * side && caBot / 2-step / 2-2 * side+2 * side+step <= my && my <= caBot / 2-step / 2-2 * side+2 * side+2 * side+step) prs.right=1; if(caRight / 2-side-2 * side-step <= mx && mx <= caRight / 2+side-2 * side-step && caBot / 2-step / 2-2 * side <= my && my <= caBot / 2-step / 2) prs.up=1; if(caRight / 2-side+2 * side+step <= mx && mx <= caRight / 2+side+2 * side+step && caBot / 2-step / 2-2 * side <= my && my <= caBot / 2-step / 2) prs.down=1; prepareUpdate(); return super.mouseDown(evt,mx,my);} public boolean mouseUp(Event evt,int x,int y) { prs.drop(); prepareUpdate(); return super.mouseUp(evt,x,y);} public boolean mouseMove(Event evt,int mx,int my) { side=caBot / 5; step=side * 3 / 7; active=0; if(caRight / 2-side <= mx && mx <= caRight / 2+side && caBot / 2-step / 2-2 * side <= my && my <= caBot / 2-step / 2) active=1; if(caRight / 2-side <= mx && mx <= caRight / 2+side && caBot / 2-step / 2-2 * side+2 * side+step <= my && my <= caBot / 2-step / 2+2 * side+step) active=2; if(caRight / 2-side-step-2 * side <= mx && mx <= caRight / 2+side-step-2 * side && caBot / 2-step / 2+step <= my && my <= caBot / 2-step / 2+2 * side+step) active=3; if(caRight / 2-side+step+2 * side <= mx && mx <= caRight / 2+side+step+2 * side && caBot / 2-step / 2-2 * side+2 * side+step <= my && my <= caBot / 2-step / 2-2 * side+2 * side+2 * side+step) active=4; if(caRight / 2-side-2 * side-step <= mx && mx <= caRight / 2+side-2 * side-step && caBot / 2-step / 2-2 * side <= my && my <= caBot / 2-step / 2) active=5; if(caRight / 2-side+2 * side+step <= mx && mx <= caRight / 2+side+2 * side+step && caBot / 2-step / 2-2 * side <= my && my <= caBot / 2-step / 2) active=6; prepareUpdate(); return super.mouseMove(evt,mx,my);} public boolean keyDown(Event evt,int key) { if(key==Event.UP) { if((evt.modifiers & Event.CTRL_MASK) > 0) { prs.up=1; prs.forward=0;} else { prs.up=0; prs.forward=1;}} else if(key==Event.DOWN) { if((evt.modifiers & Event.CTRL_MASK) > 0) { prs.down=1; prs.backward=0;} else { prs.down=0; prs.backward=1;}} else if(key==Event.LEFT) prs.left=1; else if(key==Event.RIGHT) prs.right=1; prepareUpdate(); return super.keyDown(evt,key);} public boolean keyUp(Event evt,int key) { if(!((evt.modifiers & Event.CTRL_MASK) > 0)) ctrl=0; if(key==Event.UP) prs.up=0; else if(key==Event.DOWN) prs.down=0; else if(key==Event.LEFT) prs.left=0; else if(key==Event.RIGHT) prs.right=0; if(ctrl==0) { prs.up=0; prs.down=0; prs.forward=0; prs.backward=0;} if(prs.up==0) { prs.up=0; prs.forward=0;} if(prs.down==0) { prs.down=0; prs.backward=0;} if(prs.left==0) prs.left=0; if(prs.right==0) prs.right=0; prepareUpdate(); return super.keyUp(evt,key);}}
