package mydev.ct; import java.io.IOException; import mydev.aaa.Enter; import mydev.aaa.Sleeper; import mydev.oneway.OneWay; import mydev.vutils.Ester; import mydev.vutils.Files; import mydev.vutils.Filter; import mydev.vutils.Karta; public class Project { public static void main(String[] args) throws IOException { Project prj=new Project(); Words words=new Words(); words.initWords(); prj.start(words);} private void start(Words words) throws IOException { String workspace="C:\\Users\\fantom\\workspace\\Zhoochka\\"; workspace="C:\\Users\\fantom\\workspace\\Visual\\"; workspace="C:\\Users\\fantom\\workspace\\Subscriber\\"; workspace="C:\\Users\\fantom\\workspace\\Review\\"; workspace="C:\\Users\\fantom\\workspace\\Procedure\\"; workspace="C:\\Users\\fantom\\workspace\\Natural\\"; workspace="C:\\Users\\fantom\\workspace\\Multi\\"; workspace="C:\\Users\\fantom\\workspace\\Liverka\\"; workspace="C:\\Users\\fantom\\workspace\\KoosKoos\\"; workspace="C:\\Users\\fantom\\workspace\\Heuristics\\"; workspace="C:\\Users\\fantom\\workspace\\Gallery\\"; workspace="C:\\Users\\fantom\\workspace\\Format\\"; workspace="C:\\Users\\fantom\\workspace\\Extension\\"; workspace="C:\\Users\\fantom\\workspace\\Delivery\\"; workspace="C:\\Users\\fantom\\workspace\\Backup\\"; workspace="C:\\Users\\fantom\\workspace\\Architecho\\"; Ester[] start=new Files().tree(new Ester(workspace)); Ester ext=new Ester(".java"); Ester[] select=new Filter().endsWithIncensitive(start,new Ester(ext)); ThreadLunch threadLunch=new ThreadLunch(15); for(int i=0; i < select.length; i++) { CheckItem checkItem=new CheckItem(select[i].toString(),i+1,select.length,words); threadLunch.tryExpect(checkItem);} System.out.println("\nfinish()");}} class ThreadLunch { private int curOnline=0; private int thMax; public ThreadLunch(int thMax) { this.thMax=thMax;} public void tryExpect(CheckItem runCur) { Sleeper sleeper=new Sleeper(); while(curOnline >= thMax) sleeper.sleep(199); incr(); runCur.setDecr(this); new Thread(runCur).start();} public synchronized void incr() { curOnline++;} public synchronized void decr() { curOnline--;}} class Words { private Karta words=new Karta(); private Karta specifiers=new Karta(); private Karta controls=new Karta(); public Words() { super();} public void initWords() { Integer obj=new Integer(1); words.put("out",obj); words.put("awt",obj); words.put("lang",obj); words.put("io",obj); words.put("vutils",obj); words.put("hi",obj); words.put("D",obj); words.put("keys",obj); words.put("nehst",obj); words.put("util",obj); words.put("in",obj); words.put("aaa",obj); words.put("oneway",obj); words.put("image",obj); words.put("chars",obj); words.put("item",obj); words.put("zetup",obj); words.put("bbb",obj); words.put("white",obj); words.put("blue",obj); words.put("green",obj); words.put("black",obj); words.put("net",obj); words.put("about",obj); words.put("oline",obj); words.put("extension",obj); words.put("diff",obj); words.put("",obj); words.put("",obj); words.put("",obj); words.put("",obj); words.put("",obj); words.put("",obj); words.put("",obj); specifiers.put("public",obj); specifiers.put("protected",obj); specifiers.put("private",obj); specifiers.put("Button",obj); specifiers.put("Checkbox",obj); specifiers.put("List",obj); specifiers.put("Canvas",obj); specifiers.put("TextField",obj); specifiers.put("TextArea",obj); specifiers.put("Choise",obj); specifiers.put("Label",obj); specifiers.put("",obj); specifiers.put("",obj); specifiers.put("",obj); specifiers.put("",obj); specifiers.put("",obj);} public boolean isSpecifier(String str) { return specifiers.get(str) !=null;} public boolean isControl(String str) { return controls.get(str) !=null;} public boolean isWord(String str) { String symbols="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789"; if(words.get(str) !=null) return false; for(int i=0; i < str.length(); i++) if(symbols.indexOf(str.charAt(i))==-1) return false; return true;}} class CheckItem implements Runnable { private String fPath; private int pos; private int ln; private Words words; private int enc; private ThreadLunch threadLunch; static int threadNum=0; public CheckItem(String fPath,int pos,int ln,Words words) { super(); this.fPath=fPath; this.pos=pos; this.ln=ln; this.words=words;} public void setDecr(ThreadLunch threadLunch) { this.threadLunch=threadLunch;} public int getEnc() { return enc;} public void run() {++threadNum; System.out.print("\n "+pos+"/"+ln+" thNum="+threadNum); byte[] data=new byte[0]; try { data=Enter.instance().io().read(fPath);} catch(IOException e) { e.printStackTrace();} OneWay ow=new OneWay(); String[] parts=ow.check(data); for(int j=0; j < parts.length-1-1; j++) if(new Ester(parts[j]).eq(new Ester(".")) && new Ester(parts[j+1+1]).eq(new Ester(".")) && words.isWord(parts[j+1])) { if(j > 0) System.out.print("\n "+parts[j-1]+parts[j]+parts[j+1]+parts[j+1+1]); else if(j+1+1 < parts.length-1) System.out.print("\n "+parts[j]+parts[j+1]+parts[j+1+1]+parts[j+1+1+1]); else System.out.print("\n "+parts[j]+parts[j+1]+parts[j+1+1]); enc++; System.out.print("   "+fPath);} else if(words.isSpecifier(parts[j]) && words.isControl(parts[j+1])) { System.out.print("\n "+parts[j]+parts[j+1]+parts[j+1+1]); enc++; System.out.print("   "+fPath);} threadLunch.decr();--threadNum;}}