package mydev.sqproj; import mydev.about.Canvas; import mydev.about.FourCornersConture2D; import mydev.about.Paint; import mydev.about.Point2D; import mydev.cs.Bounds; public class SqProj extends FourCornersConture2D { public SqProj(int color) { super(color);} public SqProj(int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4,int c1) { super(x1,y1,x2,y2,x3,y3,x4,y4,c1);} public void encryptSimple() { Point2D tmp1=p1; Point2D tmp2=p2; Point2D tmp3=p3; Point2D tmp4=p4; p1=tmp4; p2=tmp1; p3=tmp2; p4=tmp3;} public void toPen(Canvas ics,Paint pn) { super.toPen(ics,pn.select(this));} public int width() { Bounds cpb=getBounds(); return cpb.getRightX()-cpb.getLeftX();} public int height() { Bounds cpb=getBounds(); return cpb.getBottomY()-cpb.getTopY();} public Bounds getBounds() { Bounds cpb=new Bounds(); cpb.setLeftX((short) getMinX()); cpb.setRightX((short) getMaxX()); cpb.setTopY((short) getMinY()); cpb.setBottomY((short) getMaxY()); return cpb;} public SqProj external() { Bounds cpb=getBounds(); return new SqProj(cpb.getLeftX(),cpb.getTopY(),cpb.getRightX(),cpb.getTopY(),cpb.getRightX(),cpb.getBottomY(),cpb.getLeftX(),cpb.getBottomY(),color);} public SqProj normalize() { Bounds cpb=getBounds(); return new SqProj(p1.getX()-cpb.getLeftX(),p1.getY()-cpb.getTopY(),p2.getX()-cpb.getLeftX(),p2.getY()-cpb.getTopY(),p3.getX()-cpb.getLeftX(),p3.getY()-cpb.getTopY(),p4.getX()-cpb.getLeftX(),p4.getY()-cpb.getTopY(),color);} public static SqProj create(FourCornersConture2D sqProj,boolean turnBack) { if(turnBack) return new SqProj(sqProj.getP4().getX(),sqProj.getP4().getY(),sqProj.getP1().getX(),sqProj.getP1().getY(),sqProj.getP2().getX(),sqProj.getP2().getY(),sqProj.getP3().getX(),sqProj.getP3().getY(),sqProj.getColor()); return new SqProj(sqProj.getP3().getX(),sqProj.getP3().getY(),sqProj.getP2().getX(),sqProj.getP2().getY(),sqProj.getP1().getX(),sqProj.getP1().getY(),sqProj.getP4().getX(),sqProj.getP4().getY(),sqProj.getColor());}}