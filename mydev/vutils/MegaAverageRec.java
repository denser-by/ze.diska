package mydev.vutils; import mydev.vutils.AverageRec; import mydev.vutils.Spiska; public class MegaAverageRec extends AverageRec { protected Spiska ars; public MegaAverageRec() { super(); this.ars=new Spiska();} public void clearItems() { if(ars !=null) for(int i=0; i < ars.size(); i++)((AverageRec) ars.at(i)).clearItems();} public void addItem(AverageRec ar) { ars.append(ar);} public double getAverageTime() { double avgTime=0.f; for(int i=0; i < ars.size(); i++) { double at=((AverageRec) ars.at(i)).getAverageTime(); if(at > 0.f) { avgTime *= i; avgTime+=at; avgTime /=(i+1);}} return avgTime;} public long getRecordsNum() { int num=0; for(int i=0; i < ars.size(); i++) num+=((AverageRec) ars.at(i)).getRecordsNum(); return num;} public double getMinTime() { double minTime=Float.MAX_VALUE; for(int i=0; i < ars.size(); i++) { double mt=((AverageRec) ars.at(i)).getMinTime(); double at=((AverageRec) ars.at(i)).getAverageTime(); if(at > 0.f) { if(mt < minTime) minTime=mt;}} return minTime;} public double getMaxTime() { double maxTime=0.f; for(int i=0; i < ars.size(); i++) { double mt=((AverageRec) ars.at(i)).getMaxTime(); double at=((AverageRec) ars.at(i)).getAverageTime(); if(at > 0.f) { if(mt > maxTime) maxTime=mt;}} return maxTime;}}