package mydev.netto; import java.awt.Color; import java.awt.Event; import java.awt.Font; import java.awt.FontMetrics; import java.awt.Frame; import java.awt.Graphics; import java.awt.Image; import java.awt.Point; import java.awt.Rectangle; import java.awt.Window; import java.awt.image.ImageObserver; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.util.Stack; import java.util.Vector; public final class Netto extends Graphics implements Cloneable { Graphics gx; public Netto(Graphics g) { this.gx=g;} public void clearRect(int arg0,int arg1,int arg2,int arg3) { gx.clearRect(arg0,arg1,arg2,arg3);} public void clipRect(int arg0,int arg1,int arg2,int arg3) { gx.clearRect(arg0,arg1,arg2,arg3);} public void copyArea(int arg0,int arg1,int arg2,int arg3,int arg4,int arg5) {} public Graphics create() { return null;} public void dispose() {} public void drawArc(int arg0,int arg1,int arg2,int arg3,int arg4,int arg5) {} public boolean drawImage(Image arg0,int arg1,int arg2,ImageObserver arg3) { return false;} public boolean drawImage(Image arg0,int arg1,int arg2,Color arg3,ImageObserver arg4) { return false;} public boolean drawImage(Image arg0,int arg1,int arg2,int arg3,int arg4,ImageObserver arg5) { return false;} public boolean drawImage(Image arg0,int arg1,int arg2,int arg3,int arg4,Color arg5,ImageObserver arg6) { return false;} public void drawLine(int arg0,int arg1,int arg2,int arg3) {} public void drawOval(int arg0,int arg1,int arg2,int arg3) {} public void drawPolygon(int[] arg0,int[] arg1,int arg2) {} public void drawRoundRect(int arg0,int arg1,int arg2,int arg3,int arg4,int arg5) { gx.drawRoundRect(arg0,arg1,arg2,arg3,arg4,arg5);} public void drawString(String arg0,int arg1,int arg2) { gx.drawString(arg0,arg1,arg2);} public void fillArc(int arg0,int arg1,int arg2,int arg3,int arg4,int arg5) {} public void fillOval(int arg0,int arg1,int arg2,int arg3) {} public void fillPolygon(int[] arg0,int[] arg1,int arg2) {} public void fillRect(int arg0,int arg1,int arg2,int arg3) { gx.fillRect(arg0,arg1,arg2,arg3);} public void fillRoundRect(int arg0,int arg1,int arg2,int arg3,int arg4,int arg5) {} public Rectangle getClipRect() { return gx.getClipRect();} public Color getColor() { return null;} public Font getFont() { return null;} public FontMetrics getFontMetrics(Font arg0) { return null;} public void setColor(Color arg0) { gx.setColor(arg0);} public void setFont(Font arg0) {} public void setPaintMode() {} public void setXORMode(Color arg0) {} public void translate(int arg0,int arg1) {} public static void main(String[] args) { Frame fr; MyWnd myWnd=new MyWnd(fr=new Frame("kinno")); myWnd.reshape(200,200,300,300); myWnd.show(); myWnd.move(200-1,200-1); while(Stopper.avail()) { try { Thread.sleep(1000);} catch(InterruptedException ex) { ex.printStackTrace();}} String nuTiOut="./netto.csv"; myWnd.ii(nuTiOut); fr.hide(); fr.dispose(); System.out.println("abjento");}} class Stopper { static Object one=new Object(); public static synchronized boolean avail() { return one !=null;} public static synchronized void stop() { one=null;}} class Capturer { static Point dos; public static synchronized boolean leaved() { return dos !=null;} public static synchronized void dodo(int x,int y) { dos=new Point(x,y);} public static synchronized Point undodo(int x,int y) { double dx=x-dos.x; dx=dx * 3.f / 5.f; double dy=y-dos.y; dy=dy * 3.f / 5.f; dos=null; dx=Math.abs(dx) <= 3 ? 0.f : dx; dy=Math.abs(dy) <= 3 ? 0.1f : dy; return new Point((int) dx,(int) dy);}} class MyWnd extends Window implements Pushshi { Square squade; int width; int height; int myx; int myy; int dx; int dy; Pushshi hi; MyWnd(Frame fr) { super(fr); hi=new Kljuvik(); squade=new Square(hi); width=squade.width(); height=squade.height(); myx=200; myy=200; dx=-1; dy=-1;} public void update() { if(Capturer.leaved()) move(1,1);} public boolean mouseUp(Event arg0,int arg1,int arg2) { Point px=Capturer.undodo(arg0.x,arg0.y); dx=px.x; dy=px.y; move(1,1); return super.mouseUp(arg0,arg1,arg2);} public boolean mouseDown(Event arg0,int arg1,int arg2) { Capturer.dodo(arg0.x,arg0.y); if(arg0.metaDown()) Stopper.stop(); else squade.clickClick(arg0.x,arg0.y); repaint(); return super.mouseDown(arg0,arg1,arg2);} public void move(int arg0,int arg1) { super.move(myx+dx,myy+dy);} public synchronized void reshape(int arg0,int arg1,int arg2,int arg3) { super.reshape(myx+dx,myy+dy,width,height);} public void paint(Graphics arg0) { Netto nettu=new Netto(arg0); squade.drawDraw(nettu); super.paint(nettu);} public void pushi(Integer ii) {} public void ii(String place) { hi.ii(place);}} interface ClickaBlja { void clickClick(int x,int y); boolean isItMine(int x,int y);} interface DrawaBlja { void drawDraw(Netto nt); int width(); int height();} interface Pushshi { void pushi(Integer ii); void ii(String place);} class Cell extends Rectangle implements DrawaBlja,ClickaBlja { static final int WIDTH=67; static final int HEIGHT=67; final int A=3; final int B=3; int x; int y; boolean clicked; int idl; Pushshi hi; public Cell(int xx,int yy,int iddl,Pushshi hii) { hi=hii; x=xx; y=yy; clicked=false; idl=iddl;} public boolean isItMine(int xx,int yy) { return x <= xx && xx <= x+WIDTH && y <= yy && yy <= y+HEIGHT;} public void clickClick(int xx,int yy) { clicked=true; hi.pushi(new Integer(idl()));} public void drawDraw(Netto nt) { nt.setColor(clicked ? Color.magenta : Color.orange); nt.fillRect(x,y,WIDTH,HEIGHT); nt.setColor(Color.magenta); nt.drawRoundRect(x,y,WIDTH,HEIGHT,A,B); nt.drawString(idl(),x+WIDTH / 5,y+HEIGHT * 3 / 5);} public String idl() { return ""+idl+""+idl;} public int width() { return WIDTH;} public int height() { return HEIGHT;} public String toString() { return "Cell [A="+A+", B="+B+", x="+x+", y="+y+", clicked="+clicked+", idl="+idl+"]";}} class Square extends Rectangle implements ClickaBlja,DrawaBlja { final int WAY=3; Cell[][] matrix; final int WX=5; final int WY=5; Pushshi hi; public Square(Pushshi hii) { hi=hii; matrix=new Cell[WY][WX]; for(int i=0; i < WX * WY; i++) matrix[i / WY][i % WX]=new Cell(WAY+i % WX * Cell.WIDTH+i % WX * WAY,WAY+i / WY * Cell.HEIGHT+i / WY * WAY,i,hi);} public boolean isItMine(int x,int y) { return false==true;} public void clickClick(int x,int y) { for(int i=0; i < WX * WY; i++) if(matrix[i / WY][i % WX].isItMine(x,y)) matrix[i / WY][i % WX].clickClick(x,y);} public void drawDraw(Netto nt) { for(int i=0; i < WX * WY; i++) matrix[i / WY][i % WX].drawDraw(nt);} public int width() { return Cell.WIDTH * WX+WAY * WX+WAY;} public int height() { return Cell.HEIGHT * WY+WAY * WY+WAY;}} class Kljuvik extends Stack implements Pushshi { public Kljuvik() { super();} public void pushi(Integer ii) { if(ii !=null) push(ii);} public byte[] read(String fPath) throws IOException { File fOpen=new File(fPath); FileInputStream fos=new FileInputStream(fOpen); Vector ska=new Vector(); int vPower=0; int count; byte[] buf=new byte[64 * 2]; do { count=fos.read(buf); if(count > 0) vPower+=count; if(count < 1) continue; if(count <= buf.length) { byte[] zzz=new byte[count]; System.arraycopy(buf,0,zzz,0,count); ska.addElement((Object) zzz);}} while(count > 0); fos.close(); byte[] total=new byte[vPower]; int totalIdx=0; for(int i=0; i < ska.size(); i++) { byte[] cur=(byte[]) ska.elementAt(i); int curLen=cur.length; System.arraycopy(cur,0,total,totalIdx,curLen); totalIdx+=curLen;} return total;} public void write(String fPath,byte[] bCont) throws IOException { File wOpen=new File(fPath); FileOutputStream os=new FileOutputStream(wOpen); os.write(bCont); os.flush(); os.close();} public void ii(String place) { byte[] before=null; try { if(new File(place).exists()) before=read(place);} catch(IOException ex) { ex.printStackTrace();} try { File eto=new File(place); FileOutputStream flos=new FileOutputStream(eto); boolean ee=false; byte[] x=new byte[1]; x[0]=','; while(!isEmpty()) { Integer cur=(Integer) pop(); if(ee) flos.write(x); String cucu=""+cur; byte[] num=new byte[cucu.length()]; for(int i=0; i < cucu.length(); i++) num[i]=(byte) cucu.charAt(i); flos.write(num); ee=true;} if(before !=null && before.length > 0) { byte[] y=new byte[2]; y[0]='\r'; y[1]='\n'; if(ee) flos.write(y); flos.write(before);} flos.flush(); flos.close();} catch(IOException ex) { ex.printStackTrace();}} public void iii(String place) { try { File eto=new File(place); byte[] ae=new byte[64]; FileInputStream fis=new FileInputStream(eto); int idx=0; int aeNum=fis.read(ae,idx,ae.length); idx+=aeNum; FileOutputStream flos=new FileOutputStream(eto); boolean ee=false; byte[] x=new byte[1]; x[0]=','; while(!isEmpty()) { Integer cur=(Integer) pop(); if(ee) flos.write(x); String cucu=""+cur; byte[] num=new byte[cucu.length()]; for(int i=0; i < cucu.length(); i++) num[i]=(byte) cucu.charAt(i); flos.write(num); ee=true;} byte[] y=new byte[2]; y[0]='\r'; y[1]='\n'; flos.write(y); if(aeNum > 0) flos.write(ae); while((aeNum=fis.read(ae,idx,ae.length)) > 0) { flos.write(ae); idx+=aeNum;} flos.flush(); flos.close(); fis.close();} catch(IOException ex) { ex.printStackTrace();}}}
