package mydev.pb; import java.awt.BorderLayout; import java.awt.Button; import java.awt.Canvas; import java.awt.Checkbox; import java.awt.Choice; import java.awt.Color; import java.awt.Dimension; import java.awt.Event; import java.awt.FlowLayout; import java.awt.Frame; import java.awt.Graphics; import java.awt.Image; import java.awt.Label; import java.awt.LayoutManager; import java.awt.Panel; import java.awt.Point; import java.awt.TextField; import java.awt.Toolkit; import java.awt.image.ColorModel; import java.awt.image.ImageConsumer; import java.awt.image.ImageObserver; import java.io.File; import java.util.Date; import java.util.Hashtable; import mydev.aaa.Sleeper; import mydev.about.Bitmap; import mydev.about.CanvasAdapter; import mydev.about.CanvasAdapterAboutImpl; import mydev.about.PaintAdapter; import mydev.about.PaintAdapterAboutImpl; import mydev.anim.ColorsAnimation; import mydev.anim.ColorsLogo; import mydev.bbb.Enter2; import mydev.bbb.Location; import mydev.im12x.BackupResolution; import mydev.im12x.FetchImageParty; import mydev.im12x.ImageFile; import mydev.im12x.ImageFileException; import mydev.im12x.ImageParty; import mydev.im12x.OnceFetchImageParty; import mydev.uix.AmountPanel; import mydev.uix.AveragePanel; import mydev.uix.Better; import mydev.uix.CommonDataArrayPanel; import mydev.uix.CommonLogPanel; import mydev.uix.CommonLogo; import mydev.uix.CommonSouthPanel; import mydev.uix.ControlsPanel; import mydev.uix.HeaderPathPanel; import mydev.uix.LabeledEditPair; import mydev.uix.LabeledPanel; import mydev.uix.ListPanel; import mydev.uix.LoggingVkusnjashki; import mydev.uix.LongTermCtrl; import mydev.uix.MultyButtonTiersBuilder; import mydev.uix.PagesPanel; import mydev.uix.ProgressBar; import mydev.uix.ProgressMultiTasking; import mydev.uix.Props; import mydev.uix.SizePanel; import mydev.uix.Timer; import mydev.uix.ToogleMultyButton; import mydev.uix.YellowAutoButton; import mydev.vutils.AverageRec; import mydev.vutils.Data; import mydev.vutils.Ester; import mydev.vutils.ExpectHere; import mydev.vutils.Files; import mydev.vutils.Filter; import mydev.vutils.Join; import mydev.vutils.Metr; import mydev.vutils.Queue; import mydev.vutils.SharedGreatesArray; import mydev.vutils.Stack; import mydev.vutils.Stoish; import mydev.vutils.Time; import mydev.vutils.TimeTracking; public class Itor extends Frame { final static boolean PROC=false; final static int DEF_INTEGRATION_TYPE=1+1; ItorPathPanel pathPanel; PicturesLeftPanel leftPanel; BackupImagesPanel rightPanel; protected BcController bcCtrl; CanvasCenterPanel cvPanel; ItorSouthPanel southPanel; ItorLogPanel logPanel; private long lastTime=new Date().getTime(); private CommandPbQueue cq=new CommandPbQueue(); private PbCommand cmdEnable=null; boolean modeFull=true; private String prevSelectedExt; private boolean lastScan; public Itor() { super(); setLayout(new BorderLayout()); setBackground(Color.darkGray); this.pathPanel=new ItorPathPanel(); add("North",pathPanel.getWrapPanel()); add("West",leftPanel=new PicturesLeftPanel()); this.southPanel=new ItorSouthPanel(); this.logPanel=southPanel.getLogPanel(); this.cvPanel=new CanvasCenterPanel(logPanel); add("East",rightPanel=new BackupImagesPanel(logPanel,cvPanel.getCv())); add("Center",new LabeledPanel("",cvPanel,1+1,Color.white,Color.white,Color.black)); add("South",southPanel); this.bcCtrl=new BcController(leftPanel,rightPanel,pathPanel,cvPanel.getBcSetsPanel()); processFormatSelection();} public static void main(String[] args) { System.out.println(""+Toolkit.getDefaultToolkit().getScreenSize().toString()); Itor main=new Itor(); main.setTitle("Leaves Days Integrity"); main.show(); main.start(); main.pack(); main.reMoveRnd(); main.resize(Enter2.instance().getMainWindowsWidth(),Enter2.instance().getMainWindowsHeight()); if(args.length > 0) main.setInputFolder(args[0]); Sleeper sleeper=new Sleeper(); if(Props.mainLower) Thread.currentThread().setPriority(Thread.MIN_PRIORITY); while(Better.working) { main.refreshUpdatable(); TimeTracking.memTrack(); sleeper.sleep(Timer.DEF_REF_TIME);} main.hide(); main.dispose(); System.exit(1-1);} protected void start() {} protected void reMoveRnd() { Location ol=Enter2.instance().location(); Point p=ol.getRandomExternalPos((short) Location.MAIN_WINDOWS_WIDTH,(short) Location.MAIN_WINDOWS_HEIGHT); move(p.x,p.y);} public boolean hasLongTermContin() { return pathPanel.hasLongTermContin();} public void setInputFolder(String pathParam) { pathPanel.setPath(pathParam);} private void refreshUpdatable() { if(cq.hasSomeWork()) { PbCommand cmd=cq.nextCurrent(); if(cmd.getId()==PbCommand.ID_ENABLE_CTRLS) { cmdEnable=cmd;} else if(cmd.getId()==PbCommand.ID_SCAN_LEFT && cq.hasConditionComplete(cmd)) { if(cq.hasRunAgainCondition(cmd)) { String path=pathPanel.getPath(); String ext=pathPanel.getSelectedExtension(); leftPanel.clearItems(); ScanPicturesLeftTask scanPicturesLeft=new ScanPicturesLeftTask(path,ext,logPanel,bcCtrl,cmd); logPanel.regTreckableTask(scanPicturesLeft); new Thread(scanPicturesLeft).start();}} else if(cmd.getId()==PbCommand.ID_SCAN_RIGHT && cq.hasConditionComplete(cmd)) { if(cq.hasRunAgainCondition(cmd)) { String path=pathPanel.getPath(); rightPanel.clearItems(); ScanBackupRightTask scanBackupRight=new ScanBackupRightTask(path,logPanel,bcCtrl,cmd); logPanel.regTreckableTask(scanBackupRight); new Thread(scanBackupRight).start();}} else if(cmd.getId()==PbCommand.ID_BACKUP_ALL_LEFT && cq.hasConditionComplete(cmd)) { bcCtrl.disableBackupCtrls(); rightPanel.clearItems(); rightPanel.selectNothing(); BackupAllLeftTask backupAllLeftTask=new BackupAllLeftTask(leftPanel,cvPanel.getCv(),bcCtrl,logPanel,cmd); logPanel.regTreckableTask(backupAllLeftTask); new Thread(backupAllLeftTask).start();} else if(cmd.getId()==PbCommand.ID_VIEW_ALL_RIGHT && cq.hasConditionComplete(cmd)) { bcCtrl.disableBackupCtrls(); leftPanel.selectNothing(); ViewAllRightTask viewAllRightTask=new ViewAllRightTask(rightPanel,cvPanel.getCv(),logPanel,bcCtrl,cmd); logPanel.regTreckableTask(viewAllRightTask); new Thread(viewAllRightTask).start();} else if(cmd.getId()==PbCommand.ID_DELETE_ALL_RIGHT && cq.hasConditionComplete(cmd)) { bcCtrl.disableBackupCtrls(); leftPanel.selectNothing(); EraseAllRightTask eraseAllRightTask=new EraseAllRightTask(rightPanel,logPanel,bcCtrl,cmd); logPanel.regTreckableTask(eraseAllRightTask); new Thread(eraseAllRightTask).start();} else if(cmd.getId()==PbCommand.ID_INTEGRATE_ALL_RIGHT && cq.hasConditionComplete(cmd)) { bcCtrl.disableBackupCtrls(); String path=pathPanel.getPath(); int type=Itor.DEF_INTEGRATION_TYPE; String bcExt=leftPanel.getSelectedExtension(); leftPanel.selectNothing(); IntegrateAllRightTask integrateAllRightTask=new IntegrateAllRightTask(rightPanel,cvPanel.getCv(),logPanel,bcCtrl,type,path,cmd); integrateAllRightTask.setBcExt(bcExt); logPanel.regTreckableTask(integrateAllRightTask); new Thread(integrateAllRightTask).start();} else cq.rollbackCurrent();} if(cmdEnable !=null && cmdEnable.getId()==PbCommand.ID_ENABLE_CTRLS) { if(cmdEnable.isComplete()) { bcCtrl.enableBackupCtrls(); bcCtrl.getPathPanel().disableStop(); cmdEnable=null; if(rightPanel.hasContinue()) startAutoIntegration(); else if(pathPanel.getPreview() && !lastScan) { Sleeper sleeper=new Sleeper(); rightPanel.ironCurta(sleeper); pathPanel.setPreview(false); sleeper.sleep(166 * 2); new Better().exitApplicationLoop();}}} pathPanel.refreshUpdatable(); leftPanel.updateOnUiThread(); rightPanel.updateOnUiThread(); cvPanel.getCv().refreshUpdatable(); southPanel.refreshUpdatable();} public boolean handleEvent(Event et) { PbCommand c1; PbCommand c2; PbCommand c3; PbCommand c4; PbCommand c5; if(et.id==Event.WINDOW_DESTROY) new Better().exitApplicationLoop(); if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getBtStop()) { rightPanel.markNoAuto(); bcCtrl.getPathPanel().disableStop();} if(et.key==Event.F1 && et.id==Event.KEY_ACTION) { modeFull=!modeFull; if(modeFull) { leftPanel.show(); rightPanel.show(); logPanel.show();} else { leftPanel.hide(); rightPanel.hide(); logPanel.hide();} pack();} if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getChPreview()) { if(pathPanel.getPreview()) { prevSelectedExt=leftPanel.getSelectedExt(); leftPanel.selectChExt(ImageFile.BC_BOTH_EXT);} else leftPanel.selectChExt(prevSelectedExt); processFormatSelection();} if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getBtScan()) { logPanel.prognoseTasks(1+1); bcCtrl.getPathPanel().enableStop(); lastScan=true; rightPanel.markNoAuto(); bcCtrl.disableBackupCtrls(); cq.push(c1=PbCommand.create(PbCommand.ID_SCAN_LEFT,null)); cq.push(c2=PbCommand.create(PbCommand.ID_SCAN_RIGHT,null)); cq.push(PbCommand.createComposite(PbCommand.ID_ENABLE_CTRLS,c1,c2)); if(PROC) updateInfo(new Date().getTime());} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getBackupBtn()) { logPanel.prognoseTasks(1+1+1); bcCtrl.getPathPanel().enableStop(); lastScan=false; rightPanel.markNoAuto(); bcCtrl.disableBackupCtrls(); cq.push(c1=PbCommand.create(PbCommand.ID_SCAN_LEFT,null)); cq.push(c2=PbCommand.create(PbCommand.ID_BACKUP_ALL_LEFT,c1)); cq.push(c3=PbCommand.create(PbCommand.ID_SCAN_RIGHT,c2)); cq.push(PbCommand.createComposite(PbCommand.ID_ENABLE_CTRLS,c1,c2,c3)); if(PROC) backupAllLeftImages();} if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getAutoBtn()) { logPanel.prognoseTasks(1+1+1+1+1); bcCtrl.getPathPanel().enableStop(); lastScan=false; rightPanel.markAuto(); rightPanel.initialAutoCheck(); startAutoIntegration();} if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getBtDelAll()) { logPanel.prognoseTasks(1+1+1+1); bcCtrl.getPathPanel().enableStop(); lastScan=false; rightPanel.markNoAuto(); bcCtrl.disableBackupCtrls(); cq.push(c1=PbCommand.create(PbCommand.ID_SCAN_RIGHT,null)); cq.push(c2=PbCommand.create(PbCommand.ID_DELETE_ALL_RIGHT,c1)); cq.push(c3=PbCommand.create(PbCommand.ID_SCAN_LEFT,c1)); cq.push(c4=PbCommand.create(PbCommand.ID_SCAN_RIGHT,c2)); cq.push(PbCommand.createComposite(PbCommand.ID_ENABLE_CTRLS,c1,c2,c3,c4)); if(PROC) eraseAllRightImages();} if(et.id==Event.ACTION_EVENT && et.target==cvPanel.getBcSets().getChExt()) cvPanel.getBcSets().enableSizeCtrls(cvPanel.getBcSets().isNewSizes()); if(et.id==Event.ACTION_EVENT && et.target==cvPanel.getBcCutSets().getCbCut()) cvPanel.getBcCutSets().enableSizeCtrls(cvPanel.getBcCutSets().getCbCut().getState()); if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getChoiceImportExtension()) processImportFormatSelection(); if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getChoiceExtension()) processFormatSelection(); if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getBtViewAll()) { logPanel.prognoseTasks(1+1+1); bcCtrl.getPathPanel().enableStop(); lastScan=false; rightPanel.markNoAuto(); bcCtrl.disableBackupCtrls(); cq.push(c1=PbCommand.create(PbCommand.ID_SCAN_RIGHT,null)); cq.push(c2=PbCommand.create(PbCommand.ID_VIEW_ALL_RIGHT,c1)); cq.push(c3=PbCommand.create(PbCommand.ID_SCAN_LEFT,c1)); cq.push(PbCommand.createComposite(PbCommand.ID_ENABLE_CTRLS,c1,c2,c3)); if(PROC) viewAllRightImages();} if(et.id==Event.LIST_SELECT && leftPanel.isItemsCtrl(et.target)) { System.out.println("---list-left-select"); rightPanel.markNoAuto(); rightPanel.selectNothing(); leftPanel.setSelected(); ExpectHere eh=new ExpectHere(5 / 4); AverageRec ar=new AverageRec(); long num=leftPanel.itemsNum(); String[] bcExts=leftPanel.getBackupExtensions(); BackupResolution br=bcCtrl.getBcSetsPanel().getBackupResolution(); LeftSelectActivity leftSelectActivity=new LeftSelectActivity(leftPanel,eh,ar,cvPanel.getCv(),logPanel,num,bcExts,br); leftSelectActivity.lunchActivity();} if(et.id==Event.LIST_SELECT && rightPanel.isItemsCtrl(et.target)) { System.out.println("---list-right-select"); rightPanel.markNoAuto(); leftPanel.selectNothing(); rightPanel.setSelected(); ExpectHere eh=new ExpectHere(5 / 4); AverageRec ar=new AverageRec(); long num=rightPanel.itemsNum(); new RightSelectActivity(rightPanel,eh,ar,logPanel,cvPanel.getCv(),num).lunchActivity();} return super.handleEvent(et);} private void processImportFormatSelection() { String selExt=pathPanel.getSelectedExtension(); leftPanel.setImportingExt(selExt);} private void startAutoIntegration() { PbCommand c1; PbCommand c2; PbCommand c3; PbCommand c4; PbCommand c5; bcCtrl.disableBackupCtrls(); int autoCount=rightPanel.getAutoCount(); if(autoCount >= 1) { cvPanel.getCv().clearIntegration(); cq.push(c1=PbCommand.create(PbCommand.ID_SCAN_LEFT,null)); cq.push(c2=PbCommand.create(PbCommand.ID_BACKUP_ALL_LEFT,c1)); cq.push(c3=PbCommand.create(PbCommand.ID_SCAN_RIGHT,c2)); cq.push(c4=PbCommand.create(PbCommand.ID_INTEGRATE_ALL_RIGHT,c3)); cq.push(c5=PbCommand.create(PbCommand.ID_SCAN_RIGHT,c4)); cq.push(PbCommand.createComposite(PbCommand.ID_ENABLE_CTRLS,c1,c2,c3,c4,c5)); if(PROC) integrateAllRightImages();} else bcCtrl.enableBackupCtrls();} private void processFormatSelection() { String selExt=leftPanel.getSelectedExtension(); rightPanel.setExtension(selExt);} private void integrateAllRightImages() { bcCtrl.disableBackupCtrls(); String path=pathPanel.getPath(); String ext=pathPanel.getSelectedExtension(); ScanBackupRightTask scanRightBefore=new ScanBackupRightTask(path,logPanel,bcCtrl,null); ScanBackupRightTask scanRight=new ScanBackupRightTask(path,logPanel,bcCtrl,null); ScanPicturesLeftTask scanLeft=new ScanPicturesLeftTask(path,ext,logPanel,bcCtrl,null); rightPanel.selectNothing(); BackupAllLeftTask backupLeft=new BackupAllLeftTask(leftPanel,cvPanel.getCv(),bcCtrl,logPanel,null); int type=Itor.DEF_INTEGRATION_TYPE; String bcExt=leftPanel.getSelectedExtension(); leftPanel.selectNothing(); IntegrateAllRightTask integrateAllRightTask=new IntegrateAllRightTask(rightPanel,cvPanel.getCv(),logPanel,bcCtrl,type,path,null); integrateAllRightTask.setBcExt(bcExt); new Thread(integrateAllRightTask).start();} private void viewAllRightImages() { String path=pathPanel.getPath(); ScanBackupRightTask scanRight=new ScanBackupRightTask(path,logPanel,bcCtrl,null); bcCtrl.disableBackupCtrls(); leftPanel.selectNothing(); new Thread(new ViewAllRightTask(rightPanel,cvPanel.getCv(),logPanel,bcCtrl,null)).start();} private void eraseAllRightImages() { String path=pathPanel.getPath(); bcCtrl.disableBackupCtrls(); ScanBackupRightTask scanRightBefore=new ScanBackupRightTask(path,logPanel,bcCtrl,null); ScanBackupRightTask scanRight=new ScanBackupRightTask(path,logPanel,bcCtrl,null); leftPanel.selectNothing(); new Thread(new EraseAllRightTask(rightPanel,logPanel,bcCtrl,null)).start();} private void backupAllLeftImages() { String path=pathPanel.getPath(); String ext=pathPanel.getSelectedExtension(); bcCtrl.disableBackupCtrls(); rightPanel.clearItems(); ScanPicturesLeftTask scanLeft=new ScanPicturesLeftTask(path,ext,logPanel,bcCtrl,null); ScanBackupRightTask scanRight=new ScanBackupRightTask(path,logPanel,bcCtrl,null); rightPanel.selectNothing(); new Thread(new BackupAllLeftTask(leftPanel,cvPanel.getCv(),bcCtrl,logPanel,null)).start();} private void updateInfo(long time) { if(time-lastTime < 997) return; bcCtrl.disableBackupCtrls(); String path=pathPanel.getPath(); String ext=pathPanel.getSelectedExtension(); rightPanel.clearItems(); leftPanel.clearItems(); new Thread(new ScanPicturesLeftTask(path,ext,logPanel,bcCtrl,null)).start(); new Thread(new ScanBackupRightTask(path,logPanel,bcCtrl,null)).start(); lastTime=time;}} interface ImageCompleteNotifier { void readyDone();} class ImageBackupConsumer implements ImageConsumer { private ImageWriter imageWriter; private ImageParty imageParty=new ImageParty(); private Image photo; private String curPath; private String[] backupExts; LoggingVkusnjashki logPanel; private ExpectHere procNextMarker; private BackupResolution br; private SharedGreatesArray colorSwap; private SharedGreatesArray imageSwap; private ImageCompleteNotifier imageCompleteNotifier; public ImageBackupConsumer(LoggingVkusnjashki logPanel,SharedGreatesArray colorSwap,SharedGreatesArray imageSwap,ImageCompleteNotifier imageCompleteNotifier) { super(); this.imageCompleteNotifier=imageCompleteNotifier; this.logPanel=logPanel; this.colorSwap=colorSwap; this.imageSwap=imageSwap; this.imageWriter=new ImageWriter(logPanel); clear();} void clear() { this.imageParty=new ImageParty(); this.photo=null; this.curPath=null; this.backupExts=null; this.procNextMarker=null;} public void setProperties(Hashtable props) {} public void setColorModel(ColorModel cm) {} public void setDimensions(int width,int height) {} public void setHints(int flags) {} public String arrayToString(int[] pixels) { String res=""; if(pixels !=null) for(int i=0; i < pixels.length; i++) if(i==0) res+=pixels[i]; else res+=", "+pixels[i]; return res;} public String arrayToString(byte[] pixels) { String res=""; if(pixels !=null) for(int i=0; i < pixels.length; i++) if(i==0) res+=pixels[i]; else res+=", "+pixels[i]; return res;} public void setPixels(int x,int y,int w,int h,ColorModel cm,byte[] pixels,int off,int scansize) {} public void setPixels(int x,int y,int w,int h,ColorModel cm,int[] pixels,int off,int scansize) { try { imageParty.copyPart(pixels,scansize);} catch(ImageFileException e) { e.printStackTrace();}} public void imageComplete(int status) { if(status==ImageConsumer.STATICIMAGEDONE) { logPanel.addLog("Complete image display loading"); photo.getSource().removeConsumer(this); try { OnceFetchImageParty fetch=new OnceFetchImageParty(imageParty,br); String newPath=curPath.substring(0,curPath.lastIndexOf('.')); String extOrig=curPath.substring(newPath.length()); imageWriter.write(newPath,backupExts,fetch,procNextMarker,extOrig,colorSwap,imageSwap); imageCompleteNotifier.readyDone();} catch(Throwable th) { logPanel.addLog("fetch ERROR:"+th.getMessage()); th.printStackTrace();} this.imageParty=new ImageParty();}} public void updateCurrent(Image photo,String picturePath,String[] backupExts,ExpectHere procNextMarker,BackupResolution br) { this.photo=photo; this.curPath=picturePath; this.backupExts=backupExts; this.procNextMarker=procNextMarker; this.br=br;}} class ContrastLabeledEditPairWrap extends LabeledEditPair { protected Color bgContrastColor=ItorProps.bgCutFieldColor; public ContrastLabeledEditPairWrap(String labelText,int editTextValue,int editWidth) { super(labelText,""+editTextValue,editWidth); setBackground(bgContrastColor);} public Color getPanelBgColor() { return bgContrastColor;} public void setEditable(boolean enable) { tfValue.setEditable(enable);} public TextField getTfValue() { return tfValue;}} class BackupSidesCutSettings extends ControlsPanel { final static String CB_CUT="cbCut"; final static String TF_LEFT_WRAP="tfLeftWrap"; final static String TF_TOP_WRAP="tfTopWrap"; final static String TF_RIGHT_WRAP="tfRightWrap"; final static String TF_BOTTOM_WRAP="tfBottomWrap"; Checkbox cbCut; ContrastLabeledEditPairWrap cwLeft; ContrastLabeledEditPairWrap cwTop; ContrastLabeledEditPairWrap cwRight; ContrastLabeledEditPairWrap cwBottom; private String lastSelLeftCut; private String lastSelTopCut; private String lastSelRightCut; private String lastSelBottomCut; public BackupSidesCutSettings() { super(); enableCtrls(false); cbCut.enable(!true); cwLeft.setEditable(false); cwTop.setEditable(false); cwRight.setEditable(false); cwBottom.setEditable(false); chooseCurrent();} private void chooseCurrent() { boolean reduce=true; enableCtrls(reduce); cbCut.setState(reduce); enableSizeCtrls(reduce);} public Color getPanelBgColor() { return ItorProps.bgCutPanelColor;} public LayoutManager getPanelLayout() { return new FlowLayout(FlowLayout.CENTER,ItorProps.SPS,ItorProps.SPS);} protected void buildPanel() { cbCut=new Checkbox("Cut"); append(CB_CUT,cbCut); append(TF_LEFT_WRAP,cwLeft=new ContrastLabeledEditPairWrap("Left:",ItorProps.BACKUP_SIDE_CUT,5-1-1+1+1-1-1)); append(TF_TOP_WRAP,cwTop=new ContrastLabeledEditPairWrap("Top:",ItorProps.BACKUP_SIDE_CUT,5-1-1+1+1-1-1)); append(TF_RIGHT_WRAP,cwRight=new ContrastLabeledEditPairWrap("Right:",ItorProps.BACKUP_SIDE_CUT,5-1-1+1+1-1-1)); append(TF_BOTTOM_WRAP,cwBottom=new ContrastLabeledEditPairWrap("Bottom:",ItorProps.BACKUP_SIDE_CUT,5-1-1+1+1-1-1));} public void enableCtrls(boolean enable) {((Checkbox) getCtrl(CB_CUT)).enable(enable); if(getCtrl(TF_LEFT_WRAP) !=null)((ContrastLabeledEditPairWrap) getCtrl(TF_LEFT_WRAP)).enableCtrls(enable); if(getCtrl(TF_TOP_WRAP) !=null)((ContrastLabeledEditPairWrap) getCtrl(TF_TOP_WRAP)).enableCtrls(enable); if(getCtrl(TF_RIGHT_WRAP) !=null)((ContrastLabeledEditPairWrap) getCtrl(TF_RIGHT_WRAP)).enableCtrls(enable); if(getCtrl(TF_BOTTOM_WRAP) !=null)((ContrastLabeledEditPairWrap) getCtrl(TF_BOTTOM_WRAP)).enableCtrls(enable);} public Checkbox getCbCut() { return cbCut;} public TextField getTfLeft() { return cwLeft.getTfValue();} public TextField getTfTop() { return cwTop.getTfValue();} public TextField getTfRight() { return cwRight.getTfValue();} public TextField getTfBottom() { return cwBottom.getTfValue();} public int getCutLeft() { String text=cwLeft.getText(); if(text.length() > 0) return Integer.parseInt(text); return 0;} public int getCutTop() { String text=cwTop.getText(); if(text.length() > 0) return Integer.parseInt(text); return 0;} public int getCutRight() { String text=cwRight.getText(); if(text.length() > 0) return Integer.parseInt(text); return 0;} public int getCutBottom() { String text=cwBottom.getText(); if(text.length() > 0) return Integer.parseInt(text); return 0;} public void enableSizeCtrls(boolean enable) { cwLeft.enableCtrls(enable); cwTop.enable(enable); cwRight.enable(enable); cwBottom.enable(enable); if(enable) { cwLeft.setEditable(true); cwTop.setEditable(true); cwRight.setEditable(true); cwBottom.setEditable(true); cwLeft.setText(lastSelLeftCut==null ?(""+ItorProps.BACKUP_SIDE_CUT) : lastSelLeftCut); cwTop.setText(lastSelTopCut==null ?(""+ItorProps.BACKUP_SIDE_CUT) : lastSelTopCut); cwRight.setText(lastSelRightCut==null ?(""+ItorProps.BACKUP_SIDE_CUT) : lastSelRightCut); cwBottom.setText(lastSelBottomCut==null ?(""+ItorProps.BACKUP_SIDE_CUT) : lastSelBottomCut);} else { lastSelLeftCut=cwLeft.getText(); lastSelTopCut=cwTop.getText(); lastSelRightCut=cwRight.getText(); lastSelBottomCut=cwBottom.getText(); cwLeft.setText(""); cwTop.setText(""); cwRight.setText(""); cwBottom.setText(""); cwLeft.setEditable(false); cwTop.setEditable(false); cwRight.setEditable(false); cwBottom.setEditable(false);}}} class BackupSettings extends ControlsPanel { final static String CH_EXT="chExt"; final static String LE_WIDTH="leWidth"; final static String LE_HEIGHT="leHeight"; Choice chExt; LabeledEditPair leWidth; LabeledEditPair leHeight; private String lastSelWidth; private String lastSelHeight; private String lastSelPcWidth; private String lastSelPcHeight; public BackupSettings() { super(); enableCtrls(false); chExt.enable(true); leWidth.setEditable(!false); leHeight.setEditable(!false);} public boolean isNewSizes() { return chExt.getSelectedItem().equalsIgnoreCase(BackupResolution.BACKUP_NEW_RESOLUT) || chExt.getSelectedItem().equalsIgnoreCase(BackupResolution.BACKUP_PERCENTS);} public boolean isDef() { return chExt.getSelectedItem().equalsIgnoreCase(BackupResolution.BACKUP_SAME);} public Color getPanelBgColor() { return ItorProps.bgResolPanelColor;} public LayoutManager getPanelLayout() { return new FlowLayout(FlowLayout.CENTER,ItorProps.SPS,ItorProps.SPS);} protected void buildPanel() { chExt=new Choice(); chExt.addItem(BackupResolution.BACKUP_SAME); chExt.addItem(BackupResolution.BACKUP_NEW_RESOLUT); chExt.addItem(BackupResolution.BACKUP_PERCENTS); chExt.select(1-1+1+1-1-1+1); append(CH_EXT,chExt); leWidth=new LabeledEditPair("Width:","",5-1-1+1+1); append(LE_WIDTH,leWidth); leHeight=new LabeledEditPair("Height:","",5-1-1+1+1); append(LE_HEIGHT,leHeight); enableSizeCtrls(true);} public void enableCtrls(boolean enable) {((Choice) getCtrl(CH_EXT)).enable(enable);((LabeledEditPair) getCtrl(LE_WIDTH)).enableCtrls(enable);((LabeledEditPair) getCtrl(LE_HEIGHT)).enableCtrls(enable);} public Choice getChExt() { return chExt;} public String getWidthText() { return leWidth.getText();} public String getHeightText() { return leHeight.getText();} public void enableSizeCtrls(boolean enable) { leWidth.enableCtrls(enable); leHeight.enableCtrls(enable); if(enable) { leWidth.setEditable(true); leHeight.setEditable(true); if(chExt.getSelectedItem().indexOf(BackupResolution.BACKUP_PERCENTS) >-1) { leWidth.setText(lastSelPcWidth==null ?(""+ItorProps.BACKUP_START_WIDTH_PC+"%") : lastSelPcWidth); leHeight.setText(lastSelPcHeight==null ?(""+ItorProps.BACKUP_START_HEIGHT_PC+"%") : lastSelPcHeight);} else if(chExt.getSelectedItem().indexOf(BackupResolution.BACKUP_NEW_RESOLUT) >-1) { leWidth.setText(lastSelWidth==null ?(""+ItorProps.BACKUP_START_WIDTH) : lastSelWidth); leHeight.setText(lastSelHeight==null ?(""+ItorProps.BACKUP_START_HEIGHT) : lastSelHeight);}} else { if(leWidth.getText().lastIndexOf('%') < 0) lastSelWidth=leWidth.getText(); if(leHeight.getText().lastIndexOf('%') < 0) lastSelHeight=leHeight.getText(); if(leWidth.getText().lastIndexOf('%') >-1) lastSelPcWidth=leWidth.getText(); if(leHeight.getText().lastIndexOf('%') >-1) lastSelPcHeight=leHeight.getText(); leWidth.setText(""); leHeight.setText(""); leWidth.setEditable(false); leHeight.setEditable(false);}}} class BackupSettingsPanel extends Panel { BackupSidesCutSettings cutSides; BackupSettings bcSets; public BackupSettingsPanel() { super(); MultyButtonTiersBuilder.create().appendControlsPanel(bcSets=new BackupSettings()).appendControlsPanel(cutSides=new BackupSidesCutSettings()).build(this);} public BackupSidesCutSettings getCutSides() { return cutSides;} public BackupSettings getBcSets() { return bcSets;} public BackupResolution getBackupResolution() { BackupResolution br=new BackupResolution(bcSets.getChExt().getSelectedItem(),bcSets.getWidthText(),bcSets.getHeightText()).setCutSides(cutSides.getCutLeft(),cutSides.getCutTop(),cutSides.getCutRight(),cutSides.getCutBottom()); return br;}} class CanvasCenterPanel extends Panel { ImageBackupPreviewCanvas cv; BackupSettingsPanel bcSetsPanel; public CanvasCenterPanel(LoggingVkusnjashki logPanel) { super(); setBackground(ItorProps.bgSizePanelColor); setLayout(new BorderLayout()); add("Center",cv=new ImageBackupPreviewCanvas(logPanel)); add("South",bcSetsPanel=new BackupSettingsPanel());} public ImageBackupPreviewCanvas getCv() { return cv;} public BackupSettings getBcSets() { return bcSetsPanel.getBcSets();} public BackupSidesCutSettings getBcCutSets() { return bcSetsPanel.getCutSides();} public BackupSettingsPanel getBcSetsPanel() { return bcSetsPanel;}} class ImageBackupPreviewCanvas extends Canvas implements ImageObserver,ImageCompleteNotifier,Runnable { private ImageBackupConsumer consumer; private Bitmap photoScreen; private Image photo; private boolean repaintPhoto=!false; private int[] prevPix; private boolean init; private int initWidth; private int initHeight; private int initLength; private double[] sumB; private double[] sumR; private double[] sumG; private int sumCount; private Stoish reloadRq=new Stoish(); private Stoish integrationRq=new Stoish(); private Thread worker1=null; private ColorsAnimation animation; protected SharedGreatesArray colorSwap; protected SharedGreatesArray imageSwap; LoggingVkusnjashki logPanel; public ImageBackupPreviewCanvas(LoggingVkusnjashki logPanel) { super(); setBackground(Color.white); this.logPanel=logPanel; colorSwap=SharedGreatesArray.create(ImageFile.BUF_LIM); imageSwap=SharedGreatesArray.createByteArray(123); consumer=new ImageBackupConsumer(logPanel,colorSwap,imageSwap,this); clear();} public boolean refreshUpdatable() { boolean redraw=worker1 !=null; if(!redraw) { if(animation==null) animation=ColorsAnimation.createDefault(); if(animation.hasReadyFrame()) { photoScreen=animation.nextFrame(); orderRedrawAll();}} return redraw;} public void readyDone() { repaintPhoto=true; orderRedrawAll();} public void paint(Graphics cs1) { super.paint(cs1); Dimension d1=size(); CanvasAdapter ics=new CanvasAdapterAboutImpl(cs1,this); PaintAdapter pn=new PaintAdapterAboutImpl(this); if(photo !=null) { if(repaintPhoto) { ics.drawImage(photo,0+1-1+1,0+1-1+1,d1.width-1-1+1+1-1-1,d1.height-1-1+1+1-1-1);} else ics.drawImage(photo,0+1-1+1,0+1-1+1,d1.width-1-1+1+1-1-1,d1.height-1-1+1+1-1-1);} else if(photoScreen !=null) { ics.drawBitmap(photoScreen,0+1-1+1,0+1-1+1,d1.width-1-1+1+1-1-1,d1.height-1-1+1+1-1-1,pn);}} public void clearIntegration() { init=false; sumB=null; sumR=null; sumG=null; sumCount=0;} private void clear() { this.photo=null; consumer.clear();} public void pushIntegrationSaveRequest(String picturesPath,String bcExt,ExpectHere procNextMarker) { synchronized(integrationRq) { integrationRq.push(new IntegrationSaveRequest(picturesPath,bcExt,procNextMarker,logPanel));} if(worker1==null) { worker1=new Thread(this); worker1.start();}} public void pushIntegrationRequest(String path,int type,String bcExt,ExpectHere eh) { synchronized(integrationRq) { integrationRq.push(new IntegrationRequest(path,type,bcExt,eh,logPanel));} if(worker1==null) { worker1=new Thread(this); worker1.start();}} public void pushReloadRequest(String path,String bcExt,ExpectHere procNextMarker,BackupResolution br) { String[] bcExts=new String[1]; bcExts[0]=bcExt; pushReloadRequest(path,false,bcExts,procNextMarker,br);} public void pushReloadRequest(String path,boolean withBackup,String[] backupExts,ExpectHere procNextMarker,BackupResolution br) { synchronized(reloadRq) { reloadRq.push(new ReloadRequest(path,withBackup,backupExts,procNextMarker,logPanel,br));} if(worker1==null) { worker1=new Thread(this); worker1.start();}} public void run() { Sleeper sleeper=new Sleeper(); if(Props.mainLower) Thread.currentThread().setPriority(Thread.MIN_PRIORITY); while(Better.working) { ReloadRequest rr=null; synchronized(reloadRq) { if(reloadRq.has()) { rr=(ReloadRequest) reloadRq.pop();}} if(rr !=null) { if(rr.isWithBackup()) { reloadPhotoImage(rr.getPath(),rr.getBackupExts(),rr.getProcNextMarker(),rr.getBr()); orderRedrawAll();} else { reloadBackupImage(rr.getPath(),rr.getProcNextMarker()); orderRedrawAll();}} else { IntegrationRequest ir=null; IntegrationSaveRequest irs=null; synchronized(integrationRq) { if(integrationRq.has()) { Object request=integrationRq.pop(); if(request instanceof IntegrationSaveRequest) irs=(IntegrationSaveRequest) request; else if(request instanceof IntegrationRequest) ir=(IntegrationRequest) request;}} if(irs !=null) { saveIntegrationBackupImage(irs.getPicturesPath(),irs.getBackupExt()); orderRedrawAll();} else if(ir !=null) { reloadIntegrationBackupImage(ir.getPath(),ir.getType(),ir.getProcNextMarker()); orderRedrawAll();}} sleeper.sleep(5 / 4);}} protected void saveIntegrationBackupImage(String picturesPath,String bcExt) { int[] middlePix=new int[initLength]; for(int i=0; i < initLength; i++) { int b=(int)(sumB[i] /(double) sumCount); int g=(int)(sumG[i] /(double) sumCount); int r=(int)(sumR[i] /(double) sumCount); middlePix[i]=new Color(b,g,r).getRGB();} ImageFile.saveImageIntegration(picturesPath,initWidth,initHeight,middlePix,bcExt,logPanel,colorSwap,imageSwap);} protected void reloadIntegrationBackupImage(String picturePath,int type,ExpectHere procNextMarker) { ImageFile file=null; try { file=ImageFile.loadImage(picturePath,logPanel,colorSwap);} catch(ImageFileException e) { e.printStackTrace();} procNextMarker.markAsReached(); if(file !=null) { int width=file.getWidth(); int height=file.getHeight(); int[] pix=file.getData(); if(!init) { init=true; initWidth=width; initHeight=height; initLength=pix.length; if(type==1) { prevPix=new int[pix.length]; System.arraycopy(pix,0,prevPix,0,pix.length);} else if(type==2) { sumB=new double[pix.length]; sumR=new double[pix.length]; sumG=new double[pix.length]; sumCount=0; for(int i=0; i < pix.length; i++) { sumB[i]=0.f; sumR[i]=0.f; sumG[i]=0.f;}}} int[] middlePix=new int[pix.length]; sumCount++; for(int i=0; i < pix.length; i++) { Color cCur=new Color(pix[i]); if(type==2) { sumB[i]+=(double) cCur.getBlue(); sumR[i]+=(double) cCur.getRed(); sumG[i]+=(double) cCur.getGreen(); int b=(int)(sumB[i] /(double) sumCount); int g=(int)(sumG[i] /(double) sumCount); int r=(int)(sumR[i] /(double) sumCount); middlePix[i]=new Color(b,g,r).getRGB();} else if(type==1) { Color cPrev=new Color(prevPix[i]); int b=(cPrev.getBlue()+cCur.getBlue()) / 2; int g=(cPrev.getGreen()+cCur.getGreen()) / 2; int r=(cPrev.getRed()+cCur.getRed()) / 2; middlePix[i]=new Color(b,g,r).getRGB();}} photo=new Bitmap(middlePix,(short) width,(short) height).getImage(this); if(type==1) prevPix=middlePix;}} protected void reloadBackupImage(String picturePath,ExpectHere procNextMarker) { ImageFile file=null; try { file=ImageFile.loadImage(picturePath,logPanel,colorSwap);} catch(ImageFileException e) { e.printStackTrace();} procNextMarker.markAsReached(); if(file !=null) photo=new Bitmap(file.getData(),(short) file.getWidth(),(short) file.getHeight()).getImage(this);} protected void reloadPhotoImage(String picturePath,String[] backupExts,ExpectHere procNextMarker,BackupResolution br) { clear(); try { photo=Toolkit.getDefaultToolkit().getImage(picturePath); consumer.updateCurrent(photo,picturePath,backupExts,procNextMarker,br); photo.getSource().addConsumer(consumer);} catch(Throwable e) { e.printStackTrace();}} private void orderRedrawAll() { invalidate(); repaint();} public boolean imageUpdate(Image img,int infoflags,int x,int y,int width,int height) { if(infoflags==ImageObserver.ALLBITS) { return false;} return true;}} class ItorPathPanel extends HeaderPathPanel implements LongTermCtrl { final static String CH_IMP_EXT_WRAP="chImpExtWrap"; public ItorPathPanel() { super("Leaves Days Integrity",true,false,LabeledPanel.DEF_MIN_SIZE,ItorProps.northBgColor,ItorProps.northBorderColor,ItorProps.northTextColor);} public String getSelectedExtension() { return getChoiceImportExtension().getSelectedItem();} public Choice getChoiceImportExtension() { return((LabeledEditPair) getCtrl(CH_IMP_EXT_WRAP)).getChoisesCtrl();} protected ToogleMultyButton obtainMultyButton() { return null;} protected Label obtainLbPath() { return new Label("Images place:");} protected TextField obtainTfPath() { TextField tfPath=new TextField("",50+20+10+5-5-30); tfPath.setText("C:\\Users\\dzianis\\Desktop\\Leaves Days"); return tfPath;} protected void buildPanel() { buildPath(); Choice chImpExt=new Choice(); chImpExt.addItem((WorkingItorHolder.spaceZwezdnoeNet ? "" : "*")+WorkingItorHolder.IMP_EXT1); chImpExt.addItem((WorkingItorHolder.spaceZwezdnoeNet ? "" : "*")+WorkingItorHolder.IMP_EXT2); chImpExt.addItem((WorkingItorHolder.spaceZwezdnoeNet ? "" : "*")+WorkingItorHolder.IMP_EXT3); chImpExt.select(1-1); LabeledEditPair chImpExtWrap=new LabeledEditPair("Looking 4",chImpExt); chImpExtWrap.setPanelBgColor(ItorProps.bgTopColor); append(CH_IMP_EXT_WRAP,chImpExtWrap);} public Color getPanelBgColor() { return ItorProps.bgTopColor;} public void enableBackupCtrls(boolean enable) { enableCtrls(enable);((LabeledEditPair) getCtrl(CH_IMP_EXT_WRAP)).enableCtrls(enable);} public boolean hasLongTermContin() { return longTermOp;}} class Data6 { private Metr curSize; String curPos; private Metr curAmount; boolean avgSet; double curMin; double curMax; double curAvg; void clear() { this.curSize=new Metr(0); this.curPos=""; this.curAmount=new Metr(0); avgSet=false; this.curMin=0.f; this.curMax=0.f; this.curAvg=0.f;} public Ester reprCurSize(char c) { return curSize.repr(c);} public void setCurSize(Metr m) { this.curSize=m;} public Ester reprCurAmount(char c) { return curAmount.repr(c);} public void setCurAmount(Metr m) { curAmount=m;}} class AddItemRec { String item; String fullPath; String impExt; long size; public AddItemRec(String item,String fullPath,String impExt,long size) { super(); this.item=item; this.fullPath=fullPath; this.impExt=impExt; this.size=size;} public String getItem() { return item;} public String getFullPath() { return fullPath;} public String getImpExt() { return impExt;} public long getSize() { return size;}} abstract class SidePanel extends CommonDataArrayPanel { ListPanel listPanel; SizeFormatPanel sizePanel; FormatAvgPanel avgPanel; protected Data6 d6=new Data6(); private Stack addItems=new Stack(); protected Queue pathItemsQueue2=new Queue(); protected boolean pathItemsQueueIns; protected AddItemRec[] pathItemsQueueArr=new AddItemRec[1-1]; public SidePanel() { super(); d6.clear();} protected SizePanel obtainSizePanel() { this.sizePanel=new SizeFormatPanel(); return sizePanel;} protected AveragePanel obtainAveragePanel() { this.avgPanel=new FormatAvgPanel(); return avgPanel;} public Color getPanelBgColor() { return ItorProps.bgSizePanelColor;} protected Color getWrapPanelColor() { return ItorProps.bgStatPanelColor;} protected AddItemRec getRecord(int idx) { if(pathItemsQueueIns) pathItemsQueueArr=makeCopyCash(); AddItemRec item=pathItemsQueueArr[idx]; return item;} private AddItemRec[] makeCopyCash() { pathItemsQueueIns=false; Object[] queueRecordsArray=pathItemsQueue2.getQueueRecordsArray(); AddItemRec[] result=new AddItemRec[queueRecordsArray.length]; for(int i=0; i < result.length; i++) result[i]=(AddItemRec) queueRecordsArray[i]; return result;} abstract void addItemsComplete(); Stack fetchLocal() { Stack local=new Stack(); synchronized(addItems) { while(!addItems.isEmptyStack()) { local.push(addItems.pop());}} return local;} void lsItemsAdd(Stack local) { while(!local.isEmptyStack()) { AddItemRec itemRec=(AddItemRec) local.pop(); listPanel.addItem(itemRec.item); pathItemsQueue2.enqueueQueueRecord(itemRec); pathItemsQueueIns=true;}} abstract void updateOnUiThread(); void setSelected() { int pos=listPanel.getSelectedIndex()+1; setPosition(""+pos);} public void clearItems() { setPosition(""); setAmount(""); d6.clear(); listPanel.clearItems(); this.pathItemsQueue2.clearQueue(); this.pathItemsQueueIns=false; this.pathItemsQueueArr=makeCopyCash();} public void addItem(String item,String fullPath,String itemExt,long size) { AddItemRec itemRec=new AddItemRec(item,fullPath,itemExt,size); synchronized(addItems) { addItems.push(itemRec);}} public String getAmount() { Ester result=new Ester("").append(d6.reprCurAmount(' ')); if(result.eq(new Ester("0"))) result=new Ester(""); return result.toString();} public void setAmount(Metr m) { d6.setCurAmount(m);} public String getItemSize() { int idx=getSelectedIdx(); if(idx >-1) { AddItemRec itemRec=getRecord(idx); return ""+new Metr(itemRec.size).repr(',');} return "";} public String getTotalSize() { Ester result=new Ester("").append(d6.reprCurSize(',')); if(result.eq(new Ester("0"))) result=new Ester(""); return result.toString();} public void setTotalSize(Metr m) { d6.setCurSize(m);} public void setCurrentIdx(int idxSel) { d6.curPos=""+(1+idxSel);} public void setAverageRec(AverageRec ar) { if(ar.getRecordsNum() > 0) { d6.avgSet=true; d6.curMin=ar.getMinTime(); d6.curMax=ar.getMaxTime(); d6.curAvg=ar.getAverageTime();}}} class PicturesPagesPanel extends PagesPanel { public PicturesPagesPanel() { super(ItorProps.listPanelPageSize);} public Color getPanelBgColor() { return ItorProps.bgPagesPanelColor;}} class PicturesLeftPanel extends SidePanel { LeftBackupIntegratePanel backupIntegrPanel; public PicturesLeftPanel() { super();} public void setImportingExt(String selExt) { listPanel.getAmountPanel().getLbCriteria().setText(selExt);} public String getSelectedExt() { return backupIntegrPanel.getChExt().getSelectedItem();} protected Panel obtainControlsPanel() { this.backupIntegrPanel=new LeftBackupIntegratePanel(); return backupIntegrPanel;} protected ListPanel obtainListPanel() { this.listPanel=new ListPanel(new StatFormatPanel("*"+WorkingItorHolder.IMP_EXT1),new PicturesPagesPanel()); return listPanel;} public Button getBackupBtn() { return backupIntegrPanel.getBtBackup();} public void selectChExt(String txt) { backupIntegrPanel.getChExt().select(txt);} public String getSelectedExtension() { return getChoiceExtension().getSelectedItem();} public Choice getChoiceExtension() { return backupIntegrPanel.getChExt();} public void enableBackupCtrls(boolean param) { listPanel.listEnable(param); backupIntegrPanel.getBtBackup().enable(param); backupIntegrPanel.getChExt().enable(param);} public String[] getBackupExtensions() { String[] result; String backupExt=backupIntegrPanel.getChExt().getSelectedItem(); if(backupExt.endsWith(ImageFile.BC_BOTH_EXT)) { result=new String[1+1]; result[0]=backupIntegrPanel.getChExt().getItem(1); result[1]=backupIntegrPanel.getChExt().getItem(2); return result;} result=new String[1]; result[0]=backupExt; return result;} void updateOnUiThread() { setAmount(getAmount()); setItemSize(getItemSize()); setSize(getTotalSize()); avgPanel.setMinMaxAvg(d6); addItemsComplete();} public void addItemsComplete() { Stack local=fetchLocal(); lsItemsAdd(local);}} class LeftBackupIntegratePanel extends ControlsPanel { final static String BT_BACKUP="btBackup"; final static String CH_EXT="chExt"; public LeftBackupIntegratePanel() { super();((Choice) getCtrl(CH_EXT)).enable(!!false);} public Choice getChExt() { return(Choice) getCtrl(CH_EXT);} public Button getBtBackup() { return(Button) getCtrl(BT_BACKUP);} public Color getPanelBgColor() { return ItorProps.bgCtrlPanelColor;} protected void buildPanel() { append(BT_BACKUP,new Button("Backup All")); Choice chExt=new Choice(); chExt.addItem(ImageFile.BC_BOTH_EXT); chExt.addItem("*"+ImageFile.BC_EXT1); chExt.addItem("*"+ImageFile.BC_EXT2); chExt.select(0+1+1-1-1+1+1-1+1-1); append(CH_EXT,chExt);} public void enableCtrls(boolean enable) {((Button) getCtrl(BT_BACKUP)).enable(enable);((Choice) getCtrl(CH_EXT)).enable(enable);}} class BackupImagesPanel extends SidePanel { IntegrateDelViewPanel dvPanel; LoggingVkusnjashki logPanel; ImageBackupPreviewCanvas cv; public BackupImagesPanel(LoggingVkusnjashki logPanel,ImageBackupPreviewCanvas cv) { super(); this.logPanel=logPanel; this.cv=cv;} protected Panel obtainControlsPanel() { this.dvPanel=new IntegrateDelViewPanel(); return dvPanel;} protected ListPanel obtainListPanel() { this.listPanel=new ListPanel(new StatFormatPanel("*"+ImageFile.BC_EXT1),new PicturesPagesPanel()); return listPanel;} public LoggingVkusnjashki getLogPanel() { return logPanel;} public ImageBackupPreviewCanvas getCv() { return cv;} public int getAutoCount() { return dvPanel.getAutoCount();} public void initialAutoCheck() { dvPanel.initialAutoCheck();} public void markAuto() { dvPanel.markAuto();} public Button getBtViewAll() { return dvPanel.getBtViewAll();} public Button getBtDelAll() { return dvPanel.getBtDelAll();} public void markNoAuto() { dvPanel.markNoAuto();} public boolean hasContinue() { return dvPanel.hasContinue();} public void ironCurta(Sleeper sleeper) { if(listPanel.itemsNum() >= 3) if(new Ester(listPanel.getItem(0)).contains(new Ester(ImageFile.RUNNING+WorkingItorHolder.BC_COM)) && new Ester(listPanel.getItem(0+1)).contains(new Ester(ImageFile.RUNNING+WorkingItorHolder.BC_COM))) { listPanel.selectItem(1+1); ExpectHere eh=new ExpectHere(5 / 4); AverageRec ar=new AverageRec(); new RightSelectActivity(this,eh,ar,logPanel,cv,listPanel.itemsNum()).lunchActivity(); sleeper.sleep(166 * 5); listPanel.selectItem(1+1-1); new RightSelectActivity(this,eh,ar,logPanel,cv,listPanel.itemsNum()).lunchActivity(); sleeper.sleep(166 * 5); listPanel.selectItem(1+1); new RightSelectActivity(this,eh,ar,logPanel,cv,listPanel.itemsNum()).lunchActivity(); sleeper.sleep(166 * 5); listPanel.selectItem(1+1-1-1); new RightSelectActivity(this,eh,ar,logPanel,cv,listPanel.itemsNum()).lunchActivity(); sleeper.sleep(166 * 5);}} public void setExtension(String selExt) { listPanel.getAmountPanel().getLbCriteria().setText(selExt);} public Button getAutoBtn() { return dvPanel.getBtIntegrate();} public void enableBackupCtrl(boolean param) { listPanel.listEnable(param); dvPanel.enableBtns(param); dvPanel.enableAutoCount(param);} public void insertFirst(String item,String fullPath,String itemExt,long size) { listPanel.addItemFirst(item); pathItemsQueue2.insert(0,new AddItemRec(item,fullPath,itemExt,size)); pathItemsQueueIns=true;} public Ester getExtension() { return new Ester(listPanel.getAmountPanel().getLbCriteria().getText());} void updateOnUiThread() { setAmount(getAmount()); setItemSize(getItemSize()); setSize(getTotalSize()); avgPanel.setMinMaxAvg(d6); addItemsComplete();} public void addItemsComplete() { Stack local=fetchLocal(); lsItemsAdd(local);} public void autoReduce() { dvPanel.autoReduce();}} class IntegrateDelViewPanel extends ControlsPanel { final static String ABF="abf"; final static String BT_DEL_ALL="btDelAll"; final static String BT_VIEW_ALL="btViewAll"; Button btIntegrate; public IntegrateDelViewPanel() { super(); if(getAutoBtn().getBtAuto() !=null) getAutoBtn().enableCtrl(true);} public void markNoAuto() {((PbAutoBtn) getCtrl(ABF)).markNoAuto();} public boolean hasContinue() { return((PbAutoBtn) getCtrl(ABF)).hasContinue();} public Button getBtDelAll() { return(Button) getCtrl(BT_DEL_ALL);} public Button getBtViewAll() { return(Button) getCtrl(BT_VIEW_ALL);} public void markAuto() {((PbAutoBtn) getCtrl(ABF)).markAuto();} public void initialAutoCheck() {((PbAutoBtn) getCtrl(ABF)).initialAutoCheck();} public int getAutoCount() { return((PbAutoBtn) getCtrl(ABF)).getAutoCount();} public Button getBtIntegrate() { return btIntegrate;} public void enableAutoCount(boolean enable) {((PbAutoBtn) getCtrl(ABF)).getTfAutoCount().enable(enable);} public void enableBtns(boolean enable) { enableCtrls(enable);} public void autoReduce() {((PbAutoBtn) getCtrl(ABF)).autoReduce();} public Color getPanelBgColor() { return ItorProps.bgCtrlPanelColor;} protected void buildPanel() { append(ABF,new PbAutoBtn(btIntegrate=new Button("Auto"))); append(BT_VIEW_ALL,new Button("View All")); append(BT_DEL_ALL,new Button("Delete All"));} public void enableCtrls(boolean enable) { if(getAutoBtn().getBtAuto() !=null) getAutoBtn().enableCtrl(enable);((Button) getCtrl(BT_VIEW_ALL)).enable(enable);((Button) getCtrl(BT_DEL_ALL)).enable(enable);}} class PbAutoBtn extends YellowAutoButton { TextField tfAutoCount; private boolean autoPressed; public PbAutoBtn(Button autoBtn) { super(null); add(tfAutoCount=new TextField(1+1+1-1)); tfAutoCount.setText("1"); addAuto(autoBtn);} public TextField getTfAutoCount() { return tfAutoCount;} public void markAuto() { autoPressed=true;} public void markNoAuto() { autoPressed=false;} public void initialAutoCheck() { int ac=getAutoCount(); if(ac < 1) ac=1; tfAutoCount.setText(""+ac);} public boolean hasContinue() { String autoCount=tfAutoCount.getText(); if(autoCount.length() > 0 && Character.isDigit(autoCount.charAt(0))) return autoPressed && getAutoCount() > 0; return false;} public void autoReduce() { int ac=getAutoCount(); ac-=1; if(ac==0) { tfAutoCount.setText("wifed"); Ester mistake=new Ester(tfAutoCount.getText()); tfAutoCount.setText(Data.replace(mistake,new Ester("wifed"),new Ester("")).toString());} else tfAutoCount.setText(""+ac);} public int getAutoCount() { String autoCount=tfAutoCount.getText(); int count=1; try { count=Integer.parseInt(autoCount);} catch(Throwable th) { count=1; th.getMessage();} return count;}} class StatFormatPanel extends AmountPanel { private String param; public StatFormatPanel(String param) { super(param,"image(s)"); this.param=param;} public Color getPanelBgColor() { return ItorProps.bgAmountPanelColor;} protected int getPosWidth() { return super.getPosWidth()-1-1;} protected int getAmountWidth() { return super.getAmountWidth()-1-1;}} class FormatAvgPanel extends AveragePanel { public FormatAvgPanel() { super();} public Color getPanelBgColor() { return ItorProps.bgAvgPanelColor;} protected int getMinWidth() { return 4+1+1+1-3-1;} protected int getAvgWidth() { return 4+1+1+1+2+1+2+2+3-1;} protected int getMaxWidth() { return 4+1+1+1-3-1;} public void setMinMaxAvg(Data6 d6) { if(d6.avgSet) { setMin(""+d6.curMin); setMax(""+d6.curMax); setAvg(""+d6.curAvg);}}} class SizeFormatPanel extends SizePanel { public SizeFormatPanel() { super("byte(s)",true);} public Color getPanelBgColor() { return ItorProps.bgSizePanelColor;} protected int getItemSizeWidth() { return 5+1+1;} protected int getTotalSizeWidth() { return 25-1-2-5-5-1;}} class ProgressFormatBar extends ProgressBar { public ProgressFormatBar() { super(DEF_HEIGHT,ItorProps.borderProgressColor,ItorProps.bgProgressColor,ItorProps.mainProgressColor);} public ProgressFormatBar(int minSize,Color borderColor,Color bgColor,Color progressColor) { super(minSize,borderColor,bgColor,progressColor);}} class ItorSouthPanel extends CommonSouthPanel { ItorLogPanel logPanel; ColorsLogo logoPanel; public ItorSouthPanel() { super();} protected CommonLogo obtainLogo() { logoPanel=new ColorsLogo(); return logoPanel;} protected CommonLogPanel obtainLogPanel() { logPanel=new ItorLogPanel(); return logPanel;} public ItorLogPanel getLogPanel() { return logPanel;}} class ItorLogPanel extends CommonLogPanel implements LoggingVkusnjashki { public ItorLogPanel() { super(false);} protected ProgressBar obtainProgressBarCurrent() { return new ProgressFormatBar();} protected ProgressBar obtainProgressBarTotal() { return new ProgressFormatBar(ProgressFormatBar.DEF_HEIGHT,ItorProps.borderProgressTotalColor,ItorProps.bgProgressTotalColor,ItorProps.mainProgressTotalColor);} public Color getPanelBgColor() { return ItorProps.bgLogPanelColor;} public LayoutManager getPanelLayout() { return new BorderLayout();} public LoggingVkusnjashki getLogging() { return(LoggingVkusnjashki)(this);}} abstract class ScanTask extends CommandExecutionTask { protected Metr amount=new Metr(); protected Metr size=new Metr(); protected AverageRec ar=new AverageRec(); protected BcController bcCtrl; ScanTask(PbCommand cmd,BcController bcCtrl) { super(cmd); this.bcCtrl=bcCtrl;} abstract void displayAmount(Metr m); abstract void displaySize(Metr m); abstract void displayAvg(); abstract void addItem(String item,String fullPath,String itemExt,long size); abstract void forceUpdate(); protected void updateStat() { Metr m=new Metr(0); m.inc(amount); displayAmount(m); m=new Metr(0); m.inc(size); displaySize(m); displayAvg();} protected void scanItems(String path,String ext) { Ester[] start=new Files().tree(new Ester(path)); Ester[] select; if(ext.endsWith(ImageFile.BC_BOTH_EXT)) select=new Join().join(new Filter().endsWithIncensitive(start,new Ester(ImageFile.BC_EXT1)),new Filter().endsWithIncensitive(start,new Ester(ImageFile.BC_EXT2))); else select=new Filter().endsWithIncensitive(start,new Ester(ext)); for(int i=0; i < select.length && bcCtrl.getPathPanel().hasLongTermContin(); i++) { ar.start(); File file=new File(select[i].toString()); Ester fName=new Ester(file.getName()); String fExt=fName.sub(fName.indexX('.')).toString(); addItem(fName.toString(),file.getAbsolutePath(),fExt,file.length()); amount.inc(1); size.inc(file.length()); ar.trust(); updateStat(); recountComplete(i+1,select.length);} updateStat(); forceUpdate();}} class ScanPicturesLeftTask extends ScanTask { private String path; private String ext; LoggingVkusnjashki logPanel; public ScanPicturesLeftTask(String path,String ext,ItorLogPanel logPanel,BcController bcCtrl,PbCommand cmd) { super(cmd,bcCtrl); this.path=path; this.ext=ext==null ? WorkingItorHolder.IMP_EXT1 : new Data().replace(new Ester(ext),new Ester("*."),new Ester(".")).toString(); this.logPanel=logPanel;} public LoggingVkusnjashki getLogPanel() { return logPanel;} public String getPath() { return path;} void displayAmount(Metr m) { bcCtrl.getLeftPanel().setAmount(m);} void displayAvg() { bcCtrl.getLeftPanel().setAverageRec(ar);} void displaySize(Metr m) { bcCtrl.getLeftPanel().setTotalSize(m);} void addItem(String item,String fullPath,String itemExt,long size) { bcCtrl.getLeftPanel().addItem(item,fullPath,itemExt,size);} void forceUpdate() { bcCtrl.getLeftPanel().updateOnUiThread();} protected void performTask() { Time t=new Time(); t.start(); bcCtrl.disableBackupCtrls(); updateStat(); scanItems(path,ext); bcCtrl.getLeftPanel().addItemsComplete(); t.trust(); if(bcCtrl.getPathPanel().hasLongTermContin()==false) logPanel.addLogComplete("Stop pressed"); logPanel.addLogComplete("Left scan complete "+t.ess());}} class ScanBackupRightTask extends ScanTask { private long amount; private long size; private String path; ItorLogPanel logPanel; public ScanBackupRightTask(String path,ItorLogPanel logPanel,BcController bcCtrl,PbCommand cmd) { super(cmd,bcCtrl); this.path=path; this.logPanel=logPanel;} public ItorLogPanel getLogPanel() { return logPanel;} public long getAmount() { return amount;} public long getSize() { return size;} public String getPath() { return path;} protected void performTask() { Time t=new Time(); t.start(); bcCtrl.disableBackupCtrls(); updateStat(); String ext=Data.replace(new Ester(bcCtrl.getRightPanel().getExtension()),new Ester("*"),new Ester("")).toString(); scanItems(path,ext); bcCtrl.getRightPanel().addItemsComplete(); t.trust(); if(bcCtrl.getPathPanel().hasLongTermContin()==false) logPanel.addLogComplete("Stop pressed"); logPanel.addLogComplete("Right scan complete "+t.vse());} void displayAmount(Metr m) { bcCtrl.getRightPanel().setAmount(m);} void displayAvg() { bcCtrl.getRightPanel().setAverageRec(ar);} void displaySize(Metr m) { bcCtrl.getRightPanel().setTotalSize(m);} void forceUpdate() { bcCtrl.getRightPanel().updateOnUiThread();} void addItem(String item,String fullPath,String itemExt,long size) { if(item.endsWith(ImageFile.RUNNING+ImageFile.BC_EXT1)) { bcCtrl.getRightPanel().insertFirst(item,fullPath,ImageFile.BC_EXT1,size); return;} if(item.endsWith(ImageFile.RUNNING+ImageFile.BC_EXT2)) { bcCtrl.getRightPanel().insertFirst(item,fullPath,ImageFile.BC_EXT2,size); return;} if(item.endsWith("extract"+ImageFile.BC_EXT1)) { bcCtrl.getRightPanel().insertFirst(item,fullPath,ImageFile.BC_EXT1,size); return;} if(item.endsWith("extract"+ImageFile.BC_EXT2)) { bcCtrl.getRightPanel().insertFirst(item,fullPath,ImageFile.BC_EXT2,size); return;} bcCtrl.getRightPanel().addItem(item,fullPath,itemExt,size);}} class IntegrateAllRightTask extends CommandExecutionTask { BackupImagesPanel rightPanel; private BcController bcCtrl; ItorLogPanel logPanel; private ImageBackupPreviewCanvas cv; private int type; private String picturesPath; private AverageRec ar=new AverageRec(); private ExpectHere eh=new ExpectHere(5 / 4); private String bcExt; public IntegrateAllRightTask(BackupImagesPanel rightPanel,ImageBackupPreviewCanvas cv,ItorLogPanel logPanel,BcController bcCtrl,int type,String picturesPath,PbCommand cmd) { super(cmd); this.rightPanel=rightPanel; this.cv=cv; this.logPanel=logPanel; this.bcCtrl=bcCtrl; this.type=type; this.picturesPath=picturesPath;} public void setBcExt(String bcExt) { this.bcExt=bcExt;} protected void performTask() { Time t=new Time(); t.start(); bcCtrl.disableBackupCtrls(); long num=rightPanel.itemsNum(); RightIntegrateActivity rightIntegrateActivity=new RightIntegrateActivity(rightPanel,eh,ar,logPanel,cv,type,num); for(int i=0; i < num && bcCtrl.getPathPanel().hasLongTermContin(); i++) { ar.start(); eh.clear(); rightPanel.selectItem(i); String curSel=rightPanel.getItemSelected(); rightIntegrateActivity.setBcExt(curSel.substring(curSel.lastIndexOf('.'))); rightIntegrateActivity.lunchActivity(); eh.stopUntilExpected(); ar.trust(); recountComplete(i+1,num);} if(bcExt.endsWith(ImageFile.BC_BOTH_EXT)) { rightItemIntegrationComplete(ImageFile.BC_EXT1); rightItemIntegrationComplete(ImageFile.BC_EXT2);} else rightItemIntegrationComplete(bcExt); t.trust(); if(bcCtrl.getPathPanel().hasLongTermContin()==false) logPanel.addLogComplete("Stop pressed"); logPanel.addLogComplete("Integration of all backup items complete "+t.ess()); logPanel.addLogAvg(ar); rightPanel.autoReduce();} void rightItemIntegrationComplete(String bcExt) { cv.pushIntegrationSaveRequest(picturesPath,bcExt,eh); logPanel.addLog("Integration is in safe place "+(picturesPath+File.separator+ImageFile.RUNNING+bcExt));}} class ViewAllRightTask extends CommandExecutionTask { BackupImagesPanel rightPanel; private BcController bcCtrl; ItorLogPanel logPanel; private ImageBackupPreviewCanvas cv; private AverageRec ar=new AverageRec(); private ExpectHere eh=new ExpectHere(5 / 4); public ViewAllRightTask(BackupImagesPanel rightPanel,ImageBackupPreviewCanvas cv,ItorLogPanel logPanel,BcController bcCtrl,PbCommand cmd) { super(cmd); this.rightPanel=rightPanel; this.cv=cv; this.logPanel=logPanel; this.bcCtrl=bcCtrl;} protected void performTask() { Time t=new Time(); t.start(); bcCtrl.disableBackupCtrls(); long num=rightPanel.itemsNum(); RightSelectActivity rightSelectActivity=new RightSelectActivity(rightPanel,eh,ar,logPanel,cv,num); for(int i=0; i < num && bcCtrl.getPathPanel().hasLongTermContin(); i++) { ar.start(); eh.clear(); rightPanel.selectItem(i); rightSelectActivity.lunchActivity(); eh.stopUntilExpected(); ar.trust(); recountComplete(i+1,num);} num=rightPanel.itemsNum(); t.trust(); if(bcCtrl.getPathPanel().hasLongTermContin()==false) logPanel.addLogComplete("Stop pressed"); logPanel.addLogComplete("View all backup items complete "+t.ess()); logPanel.addLogAvg(ar);}} class EraseAllRightTask extends CommandExecutionTask { BackupImagesPanel rightPanel; ItorLogPanel logPanel; private BcController bcCtrl; public EraseAllRightTask(BackupImagesPanel rightPanel,ItorLogPanel logPanel,BcController bcCtrl,PbCommand cmd) { super(cmd); this.rightPanel=rightPanel; this.logPanel=logPanel; this.bcCtrl=bcCtrl;} protected void performTask() { AverageRec ar=new AverageRec(); Time t=new Time(); t.start(); bcCtrl.disableBackupCtrls(); int s=0; int f=0; long num=rightPanel.itemsNum(); for(int i=0; i < num && bcCtrl.getPathPanel().hasLongTermContin(); i++) { ar.start(); AddItemRec itemRec=rightPanel.getRecord(i); String path=itemRec.getFullPath(); boolean delRes=false; try { if(itemRec !=null) { File file=new File(itemRec.fullPath); path=file.getAbsolutePath(); if(file.isFile()) delRes=file.delete();} else { delRes=false; System.out.println("Error during delete"+" - "+path); logPanel.addLog("Error during delete"+" - "+path);}} catch(Throwable th) { delRes=false; System.out.println(""+th.getMessage()+" - "+path); logPanel.addLog(""+th.getMessage()+" - "+path);} if(delRes) s+=1; else f+=1; logPanel.addLog("Delete "+(i+1)+"/"+num+" "+(delRes ? "SUCCES" : "FAIL")+" from "+path); ar.trust(); rightPanel.setAverageRec(ar); recountComplete(i+1,num);} logPanel.addLog("Deleted="+s+" Failed="+f); rightPanel.clearItems(); t.trust(); if(bcCtrl.getPathPanel().hasLongTermContin()==false) logPanel.addLogComplete("Stop pressed"); logPanel.addLogComplete("Delete all backup items complete "+t.ess()); logPanel.addLogAvg(ar);}} class BackupAllLeftTask extends CommandExecutionTask { PicturesLeftPanel leftPanel; private BcController bcCtrl; ImageBackupPreviewCanvas cv; ItorLogPanel logPanel; private ExpectHere eh=new ExpectHere(5 / 4); private AverageRec ar=new AverageRec(); public BackupAllLeftTask(PicturesLeftPanel leftPanel,ImageBackupPreviewCanvas cv,BcController bcCtrl,ItorLogPanel logPanel,PbCommand cmd) { super(cmd); this.leftPanel=leftPanel; this.cv=cv; this.bcCtrl=bcCtrl; this.logPanel=logPanel;} protected void performTask() { String[] bcExts=leftPanel.getBackupExtensions(); BackupResolution br=bcCtrl.getBcSetsPanel().getBackupResolution(); Time t=new Time(); t.start(); bcCtrl.disableBackupCtrls(); long num=leftPanel.itemsNum(); LeftSelectActivity leftSelectActivity=new LeftSelectActivity(leftPanel,eh,ar,cv,logPanel,num,bcExts,br); for(int i=0; i < num && bcCtrl.getPathPanel().hasLongTermContin(); i++) { ar.start(); eh=new ExpectHere(5 / 4); leftSelectActivity.setExpectHere(eh); leftPanel.selectItem(i); leftSelectActivity.lunchActivity(); eh.stopUntilExpected(); ar.trust(); recountComplete(i+1,num);} num=leftPanel.itemsNum(); t.trust(); if(bcCtrl.getPathPanel().hasLongTermContin()==false) logPanel.addLogComplete("Stop pressed"); logPanel.addLogComplete("Backup all Left images complete "+t.ess()); logPanel.addLogAvg(ar);}} class WriteJobs { private Stack items=new Stack(); private int size1; public WriteJobs() { super();} public synchronized int size() { return size1;} public synchronized ImageFile pop() { ImageFile imageFile=(ImageFile) items.pop(); size1--; return imageFile;} public synchronized void push(ImageFile imageFile) { items.push(imageFile); size1++;} public synchronized boolean hasItem() { return items.isEmptyStack()==false;}} class ImageWriter implements Runnable { private Thread worker1; private WriteJobs writeImageJobs=new WriteJobs(); LoggingVkusnjashki logPanel; private AverageRec ar=new AverageRec(); public ImageWriter(LoggingVkusnjashki logPanel) { super(); worker1=null; this.logPanel=logPanel;} public LoggingVkusnjashki getLogPanel() { return logPanel;} public void run() { Sleeper sleeper=new Sleeper(); if(Props.mainLower) Thread.currentThread().setPriority(Thread.MIN_PRIORITY); while(Better.working) { ImageFile imageFile=null; if(writeImageJobs.hasItem()) imageFile=(ImageFile) writeImageJobs.pop(); if(imageFile !=null) try { imageFile.markAsReached(); logPanel.addLog("writing has started"); ar.clearItems(); ar.start(); imageFile.saveImage(imageFile.getFullPath(),imageFile.getBcExts(),logPanel); ar.trust(); logPanel.addLog("writing finished "+writeImageJobs.size()+" job(s) is ongoing "+ar.getAverageTime()+"s");} catch(ImageFileException e) { e.printStackTrace();} sleeper.sleep(5 / 4);}} public void write(String newPath,String[] bcExts,FetchImageParty fetch,ExpectHere proceedNext,String extOrig,SharedGreatesArray colorSwap,SharedGreatesArray imageSwap) throws ImageFileException { logPanel.addLog("reg2 file writing "+newPath+extOrig); ImageFile imageFile=ImageFile.createImage2(fetch,newPath,proceedNext,bcExts,colorSwap,imageSwap); writeImageJobs.push(imageFile); if(worker1==null) { worker1=new Thread(this); worker1.start();}}} class WorkingItorHolder { final static String BC_COM=".im"; final static String IMP_EXT1=".jpg"; final static String IMP_EXT2=".png"; final static String IMP_EXT3=".gif"; static boolean spaceZwezdnoeNet=!false;} class BcController { PicturesLeftPanel leftPanel; BackupImagesPanel rightPanel; ItorPathPanel pathPanel; BackupSettingsPanel bcSetsPanel; public BcController(PicturesLeftPanel leftPanel,BackupImagesPanel rightPanel,ItorPathPanel pathPanel,BackupSettingsPanel bcSetsPanel) { super(); this.leftPanel=leftPanel; this.rightPanel=rightPanel; this.pathPanel=pathPanel; this.bcSetsPanel=bcSetsPanel; enableBackupCtrls();} public void enableBackupCtrls() { leftPanel.enableBackupCtrls(true); rightPanel.enableBackupCtrl(true); pathPanel.enableBackupCtrls(true); bcSetsPanel.getBcSets().enableCtrls(true); bcSetsPanel.getCutSides().enableCtrls(true);} public void disableBackupCtrls() { leftPanel.enableBackupCtrls(false); rightPanel.enableBackupCtrl(false); pathPanel.enableBackupCtrls(false); bcSetsPanel.getBcSets().enableCtrls(false); bcSetsPanel.getCutSides().enableCtrls(false);} public PicturesLeftPanel getLeftPanel() { return leftPanel;} public BackupImagesPanel getRightPanel() { return rightPanel;} public ItorPathPanel getPathPanel() { return pathPanel;} public BackupSettings getBcSets() { return bcSetsPanel.getBcSets();} public BackupSidesCutSettings getCutSides() { return bcSetsPanel.getCutSides();} public BackupSettingsPanel getBcSetsPanel() { return bcSetsPanel;}} class PbCommand { public final static int ID_SCAN_LEFT=1; public final static int ID_SCAN_RIGHT=1+1; public final static int ID_BACKUP_ALL_LEFT=1+1+1; public final static int ID_INTEGRATE_ALL_RIGHT=1+1+1+1; public final static int ID_VIEW_ALL_RIGHT=1+1+1+1+1; public final static int ID_DELETE_ALL_RIGHT=1+1+1+1+1+1; public final static int ID_ENABLE_CTRLS=1+1+1+1+1+1+1; private int id; protected boolean complete; protected PbCommand lunchAfterCmd; protected Queue lunchAfterCmds; protected long time1; private PbCommand(int id,Queue lunchAfterCmds) { super(); this.id=id; this.complete=false; this.lunchAfterCmds=lunchAfterCmds; this.time1=new Date().getTime();} private PbCommand(int id,PbCommand lunchAfterCmd) { super(); this.id=id; this.complete=false; this.lunchAfterCmd=lunchAfterCmd; this.time1=new Date().getTime();} public PbCommand getLunchAfterCmd() { return lunchAfterCmd;} public boolean isComplete() { if(lunchAfterCmds !=null && lunchAfterCmds.sizeOfQueue() > 0) { for(int i=0; i < lunchAfterCmds.sizeOfQueue(); i++) { PbCommand pbCommand=(PbCommand) lunchAfterCmds.getQueueRecord(i); if(pbCommand.isComplete()==false) return false;} return true;} return complete;} public void markComplete() { complete=true;} public int getId() { return id;} public static PbCommand createComposite(int cmdId,PbCommand c1,PbCommand c2) { return createComposite(cmdId,c1,c2,null,null,null);} public static PbCommand createComposite(int cmdId,PbCommand c1,PbCommand c2,PbCommand c3) { return createComposite(cmdId,c1,c2,c3,null,null);} public static PbCommand createComposite(int cmdId,PbCommand c1,PbCommand c2,PbCommand c3,PbCommand c4) { return createComposite(cmdId,c1,c2,c3,c4,null);} public static PbCommand createComposite(int cmdId,PbCommand c1,PbCommand c2,PbCommand c3,PbCommand c4,PbCommand c5) { Queue completionExecList=new Queue(); if(c1 !=null) completionExecList.enqueueQueueRecord(c1); if(c2 !=null) completionExecList.enqueueQueueRecord(c2); if(c3 !=null) completionExecList.enqueueQueueRecord(c3); if(c4 !=null) completionExecList.enqueueQueueRecord(c4); if(c5 !=null) completionExecList.enqueueQueueRecord(c5); PbCommand cmd=null; switch(cmdId) { case ID_ENABLE_CTRLS : cmd=new PbCommand(cmdId,completionExecList); break;} return cmd;} public static PbCommand create(int cmdId,PbCommand lunchAfterCmd) { PbCommand cmd=null; switch(cmdId) { case ID_SCAN_LEFT : case ID_SCAN_RIGHT : case ID_BACKUP_ALL_LEFT : case ID_INTEGRATE_ALL_RIGHT : case ID_VIEW_ALL_RIGHT : case ID_DELETE_ALL_RIGHT : cmd=new PbCommand(cmdId,lunchAfterCmd); break;} return cmd;} public String toString() { return "Command [id="+id+", complete="+complete+", lunchAfter="+lunchAfterCmd+"]";} public long getTime() { return time1;}} class CommandPbQueue { private Queue itemsQueue=new Queue(); private int current; public CommandPbQueue() { super(); this.current=-1;} public int getCurrent() { return current;} public boolean allComplete() { boolean result=true; Object[] queueRecordsArray=itemsQueue.getQueueRecordsArray(); for(int i=0; i < queueRecordsArray.length; i++) { PbCommand item=(PbCommand) queueRecordsArray[i]; if(!item.isComplete()) return false;} return result;} public boolean hasRunAgainCondition(PbCommand curCmd) { int searchIdx=-1; for(int i=0; searchIdx==-1 && i < itemsQueue.sizeOfQueue(); i++) { PbCommand item=(PbCommand) itemsQueue.getQueueRecord(i); if(item.equals(curCmd)) searchIdx=i;} PbCommand prevSearch=null; for(int i=searchIdx-1; prevSearch==null && i >= 0; i--) { PbCommand item=(PbCommand) itemsQueue.getQueueRecord(i); if(item.getId()==curCmd.getId()) prevSearch=item;} if(prevSearch==null) return true; return new Date().getTime()-prevSearch.getTime() > 997 && prevSearch.isComplete();} public boolean hasConditionComplete(PbCommand curCmd) { int searchIdx=-1; for(int i=0; searchIdx==-1 && i < itemsQueue.sizeOfQueue(); i++) { PbCommand item=(PbCommand) itemsQueue.getQueueRecord(i); if(item.equals(curCmd)) searchIdx=i;} if(curCmd.getLunchAfterCmd()==null) return true; for(int i=searchIdx-1; i >= 0; i--) { PbCommand item=(PbCommand) itemsQueue.getQueueRecord(i); if(curCmd.getLunchAfterCmd().equals(item)) return item.isComplete();} return false;} public void rollbackCurrent() { current--;} public void push(PbCommand cmd) { if(cmd !=null) { if(itemsQueue.sizeOfQueue() > 0) { PbCommand prev=(PbCommand) itemsQueue.getQueueRecord((int)(itemsQueue.sizeOfQueue()-1)); if(prev.getId()==cmd.getId()); else itemsQueue.enqueueQueueRecord(cmd);} else itemsQueue.enqueueQueueRecord(cmd);}} public boolean hasSomeWork() { return current < itemsQueue.sizeOfQueue()-1;} public PbCommand nextCurrent() { current++; PbCommand cmd=(PbCommand) itemsQueue.getQueueRecord(current); return cmd;} public String toString() { return "CommandQueue [items.size="+itemsQueue.sizeOfQueue()+", current="+current+"]";}} abstract class CommandExecutionTask extends ProgressMultiTasking { protected PbCommand cmd; public CommandExecutionTask(PbCommand cmd) { super(); this.cmd=cmd;} public void run() { super.run(); if(cmd !=null) cmd.markComplete();}} class RightSelectActivity extends SidePanelActivity { LoggingVkusnjashki logPanel; private ImageBackupPreviewCanvas cv; private long num; public RightSelectActivity(SidePanel sidePanel,ExpectHere eh,AverageRec ar,LoggingVkusnjashki logPanel,ImageBackupPreviewCanvas cv,long num) { super(sidePanel,eh,ar); this.logPanel=logPanel; this.cv=cv; this.num=num;} void perform(int idxSel,String curSel,String path,String impExt) { String bcExt=curSel.substring(curSel.lastIndexOf('.')); logPanel.addLog("View right "+(idxSel+1)+"/"+num+" image{"+curSel+"} from "+path+" "+ar.getAverageTime()+"s"); cv.pushReloadRequest(path,bcExt,eh,BackupResolution.createNoAction());}} class LeftSelectActivity extends SidePanelActivity { private ImageBackupPreviewCanvas cv; LoggingVkusnjashki logPanel; private long num; private String[] bcExts; private BackupResolution br; public LeftSelectActivity(SidePanel sidePanel,ExpectHere eh,AverageRec ar,ImageBackupPreviewCanvas cv,LoggingVkusnjashki logPanel,long num,String[] bcExts,BackupResolution br) { super(sidePanel,eh,ar); this.cv=cv; this.logPanel=logPanel; this.num=num; this.bcExts=bcExts; this.br=br;} public LoggingVkusnjashki getLogPanel() { return logPanel;} public ImageBackupPreviewCanvas getCv() { return cv;} public long getNum() { return num;} public String[] getBcExts() { return bcExts;} public void setExpectHere(ExpectHere eh) { this.eh=eh;} void perform(int idxSel,String curSel,String path,String impExt) { for(int i=0; i < bcExts.length; i++) { String bcExt=bcExts[i]; logPanel.addLog("Left backup ("+bcExt+") "+(idxSel+1)+"/"+num+" of image{"+curSel+"} to "+Data.replace(new Ester(path),new Ester(impExt),new Ester(bcExt.substring(1))).toString());} cv.pushReloadRequest(path,true,bcExts,eh,br);}} class RightIntegrateActivity extends SidePanelActivity { ItorLogPanel logPanel; private ImageBackupPreviewCanvas cv; private int type; private long num; private String bcExt; public RightIntegrateActivity(SidePanel sidePanel,ExpectHere eh,AverageRec ar,ItorLogPanel logPanel,ImageBackupPreviewCanvas cv,int type,long num) { super(sidePanel,eh,ar); this.logPanel=logPanel; this.cv=cv; this.type=type; this.num=num;} public void setBcExt(String bcExt) { this.bcExt=bcExt;} void perform(int idxSel,String curSel,String path,String impExt) { logPanel.addLog("Right integration "+(idxSel+1)+"/"+num+" image{"+curSel+"} from "+path); cv.pushIntegrationRequest(path,type,bcExt,eh);}} abstract class SidePanelActivity { protected SidePanel sidePanel; protected ExpectHere eh; protected AverageRec ar; public SidePanelActivity(SidePanel sidePanel,ExpectHere eh,AverageRec ar) { super(); this.sidePanel=sidePanel; this.eh=eh; this.ar=ar;} public void lunchActivity() { int idxSel=sidePanel.getSelectedIdx(); sidePanel.setCurrentIdx(idxSel); sidePanel.setAverageRec(ar); String curSel=sidePanel.getItemSelected(); AddItemRec itemRec=sidePanel.getRecord(idxSel); perform(idxSel,curSel,itemRec.fullPath,itemRec.impExt);} abstract void perform(int idxSel,String curSel,String path,String impExt);} class ReloadRequest { private String path; private boolean withBackup; private String[] backupExts; private ExpectHere procNextMarker; private BackupResolution br; LoggingVkusnjashki logging; public ReloadRequest(String path,boolean withBackup,String[] backupExts,ExpectHere procNextMarker,LoggingVkusnjashki logging,BackupResolution br) { super(); this.path=path; this.withBackup=withBackup; this.backupExts=backupExts; this.procNextMarker=procNextMarker; this.logging=logging; this.br=br;} public LoggingVkusnjashki getLogging() { return logging;} public String getPath() { return path;} public boolean isWithBackup() { return withBackup;} public String[] getBackupExts() { return backupExts;} public BackupResolution getBr() { return br;} public ExpectHere getProcNextMarker() { return procNextMarker;}} class IntegrationRequest { private int type; private String path; private boolean withBackup; private String backupExt; private ExpectHere procNextMarker; LoggingVkusnjashki logging; public IntegrationRequest(String path,int type,String backupExt,ExpectHere procNextMarker,LoggingVkusnjashki logging) { this.type=type; this.path=path; this.withBackup=false; this.backupExt=backupExt; this.procNextMarker=procNextMarker; this.logging=logging;} public int getType() { return type;} public String getPath() { return path;} public boolean isWithBackup() { return withBackup;} public String getBackupExt() { return backupExt;} public ExpectHere getProcNextMarker() { return procNextMarker;} public LoggingVkusnjashki getLogging() { return logging;}} class IntegrationSaveRequest extends IntegrationRequest { private String picturesPath; public IntegrationSaveRequest(String picturesPath,String backupExt,ExpectHere procNextMarker,LoggingVkusnjashki logging) { super("",0,backupExt,procNextMarker,logging); this.picturesPath=picturesPath;} public String getPicturesPath() { return picturesPath;}} class ItorProps extends Props { public static final int BACKUP_START_WIDTH=32; public static final int BACKUP_START_HEIGHT=32; public static final int BACKUP_START_WIDTH_PC=50; public static final int BACKUP_START_HEIGHT_PC=50; public static final int BACKUP_SIDE_CUT=100-40-20+5+1+1+1+1+1+1+1; public static final int BACKUP_SIDE_CUT_NONE=0; public static final Color bgCutPanelColor=Color.white; public static final Color bgCutFieldColor=Color.lightGray; public static final Color bgResolPanelColor=Color.lightGray; public static final int SPS=LabeledPanel.DEF_WRAP_SIZE;}