package mydev.bri; import java.awt.BorderLayout; import java.awt.Button; import java.awt.Color; import java.awt.Event; import java.awt.Frame; import java.awt.Label; import java.awt.LayoutManager; import java.awt.List; import java.awt.Panel; import java.awt.Point; import java.awt.TextArea; import java.awt.TextField; import java.io.File; import java.io.IOException; import mydev.aaa.Sleeper; import mydev.anim.ColorsLogo; import mydev.bbb.Enter2; import mydev.bbb.Location; import mydev.onewayc.OneWayConv; import mydev.uix.AbstractApproach; import mydev.uix.AbstractApproachProvider; import mydev.uix.AbstractParallelPanel; import mydev.uix.AmountPanel; import mydev.uix.AveragePanel; import mydev.uix.Better; import mydev.uix.CommonDataArrayPanel; import mydev.uix.CommonLogPanel; import mydev.uix.CommonLogo; import mydev.uix.CommonSouthPanel; import mydev.uix.ControlsPanel; import mydev.uix.HeaderPathPanel; import mydev.uix.IgnorePanel; import mydev.uix.LabeledPanel; import mydev.uix.ListPanel; import mydev.uix.LoggingVkusnjashki; import mydev.uix.LongTermCtrl; import mydev.uix.PagesPanel; import mydev.uix.Params; import mydev.uix.ProgressBar; import mydev.uix.ProgressMultiTasking; import mydev.uix.Props; import mydev.uix.SidePanelFactory; import mydev.uix.SizePanel; import mydev.uix.Timer; import mydev.uix.ToogleMultyButton; import mydev.uix.YellowAutoButton; import mydev.vutils.AverageRec; import mydev.vutils.Data; import mydev.vutils.Ester; import mydev.vutils.ExpectHere; import mydev.vutils.Files; import mydev.vutils.Filter; import mydev.vutils.Join; import mydev.vutils.Karta; import mydev.vutils.Metr; import mydev.vutils.Order; import mydev.vutils.Queue; import mydev.vutils.ReadyFree; import mydev.vutils.Stack; import mydev.vutils.Time; public class Tina extends Frame implements Runnable,LongTermCtrl { TinaPathPanel pathPanel; HeuristicsLeftPanel leftPanel; HeuristicsRightPanel rightPanel; PkgClsParallelPanel quadePanel; TinaSouthPanel southPanel; TinaLogPanel logPanel; String pathParam; String leftPanelParam; PkgClsProcessor spCurrent; public Tina(String title) { super(title); setLayout(new BorderLayout()); setBackground(Color.darkGray);} public static void main(String[] args) throws IOException { Tina main=new Tina("Leaves Days Moohabojka"); if(args.length > 0) { String param=args[0]; main.setPathParam(param); return;} else System.out.println("Please specify source file as a parameter."); main.show(); main.start(); main.pack(); main.reMoveRnd(); main.resize(Enter2.instance().getMainWindowsWidth(),Enter2.instance().getMainWindowsHeight()); Sleeper sleeper=new Sleeper(); while(Better.working) { main.refreshUpdatable(); sleeper.sleep(Timer.DEF_REF_TIME);} main.hide(); main.dispose(); System.exit(1-1);} public void setPathParam(String path) { this.pathParam=path; File file=new File(path); String fullPath=file.getAbsolutePath(); if(file.isDirectory()) updateInfo(null,true); else { String item=file.getName(); leftPanelParam=item; leftPanel.addItem(item,fullPath);}} protected void reMoveRnd() { Location ol=Enter2.instance().location(); Point p=ol.getRandomExternalPos((short) Location.MAIN_WINDOWS_WIDTH,(short) Location.MAIN_WINDOWS_HEIGHT); move(p.x,p.y);} public boolean hasLongTermContin() { return pathPanel.hasLongTermContin();} public boolean handleEvent(Event et) { if(et.id==Event.WINDOW_DESTROY) new Better().exitApplicationLoop(); if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getBtScan()) { logPanel.prognoseTasks(1); leftPanel.clearAvgPanel(); updateInfo(null,true); quadePanel.clearAverage(); rightPanel.clearTasks();} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getCbCancelIgnore()) leftPanel.onCancelIgnore(); if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getBtStop()) pathPanel.disableStop(); if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getQuadeBtn()) { pathPanel.changeQuadeState(); cRemake(); pack(); invalidate(); repaint();} if(et.id==Event.LIST_SELECT && leftPanel.isItemsCtrl(et.target)) { rightPanel.selectNothing(); quadePanel.initSource(); spCurrent=leftPanel.leftSelected();} if(et.id==Event.LIST_SELECT && rightPanel.isItemsCtrl(et.target)) { leftPanel.selectNothing(); String rightTask=rightPanel.getSelected(); logPanel.addLog("Select item "+rightTask); rightSelected();} if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getBtnPanel().getBtExport()) { rightSelectedSave(); rightPanel.enableExportBtn(false);} if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getChPreview()) { if(pathPanel.getPreview()) pathPanel.setPath("C:\\Users\\dzianis\\workspace\\"); else pathPanel.setPath("C:\\Users\\dzianis\\workspace\\");} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getBtReview()) { logPanel.prognoseTasks(1); leftPanel.clearAvgPanel(); quadePanel.clearAverage(); rightPanel.clearTasks(); reviewLeftItems();} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getBtAuto()) { logPanel.prognoseTasks(1+1+1+1+1+1+1+1); leftPanel.clearAvgPanel(); quadePanel.clearAverage(); rightPanel.clearTasks(); leftPanel.clearItems(); autoLines();} if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getBtnPanel().getBtSort()) { logPanel.prognoseTasks(1); rightPanel.restoreList(); sortLines(false,true,true);} if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getBtnPanel().getBtDoubles()) { logPanel.prognoseTasks(1); rightPanel.backupList(); sortLines(true,true,true);} if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getBtnPanel().getBtExport()) { logPanel.prognoseTasks(1); exportList(pathPanel);} if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getBtnPanel().getBtClear()) rightPanel.clearTasks(); return super.handleEvent(et);} public void run() { ExpectHere eh=new ExpectHere(); updateInfo(eh,false); eh.stopUntilExpected(); PkgClsProcessor sp; Sleeper sleeper=new Sleeper(); Time t=new Time(); LongTermCtrl ltc=pathPanel; t.start(); int size1=leftPanel.itemsNum(); if(size1 > 0) { leftSelectionProcessAll(sleeper,ltc,size1); while(quadePanel.hasInProgress()) { sleeper.sleep(166); System.out.print("SLEEP_2");} System.out.println("");} sp=null; quadePanel.clearPanels(); t.trust(); logPanel.addLogComplete("Average records("+quadePanel.getAverageRec().getRecordsNum()+") processing time is "+quadePanel.getAverageRec().getAverageTime()+"s also min time is "+quadePanel.getAverageRec().getMinTime()+"s and max time is "+quadePanel.getAverageRec().getMaxTime()+"s"); logPanel.addLogComplete("Auto check complete in "+t.ess()); leftPanel.selectNothing(); exportList(ltc); if(ltc.hasLongTermContin()) { rightPanel.restoreList(); sortLines(false,false,false);} if(ltc.hasLongTermContin()) rightRun(sleeper,ltc); exportList(ltc); if(ltc.hasLongTermContin()) { rightPanel.backupList(); sortLines(true,false,false);} if(ltc.hasLongTermContin()) rightRun(sleeper,ltc); exportList(ltc); if(ltc.hasLongTermContin()) if(pathPanel.getPreview()) { pathPanel.setPreview(false); sleeper.sleep(166 * 2); new Better().exitApplicationLoop();} pathPanel.getBtScan().enable(true); pathPanel.enableDuoBtn(true); pathPanel.enablePreview(true); leftPanel.enableBtAuto(true); leftPanel.enableBtReview(true); leftPanel.enableCtrls(true); rightPanel.enableCtrls(true); pathPanel.disableStop();} private void exportList(LongTermCtrl ltc) { TinaExportRightListTask exportTask=new TinaExportRightListTask(rightPanel,pathPanel,logPanel,ltc); logPanel.regTreckableTask(exportTask); exportTask.run();} protected void leftSelectionProcessAll(Sleeper sleeper,LongTermCtrl ltc,int size1) { LeftTinaProcessAllTask packTask=new LeftTinaProcessAllTask(leftPanel,quadePanel,logPanel,pathPanel,sleeper,size1,ltc); logPanel.regTreckableTask(packTask); packTask.run();} private void rightRun(Sleeper sleeper,LongTermCtrl ltc) { TinaRightRunTask rightRunTask=new TinaRightRunTask(rightPanel,sleeper,ltc); logPanel.regTreckableTask(rightRunTask); rightRunTask.run();} protected void sortLines(boolean nameSort,boolean parallel,boolean manageCtrls) { if(manageCtrls) { leftPanel.enableBtAuto(false); leftPanel.enableBtReview(false); pathPanel.getBtScan().enable(false); pathPanel.enableDuoBtn(false); pathPanel.enableStop(); pathPanel.enablePreview(false); leftPanel.enableCtrls(false); rightPanel.enableCtrls(false);} RightOrderTask rightOrdering=new RightOrderTask(new PanelsAg(logPanel,leftPanel,rightPanel,pathPanel,quadePanel),nameSort,manageCtrls); logPanel.regTreckableTask(rightOrdering); if(parallel) new Thread(rightOrdering).start(); else rightOrdering.run();} protected void reviewLeftItems() { leftPanel.enableBtAuto(false); leftPanel.enableBtReview(false); pathPanel.getBtScan().enable(false); pathPanel.enableDuoBtn(false); pathPanel.enableStop(); pathPanel.enablePreview(false); leftPanel.enableCtrls(false); rightPanel.enableCtrls(false); LeftViewAllTask reviewTask=new LeftViewAllTask(new PanelsAg(logPanel,leftPanel,rightPanel,pathPanel,quadePanel)); logPanel.regTreckableTask(reviewTask); new Thread(reviewTask).start();} protected void autoLines() { leftPanel.enableBtAuto(false); leftPanel.enableBtReview(false); pathPanel.getBtScan().enable(false); pathPanel.enableDuoBtn(false); pathPanel.enableStop(); pathPanel.enablePreview(false); leftPanel.enableCtrls(false); rightPanel.enableCtrls(false); new Thread(this).start();} protected void start() { this.southPanel=new TinaSouthPanel(); this.logPanel=southPanel.getLogPanel(); this.pathPanel=new TinaPathPanel(pathParam); add("North",pathPanel.getWrapPanel()); add("West",leftPanel=new HeuristicsLeftPanel(logPanel,pathPanel)); add("East",rightPanel=new HeuristicsRightPanel(logPanel,pathPanel)); cRemake(); leftPanel.setQP(quadePanel); add("South",southPanel); if(leftPanelParam !=null) { leftPanel.selectItem(0); leftPanel.setAmount("1"); leftPanel.setSize(""+new File(pathParam).length()); spCurrent=(PkgClsExtractPanel) quadePanel.getFirst(); spCurrent.readSource(leftPanelParam,pathParam,pathParam,pathParam,0); spCurrent.process(true);}} void cRemake() { if(quadePanel !=null) remove(quadePanel); add("Center",quadePanel=PkgClsParallelPanel.create(pathPanel.getDuo(),new PanelsAg(logPanel,leftPanel,rightPanel,pathPanel,quadePanel)));} protected void refreshUpdatable() { leftPanel.updateOnUiThread(quadePanel.getAverageRec()); southPanel.refreshUpdatable(); rightPanel.updateOnUiThread(); pathPanel.refreshUpdatable();} protected void updateInfo(ExpectHere eh,boolean opSingle) { String path=pathPanel.getPath(); pathPanel.enableStop(); leftPanel.clearItems(); quadePanel.initSource(); leftPanel.setPosition(""); leftPanel.dropBtnSkipPosition(); rightPanel.getBtnPanel().dropBtnSkipPosition(); ScanSourceLeftTask scanSourceLeft=new ScanSourceLeftTask(leftPanel,path,logPanel,eh,opSingle,pathPanel); logPanel.regTreckableTask(scanSourceLeft); new Thread(scanSourceLeft).start();} protected void rightSelectedSave() { int idxSel=rightPanel.getSelectedIdx(); if(idxSel >-1) { if(spCurrent==null) spCurrent=(PkgClsExtractPanel) quadePanel.getFirst();}} protected void rightSelected() { rightPanel.setAmount(""+rightPanel.itemsNum()); int idxSel=rightPanel.getSelectedIdx(); rightPanel.setPosition(""+(idxSel+1));}} class TinaSouthPanel extends CommonSouthPanel { TinaLogPanel logPanel; ColorsLogo logoPanel; public TinaSouthPanel() { super();} protected CommonLogo obtainLogo() { logoPanel=new ColorsLogo(); return logoPanel;} protected CommonLogPanel obtainLogPanel() { logPanel=new TinaLogPanel(); return logPanel;} public TinaLogPanel getLogPanel() { return logPanel;}} class TinaLogPanel extends CommonLogPanel implements LoggingVkusnjashki { public TinaLogPanel() { super(false);} protected ProgressBar obtainProgressBarCurrent() { ProgressBar progressBar=new ProgressBar(ProgressBar.DEF_HEIGHT,TinaProps.borderProgressColor,TinaProps.bgProgressColor,TinaProps.mainProgressColor,true); return progressBar;} protected ProgressBar obtainProgressBarTotal() { return new ProgressBar(ProgressBar.DEF_HEIGHT,TinaProps.borderProgressTotalColor,TinaProps.bgProgressTotalColor,TinaProps.mainProgressTotalColor,true);} public Color getPanelBgColor() { return TinaProps.bgLogPanelColor;} public LayoutManager getPanelLayout() { return new BorderLayout();} public LoggingVkusnjashki getLogging() { return(LoggingVkusnjashki)(this);}} class TinaPathPanel extends HeaderPathPanel implements LongTermCtrl { private String pathParam; public TinaPathPanel(String pathParam) { super("Leaves Days Moohabojka",true,true,LabeledPanel.DEF_MIN_SIZE,TinaProps.northBgColor,TinaProps.northBorderColor,TinaProps.northTextColor); this.pathParam=pathParam;} public Button getQuadeBtn() { return getBtMulty();} public boolean getDuo() { return getMultyState();} public void enableDuoBtn(boolean enable) { enableMultyBtn(enable);} public void changeQuadeState() { changeMultyState();} public boolean hasLongTermContin() { return longTermOp;} protected ToogleMultyButton obtainMultyButton() { return new DuoBriButton();} protected Label obtainLbPath() { Label lbPath=new Label("Source location:"); lbPath.setForeground(Color.black); return lbPath;} protected TextField obtainTfPath() { TextField tfPath=new TextField("",50+20+10+5-30-20+5); tfPath.setText("C:\\Users\\dzianis\\workspace\\Architecho\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\"); tfPath.setText("C:\\Users\\dzianis\\workspace2\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\Review\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\Review\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\Reenock\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\"); if(pathParam !=null) tfPath.setText(pathParam); return tfPath;} protected void buildPanel() { buildPath();} public Color getPanelBgColor() { return TinaProps.bgTopColor;}} class HeuristicsPagesPanel extends PagesPanel { public HeuristicsPagesPanel() { super(TinaProps.listPanelPageSize);} public Color getPanelBgColor() { return TinaProps.bgPagesPanelColor;}} class HeuristicsRightPanel extends CommonDataArrayPanel { ListPanel listPanel; ExportDoublesSortPanel btnPanel; private Queue itemsQueue=new Queue(); private Stack itemsBackup; private String exportName=TinaProps.INPUT_AVG_LIST; TinaPathPanel pathPanel; LoggingVkusnjashki logPanel; public HeuristicsRightPanel(LoggingVkusnjashki logPanel,TinaPathPanel pathPanel) { super(); this.logPanel=logPanel; this.pathPanel=pathPanel;} public ExportDoublesSortPanel getBtnPanel() { return btnPanel;} protected Panel obtainControlsPanel() { this.btnPanel=new ExportDoublesSortPanel(); return btnPanel;} protected SizePanel obtainSizePanel() { return null;} protected ListPanel obtainListPanel() { this.listPanel=new ListPanel(new HeuristicsStatPanel("Class(es) and Interface(s)","")); return listPanel;} public Color getPanelBgColor() { return TinaProps.bgSizePanelColor;} protected Color getWrapPanelColor() { return TinaProps.bgStatPanelColor;} public void setLogPanel(LoggingVkusnjashki logPanel) { this.logPanel=logPanel;} public void enableExportBtn(boolean enable) { btnPanel.getBtExport().enable(enable);} public LoggingVkusnjashki getLogPanel() { return logPanel;} public TinaPathPanel getPathPanel() { return pathPanel;} public void restoreList() { exportName=TinaProps.FULL_ORDERED_LIST; if(itemsBackup !=null && itemsBackup.sizeOfStack() > 0) { clearTasks(); Object[] stackRecordsArray=itemsBackup.getStackRecordsArray(); String[] clsItems=new String[(int) stackRecordsArray.length]; for(int i=0; i < clsItems.length; i++) clsItems[i]=(String) stackRecordsArray[i]; append(clsItems);}} public void backupList() { exportName=TinaProps.DOUBLES_ORDERED_LIST; itemsBackup=new Stack(itemsQueue.getQueueRecordsArray());} public String getExportName() { return exportName;} public String[] getClsList() { Object[] queueRecordsArray=itemsQueue.getQueueRecordsArray(); String[] clsItems=new String[(int) queueRecordsArray.length]; for(int i=0; i < clsItems.length; i++) clsItems[i]=(String) queueRecordsArray[i]; return clsItems;} public String getSelected() { int idx=listPanel.getSelectedIndex(); String selected=(String) itemsQueue.getQueueRecord(idx); return selected;} public void enableCtrls(boolean enable) { listPanel.listEnable(enable);} public void updateOnUiThread() { boolean itemsNumGt=listPanel.itemsNum() > 0; btnPanel.enableSortBtn(!pathPanel.hasLongTermContin() && itemsNumGt); btnPanel.enableDoublesBtn(!pathPanel.hasLongTermContin() && itemsNumGt); btnPanel.enableExportBtn(!pathPanel.hasLongTermContin() && itemsNumGt); btnPanel.enableClearBtn(!pathPanel.hasLongTermContin() && itemsNumGt);} public synchronized void clearTasks() { setPosition(""); setAmount(""); listPanel.clearItems(); itemsQueue.clearQueue(); getBtnPanel().dropBtnSkipPosition();} private synchronized void addItem(String pkgCls) { Object[] queueRecordsArray=itemsQueue.getQueueRecordsArray(); String contains=null; for(int i=0; contains==null && i < queueRecordsArray.length; i++) { String item=(String) queueRecordsArray[i]; if(item.equalsIgnoreCase(pkgCls)) contains=item;} if(contains==null) { listPanel.addItem(pkgCls); itemsQueue.enqueueQueueRecord(pkgCls); logPanel.addLog("Register item "+pkgCls);} setAmount(""+listPanel.itemsNum());} public void append(String[] clsList) { for(int i=0; i < clsList.length; i++) { if(clsList[i].indexOf(')') >-1) { System.out.println(""+new Data().dump(clsList)); int g=1;}} for(int i=0; i < clsList.length; i++) addItem(clsList[i]);}} class ExportDoublesSortPanel extends ControlsPanel { final static String BT_DOUBLES="btDoubles"; final static String BT_SORT="btSort"; final static String BT_EXPORT="btExport"; final static String BT_CLEAR="btClear"; public ExportDoublesSortPanel() { super();} public Color getPanelBgColor() { return TinaProps.bgCtrlPanelColor;} public Button getBtDoubles() { return(Button) getCtrl(BT_DOUBLES);} public Button getBtSort() { return(Button) getCtrl(BT_SORT);} public void enableExportBtn(boolean enable) {((Button) getCtrl(BT_EXPORT)).enable(enable);} public void enableClearBtn(boolean enable) {((Button) getCtrl(BT_CLEAR)).enable(enable);} public void enableDoublesBtn(boolean enable) {((Button) getCtrl(BT_DOUBLES)).enable(enable);} public void enableSortBtn(boolean enable) {((Button) getCtrl(BT_SORT)).enable(enable);} public Button getBtExport() { return(Button) getCtrl(BT_EXPORT);} public Button getBtClear() { return(Button) getCtrl(BT_CLEAR);} protected void buildPanel() { append(BT_DOUBLES,new Button("Doubles")); append(BT_SORT,new Button("Sort")); append(BT_EXPORT,new Button("Export")); append(BT_CLEAR,new Button("Clear"));} public void enableCtrls(boolean enable) {((Button) getCtrl(BT_DOUBLES)).enable(enable);((Button) getCtrl(BT_SORT)).enable(enable);((Button) getCtrl(BT_EXPORT)).enable(enable);((Button) getCtrl(BT_CLEAR)).enable(enable);}} class HeuristicsIgnorePanel extends IgnorePanel { public HeuristicsIgnorePanel() { super();} protected void initIgnoreList() { String pkgIgnore="mydev."+"aaa;"+"\n"+"mydev."+"vutils;"+"\n"; String aboutIgnore="\n"+"mydev."+"about;"; String ignoreListOneLine=pkgIgnore+"p_ticca"+"3d.java"+"\n"+"galle"+"ry.java"+"\n"+"gamepa"+"ck.java"+"\n"+"mydev."+"cndata;"; setIgnoreList(ignoreListOneLine); for(int i=0; i < 1+1; i++) changeState();}} class HeuristicsLeftPanel extends CommonDataArrayPanel { HeuristicsIgnorePanel ignorePanel; ListPanel listPanel; HeuristicsAutoScanPanel confLunchPanel; SizePanel sizePanel; AveragePanel avgPanel; TinaLogPanel logPanel; TinaPathPanel pathPanel; PkgClsParallelPanel quadePanel; private Queue leftItemsQueue=new Queue(); private boolean leftItemsQueueIns; private String[] leftItemsQueueArr=new String[1-1]; public HeuristicsLeftPanel(TinaLogPanel logPanel,TinaPathPanel pathPanel) { super(); this.logPanel=logPanel; this.pathPanel=pathPanel;} public void dropBtnSkipPosition() { confLunchPanel.dropBtnSkipPosition();} public void enableBtReview(boolean enable) { confLunchPanel.getBtReview().enable(enable);} public void enableBtAuto(boolean enable) { confLunchPanel.getBtAuto().enable(enable);} protected Panel obtainControlsPanel() { this.confLunchPanel=new HeuristicsAutoScanPanel(); return confLunchPanel;} protected SizePanel obtainSizePanel() { this.sizePanel=SidePanelFactory.createTotalSizePanel(); return sizePanel;} public HeuristicsIgnorePanel getIgnorePanel() { return ignorePanel;} protected AveragePanel obtainAveragePanel() { this.avgPanel=SidePanelFactory.createUsualAveragePanel(); return avgPanel;} protected ListPanel obtainListPanel() { this.listPanel=new ListPanel(new HeuristicsStatPanel("package","item(s)"),new HeuristicsPagesPanel()); return listPanel;} protected IgnorePanel obtainIgnorePanel() { this.ignorePanel=new HeuristicsIgnorePanel(); return ignorePanel;} public Color getPanelBgColor() { return TinaProps.bgSizePanelColor;} protected Color getWrapPanelColor() { return TinaProps.bgStatPanelColor;} public void setLogPanel(TinaLogPanel logPanel) { this.logPanel=logPanel;} public Button getBtAuto() { return confLunchPanel.getBtAuto();} public Button getBtReview() { return confLunchPanel.getBtReview();} public TinaLogPanel getLogPanel() { return logPanel;} public TinaPathPanel getPathPanel() { return pathPanel;} public PkgClsParallelPanel getQuadePanel() { return quadePanel;} public void setQP(PkgClsParallelPanel quadePanel) { this.quadePanel=quadePanel;} PkgClsProcessor leftSelected() { int idxSel=getSelectedIdx(); String curSel=getSelectedName(); String relPath=listPanel.getItem(idxSel); String path=getSelectedPath(); String looking=pathPanel.getPath(); logPanel.addLog("Selected item "+path); PkgClsProcessor sp=(PkgClsExtractPanel) quadePanel.assignSource(curSel,path,looking,relPath,idxSel); setPosition(""+(idxSel+1)); return sp;} public void enableCtrls(boolean enable) { listPanel.listEnable(enable);} public String getSelectedName() { String fullPath=getSelectedPath(); return new Ester(fullPath).sub(1+(new Ester(fullPath).indexX('/') > new Ester(fullPath).indexX('\\') ? new Ester(fullPath).indexX('/') : new Ester(fullPath).indexX('\\'))).toString();} public String getSelectedPath() { int idxSel=listPanel.getSelectedIndex(); if(leftItemsQueueIns) leftItemsQueueArr=makeCopyCash(); String path=leftItemsQueueArr[idxSel]; return path;} public void clearItems() { listPanel.clearItems(); leftItemsQueue.clearQueue(); leftItemsQueueIns=false; leftItemsQueueArr=makeCopyCash();} private String[] makeCopyCash() { leftItemsQueueIns=false; Object[] queueRecordsArray=leftItemsQueue.getQueueRecordsArray(); String[] result=new String[queueRecordsArray.length]; for(int i=0; i < result.length; i++) result[i]=(String) queueRecordsArray[i]; return result;} public void updateOnUiThread(AverageRec mar) { updateMinMaxAvg(mar); LongTermCtrl ltc=pathPanel; enableBtReview(!ltc.hasLongTermContin() && listPanel.itemsNum() > 0);} public void addItem(String item,String fullPath) { listPanel.addItem(item); leftItemsQueue.enqueueQueueRecord(fullPath); leftItemsQueueIns=true;}} class HeuristicsAutoScanPanel extends ControlsPanel { final static String BT_REVIEW="btReview"; public HeuristicsAutoScanPanel() { super(); enableReview(true);} public Button getBtReview() { return(Button) getCtrl(BT_REVIEW);} public Button getBtAuto() { return getAutoBtn().getBtAuto();} public Color getPanelBgColor() { return TinaProps.bgCtrlPanelColor;} protected void buildPanel() { append(BT_REVIEW,new Button("Review")); append("tinaAutoFrame",new TinaAutoFrame());} public void enableCtrls(boolean enable) {((Button) getCtrl(BT_REVIEW)).enable(enable); getAutoBtn().enableCtrl(enable);} public void enableAuto(boolean enable) { getAutoBtn().enableCtrl(enable);} public void enableReview(boolean enable) {((Button) getCtrl(BT_REVIEW)).enable(enable);}} class TinaAutoFrame extends YellowAutoButton { public TinaAutoFrame() { super();}} class HeuristicsStatPanel extends AmountPanel { public HeuristicsStatPanel(String criteriaName,String itemsName) { super(criteriaName,itemsName);} protected int getPosWidth() { return super.getPosWidth()-1-1-1;} protected int getAmountWidth() { return super.getAmountWidth()-1-1-1;} public Color getPanelBgColor() { return TinaProps.bgAmountPanelColor;}} class ScanSourceLeftTask extends ProgressMultiTasking { HeuristicsLeftPanel leftPanel; TinaLogPanel logPanel; TinaPathPanel pathPanel; private String path; private Metr amount=new Metr(); private Metr size=new Metr(); private ExpectHere expectHere; private boolean opSingle; public ScanSourceLeftTask(HeuristicsLeftPanel leftPanel,String path,TinaLogPanel logPanel,ExpectHere eh,boolean opSingle,TinaPathPanel pathPanel) { super(); this.leftPanel=leftPanel; this.path=path; this.logPanel=logPanel; this.expectHere=eh; this.opSingle=opSingle; this.pathPanel=pathPanel;} public TinaLogPanel getLogPanel() { return logPanel;} public HeuristicsLeftPanel getLeftPanel() { return leftPanel;} public String getPath() { return path;} public Metr getAmount() { return amount;} public Metr getSize() { return size;} void displayAmount(Metr m) { Ester repr=m.repr(' '); leftPanel.setAmount(new Ester("0").eq(repr) ? "" : repr.toString());} void displaySize(Metr m) { Ester repr=m.repr(','); leftPanel.setSize(new Ester("0").eq(repr) ? "" : repr.toString());} protected void performTask() { Time t=new Time(); t.start(); updateStat(); scanItems(path,".java"); t.trust(); logPanel.addLogComplete("Source scan complete "+t.ess()); leftPanel.enableBtAuto(true==opSingle); leftPanel.enableBtReview(true==opSingle); if(opSingle) pathPanel.disableStop(); if(expectHere !=null) expectHere.markAsReached();} protected void updateStat() { Metr m=new Metr(0); m.inc(amount); displayAmount(m); m=new Metr(0); m.inc(size); displaySize(m);} protected void scanItems(String path,String ext) { System.out.println("world1 "+path); Ester[] start=new Files().tree(new Ester(path)); Ester[] select=new Filter().endsWithIncensitive(start,new Ester(ext)); Ester[] damage=new Join().join(new Filter().endsWithIncensitive(start,new Ester("\\mydev\\classes\\classes.java")),new Filter().endsWithIncensitive(start,new Ester("/mydev/classes/classes.java"))); damage=new Join().join(damage,new Join().join(new Filter().endsWithIncensitive(start,new Ester("mydev\\datel\\checker.java")),new Filter().endsWithIncensitive(start,new Ester("mydev/datel/checker.java")))); damage=new Join().join(damage,new Join().join(new Filter().endsWithIncensitive(start,new Ester("\\mydev\\webobj\\parsertest.java")),new Filter().endsWithIncensitive(start,new Ester("/mydev/webobj/parsertest.java")))); damage=new Join().join(damage,new Join().join(new Filter().endsWithIncensitive(start,new Ester("mydev\\webobj\\parser.java")),new Filter().endsWithIncensitive(start,new Ester("mydev/webobj/parser.java")))); select=new Join().sub(select,damage); Ester[] selectNames=new Filter().cutStart(select,new Ester(path)); for(int i=0; i < select.length && pathPanel.hasLongTermContin(); i++) { if(leftPanel.getIgnorePanel().hasIgnoreCoincidence(select[i].toString())) { recountComplete(i+1,select.length); continue;} leftPanel.addItem(selectNames[i].toString(),select[i].toString()); amount.inc(1); size.inc(new File(select[i].toString()).length()); updateStat(); recountComplete(i+1,select.length);}}} class BriCommand { public final static int ID_READY=1; public final static int ID_INIT=1+1; public final static int ID_READ_SOURCE=1+1+1; public final static int ID_ONELINE=1+1+1+1; private int id; protected boolean complete; BriCommand(int id) { super(); this.id=id; this.complete=false;} public static BriCommand create(int cmdId) { BriCommand cmd=null; switch(cmdId) { case ID_READY : case ID_INIT : cmd=new BriCommand(cmdId); break;} return cmd;} public int getId() { return id;} public boolean isComplete() { return complete;}} class ReadBriCommand extends BriCommand { private String name; private String path; private String start; String relPath; public ReadBriCommand(String name,String path,String start,String relPath) { super(ID_READ_SOURCE); this.name=name; this.path=path; this.start=start; this.relPath=relPath;} public String getStart() { return start;} public String getName() { return name;} public String getPath() { return path;} public String getRelPath() { return relPath;} public String toString() { return "CommandRead [name="+name+", path="+path+", start="+start+", relPath="+relPath+"]";}} interface PkgClsProcessor { boolean isReadyFree(); void readSource(String name,String path,String start,String relPath,int idxSel); void process(boolean needClear);} class ProcessBriCommand extends BriCommand { private boolean needClear; private ReadyFree readyFree; public ProcessBriCommand(ReadyFree readyFree,boolean needClear) { super(ID_ONELINE); this.readyFree=readyFree; this.needClear=needClear;} public ReadyFree getReadyFree() { return readyFree;} public boolean isNeedClear() { return needClear;}} class CommandBriQueue { private Queue itemsQueue=new Queue(); public CommandBriQueue() { super();} public void push(BriCommand cmd) { itemsQueue.enqueueQueueRecord(cmd);} public boolean hasSomeWork() { return itemsQueue.isEmptyQueue()==false;} public BriCommand nextCurrent() { BriCommand cmd=(BriCommand) itemsQueue.dequeueQueueRecord(); return cmd;}} class SourceHelpPanel extends Panel { List tfRelPath; TextField tfFullPath; PkgClsPanel zp; public SourceHelpPanel() { super(); setLayout(new BorderLayout()); setBackground(Color.darkGray); tfRelPath=new List(5-1,false); add("Center",tfRelPath=new List(5-1+(!tfRelPath.allowsMultipleSelections() ?-1 : 1-1),false)); tfRelPath.enable(!false); add("North",tfFullPath=new TextField()); tfFullPath.setEditable(false); add("West",zp=new PkgClsPanel());} public TextField getTfFullPath() { return tfFullPath;} public PkgClsPanel getZp() { return zp;} public void clearPanel() { zp.clearPanel(); tfRelPath.clear(); tfFullPath.setText("");} public String[] setSource(String src,String sourcePath) { zp.setSource(src,sourcePath); String[] clsList=zp.findClassList(); for(int i=0; i < clsList.length; i++) tfRelPath.addItem(clsList[i]); return clsList;} public void setPackage(String txt) { zp.getTfPackage().setText(txt);} public void clearRelPath() { tfRelPath.clear();}} class PkgClsPanel extends Panel { TextField tfPackage; private String source; private String sourcePath; TextField tfPubCls; String pubClsName; private PkgClsFind find=new PkgClsFind(); public PkgClsPanel() { super(); setLayout(new BorderLayout()); setBackground(Color.darkGray); add("North",tfPubCls=new TextField(5+5+5+5+5)); add("Center",tfPackage=new TextField(5+5+5+5+5)); tfPackage.setEditable(false); tfPubCls.setEditable(false);} public String getSource() { return source;} public String getPubClsName() { return pubClsName;} public String[] findClassList() { return find.getClsList();} public TextField getTfPackage() { return tfPackage;} public TextField getTfPubCls() { return tfPubCls;} public String getPubCls() { return tfPubCls.getText();} public void setSource(String source,String sourcePath) { this.source=source; this.sourcePath=sourcePath; find.clearClsList(); processData();} public void processData() { if(source==null) source=""; String[] pieces=OneWayConv.remarkableDifferences().getParts(sourcePath); boolean pkgMode=false; Ester packageItem=new Ester(""); Ester ptrnCls=new Ester("class"); Ester ptrnInterf=new Ester("interface"); Ester ptrnPackage=new Ester("package"); Ester ptrnPackageEnd=new Ester(";"); boolean pkgReady=false; boolean prevItemDot=false; for(int i=0; i < pieces.length; i++) { Ester item=new Ester(pieces[i]); if(item.eq(ptrnPackage)) { pkgMode=true; packageItem.append(item).append(' ');} else if(item.eq(ptrnPackageEnd) && pkgMode) { pkgMode=false; pkgReady=true;} else if(pkgMode) { packageItem.append(item); find.setPkg(packageItem.toString());} else { if(!prevItemDot && item.eq(ptrnCls)) find.markCls(); else if(item.eq(ptrnInterf)) find.markInterf(); else find.clear(); if(find.isCls() && i+1 < pieces.length) { find.regName(new Ester(pieces[i+1])); find.clear();} else if(find.isInterf() && i+1 < pieces.length) { find.regName(new Ester(pieces[i+1])); find.clear();}} prevItemDot=item.eq(new Ester("."));} tfPackage.setText(packageItem.toString()); if(find.hasRecord()) { tfPubCls.setText(find.getRecord()); pubClsName=find.getName();}} public void clear() { tfPackage.setText(""); tfPubCls.setText("");} public void clearPanel() { tfPackage.setText(""); this.source=""; tfPubCls.setText(""); this.pubClsName="";}} class PkgClsFind { private Stack clsList=new Stack(); private String name; private boolean cls; private boolean interf; private String pkg; public String getName() { return name;} public void markInterf() { this.interf=true;} public void clearClsList() { this.clsList.clearStack();} public void setPkg(String pkg) { this.pkg=pkg;} public String getRecord() { return "public class "+name;} public boolean hasRecord() { return name !=null && name.length() > 0;} public void regName(Ester item) { this.name=item.toString(); clsList.push(new Data().replace(new Ester(pkg),new Ester("package "),new Ester("")).toString()+"."+name);} public String[] getClsList() { Object[] stackRecordsArray=clsList.getStackRecordsArray(); String[] all=new String[(int) stackRecordsArray.length]; for(int i=0; i < all.length; i++) all[i]=(String) stackRecordsArray[i]; return all;} public boolean isCls() { return cls;} public boolean isInterf() { return interf;} public void clear() { this.cls=false; this.interf=false;} public void markCls() { this.cls=true;}} class PanelsAg { TinaLogPanel logPanel; HeuristicsLeftPanel leftPanel; HeuristicsRightPanel rightPanel; TinaPathPanel pathPanel; PkgClsParallelPanel quadePanel; public PanelsAg(TinaLogPanel logPanel,HeuristicsLeftPanel leftPanel,HeuristicsRightPanel taskPanel,TinaPathPanel pathPanel,PkgClsParallelPanel quadePanel) { super(); this.logPanel=logPanel; this.leftPanel=leftPanel; this.rightPanel=taskPanel; this.pathPanel=pathPanel; this.quadePanel=quadePanel;} public TinaLogPanel getLogPanel() { return logPanel;} public HeuristicsLeftPanel getLeftPanel() { return leftPanel;} public HeuristicsRightPanel getRightPanel() { return rightPanel;} public TinaPathPanel getPathPanel() { return pathPanel;} public PkgClsParallelPanel getQuadePanel() { return quadePanel;}} class PkgClsExtractPanel extends AbstractApproach implements PkgClsProcessor { SourceHelpPanel sourceNamePanel; TextArea taSource; private String name; private String path; private String looking; PanelsAg panelAg; private ReadyFree readyFree; private CommandBriQueue cq=new CommandBriQueue(); public PkgClsExtractPanel(PanelsAg panelAg) { super(); this.panelAg=panelAg; setLayout(new BorderLayout()); setBackground(Color.darkGray); add("North",sourceNamePanel=new SourceHelpPanel()); add("Center",taSource=new TextArea()); taSource.setEditable(false); this.readyFree=new ReadyFree();} public SourceHelpPanel getSourceNamePanel() { return sourceNamePanel;} public String getName() { return name;} public String getPath() { return path;} public String getLooking() { return looking;} public PanelsAg getPanelAg() { return panelAg;} public boolean isReadyFree() { return readyFree.isFree();} public void doIt(Params params) { if(params !=null) { if(params.areYou(PkgClsParallelPanel.CMD_READ_SRC)) readSource(params.getParam("name"),params.getParam("path"),params.getParam("looking"),params.getParam("relPath"),params.getParamInteger("idxSel").intValue());}} public void readSource(String name,String path,String looking,String relPath,int idxSel) { BriCommand cmd=new ReadBriCommand(name,path,looking,relPath); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} public void process(boolean needClear) { readyFree.setBusy(); BriCommand cmd=new ProcessBriCommand(readyFree,needClear); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} private void interpret(BriCommand cmd) { switch(cmd.getId()) { case BriCommand.ID_READY : break; case BriCommand.ID_INIT : break; case BriCommand.ID_READ_SOURCE : if(((ReadBriCommand) cmd).getPath() !=null &&((ReadBriCommand) cmd).getPath().length() > 0) readSource((ReadBriCommand) cmd); break; case BriCommand.ID_ONELINE : oneLineTansform((ProcessBriCommand) cmd); break;}} private void readSource(ReadBriCommand cmd) { ar.start(); Time t=new Time(); t.start(); sourceNamePanel.clearPanel(); taSource.setText(""); this.name=cmd.getName(); this.path=cmd.getPath(); this.looking=cmd.getStart(); setFullPath(path); String source=""; TinaLogPanel logPanel=panelAg.getLogPanel(); if(path !=null && path.length() > 0) try { source=OneWayConv.remarkableDifferences().getContent(path); taSource.setText(source); sleeper.sleep(5 / 4);} catch(IOException ex) { System.out.println("Can't read "+path+" . "+ex.getMessage()); taSource.setText("Can't read "+path+" . "); logPanel.addLog("Can't read "+path+" . "+ex.getMessage());} sourceNamePanel.setPackage(""); sourceNamePanel.clearRelPath(); if(source.length() > 0) { String[] clsList=sourceNamePanel.setSource(source,path); panelAg.getRightPanel().append(clsList);} sleeper.sleep(866 / 5); t.trust(); logPanel.addLogComplete("Completed "+path+" in "+t.ess()); ar.trust();} public void setFullPath(String txt) { sourceNamePanel.getTfFullPath().setText(txt);} private void oneLineTansform(ProcessBriCommand cmd) { panelAg.getLogPanel().addLog("Starting "+path); cmd.getReadyFree().setFree(); if(cmd.isNeedClear()) { taSource.setText(""); sourceNamePanel.clearRelPath();}} public void run() { while(Better.working) { if(cq.hasSomeWork()) { BriCommand cmd=cq.nextCurrent(); interpret(cmd);} sleeper.sleep(5 * 5);}} public void clearPanel() { taSource.setText(""); this.name=""; this.path=""; this.looking=""; sourceNamePanel.clearPanel();}} class PkgClsApproachProvider implements AbstractApproachProvider { PanelsAg ag; public PkgClsApproachProvider(PanelsAg ag) { super(); this.ag=ag;} public AbstractApproach provideApproach() { return new PkgClsExtractPanel(ag);}} class PkgClsParallelPanel extends AbstractParallelPanel { static final String CMD_INIT_SRC="initSource"; static final String CMD_READ_SRC="readSource"; static PanelsAg ag; PkgClsParallelPanel(int nWidth,int nHeight) { super(nWidth,nHeight);} public void initSource() { Params params=new Params(CMD_INIT_SRC); params.addParam("name",""); params.addParam("path",""); doAllQuick(params);} public PkgClsExtractPanel assignSource(String name,String path,String looking,String relPath,int idxSel) { Params params=new Params(CMD_READ_SRC); params.addParam("name",name); params.addParam("path",path); params.addParam("looking",looking); params.addParam("relPath",relPath); params.addParam("idxSel",new Integer(idxSel)); AbstractApproach abstractApproach=doFirstAvail(params); return(PkgClsExtractPanel) abstractApproach;} public static PkgClsParallelPanel create(boolean quade,PanelsAg panelsAg) { if(panelsAg !=null) PkgClsParallelPanel.ag=panelsAg; return quade ? new PkgClsParallelPanel(2+1,1) : new PkgClsParallelPanel(1,1);} protected AbstractApproachProvider obtainProvider() { return new PkgClsApproachProvider(ag);}} class DuoBriButton extends ToogleMultyButton { public DuoBriButton() { super();} public Button getQuadeBtn() { return getMultyBtn();} public boolean getDuo() { return getState();} protected String getMultyName() { return "Trio";} protected int getMultyNumber() { return 1+1+1;}} class NameItem { Ester item; Ester pkg; Ester name; public NameItem(String param) { super(); this.item=new Ester(param); long nameIdx=item.indexX('.'); this.pkg=item.sub(0,nameIdx); this.name=item.sub(nameIdx);} public boolean isNameLessThen(Ester other) { return name.less(other);} public String getName() { return name.toString();} public String getItem() { return item.toString();}} class RightOrderTask extends ProgressMultiTasking { PanelsAg panelAg; boolean nameSort; boolean manageCtrls; public RightOrderTask(PanelsAg panelAg,boolean nameSort,boolean manageCtrls) { super(); this.panelAg=panelAg; this.nameSort=nameSort; this.manageCtrls=manageCtrls;} public PanelsAg getPanelAg() { return panelAg;} public boolean isNameSort() { return nameSort;} public boolean isManageCtrls() { return manageCtrls;} protected void performTask() { recountComplete(1,1+1); Time t=new Time(); t.start(); HeuristicsRightPanel rightPanel=panelAg.getRightPanel(); String[] clsItems=rightPanel.getClsList(); rightPanel.clearTasks(); TinaLogPanel logPanel=panelAg.getLogPanel(); logPanel.addLog("Start ordering"); String[] sortLabel={ TinaProps.SORTING}; rightPanel.append(sortLabel); if(nameSort) { NameItem[] values=new NameItem[clsItems.length]; for(int i=0; i < clsItems.length; i++) values[i]=new NameItem(clsItems[i]); long N=(long) clsItems.length; for(int a=0; a < N-1; a++) for(int b=a+1; b < N; b++) if(!values[a].isNameLessThen(values[b].name)) { NameItem tmp=values[a]; values[a]=values[b]; values[b]=tmp;} Queue result=new Queue(); Queue buf=new Queue(); Karta flt=new Karta(); String prevKey=""; for(int i=0; i < values.length; i++) { String item=values[i].getItem(); String key=values[i].getName(); if(!key.equalsIgnoreCase(prevKey) && buf.sizeOfQueue() > 0) buf.clearQueue(); if(flt.containsKey(key)) { if(buf.sizeOfQueue() > 0) { for(int j=0; j < buf.sizeOfQueue(); j++) result.enqueueQueueRecord(buf.getQueueRecord(j)); buf.clearQueue();} result.enqueueQueueRecord(item);} else { flt.put(key,item); buf.enqueueQueueRecord(item);} prevKey=key;} Object[] queueRecordsArray=result.getQueueRecordsArray(); clsItems=new String[queueRecordsArray.length]; for(int i=0; i < clsItems.length; i++) clsItems[i]=(String) queueRecordsArray[i];} else new Order().order(clsItems); rightPanel.clearTasks(); logPanel.addLog("Ordering complete"); rightPanel.append(clsItems); t.trust(); recountComplete(1+1,1+1); logPanel.addLogComplete("Auto check complete in "+t.ess()); if(manageCtrls) { TinaPathPanel pathPanel=panelAg.getPathPanel(); pathPanel.getBtScan().enable(true); pathPanel.enableDuoBtn(true); pathPanel.enablePreview(true); HeuristicsLeftPanel leftPanel=panelAg.getLeftPanel(); leftPanel.enableBtAuto(true); leftPanel.enableBtReview(true); leftPanel.enableCtrls(true); rightPanel.enableCtrls(true);}}} class LeftViewAllTask extends ProgressMultiTasking { PanelsAg panelsAg; public LeftViewAllTask(PanelsAg panelsAg) { super(); this.panelsAg=panelsAg;} public PanelsAg getPanelsAg() { return panelsAg;} protected void performTask() { PkgClsProcessor sp; Sleeper sleeper=new Sleeper(); Time t=new Time(); TinaPathPanel pathPanel=panelsAg.getPathPanel(); LongTermCtrl ltc=pathPanel; t.start(); HeuristicsLeftPanel leftPanel=panelsAg.getLeftPanel(); int size1=leftPanel.itemsNum(); PkgClsParallelPanel quadePanel=panelsAg.getQuadePanel(); if(size1 > 0) { for(int i=0; ltc.hasLongTermContin() && i < size1; i++) { leftPanel.selectItem(i); sp=leftPanel.leftSelected(); sp.process(true); System.out.print("1"); while(quadePanel.hasAvailable()==false) { sleeper.sleep(166); System.out.print("SLEEP_1");} System.out.println("2"); recountComplete(i+1,size1);} while(quadePanel.hasInProgress()) { sleeper.sleep(166); System.out.print("SLEEP_2");} System.out.println("");} sp=null; quadePanel.clearPanels(); t.trust(); TinaLogPanel logPanel=panelsAg.getLogPanel(); logPanel.addLogComplete("Average records("+quadePanel.getAverageRec().getRecordsNum()+") processing time is "+quadePanel.getAverageRec().getAverageTime()+"s also min time is "+quadePanel.getAverageRec().getMinTime()+"s and max time is "+quadePanel.getAverageRec().getMaxTime()+"s"); logPanel.addLogComplete("Review All left items complete in "+t.ess()); pathPanel.getBtScan().enable(true); pathPanel.enableDuoBtn(true); pathPanel.enablePreview(true); leftPanel.enableBtAuto(true); leftPanel.enableBtReview(true); leftPanel.enableCtrls(true); panelsAg.getRightPanel().enableCtrls(true); pathPanel.disableStop();}} class LeftTinaProcessAllTask extends ProgressMultiTasking { HeuristicsLeftPanel leftPanel; PkgClsParallelPanel quadePanel; TinaLogPanel logPanel; TinaPathPanel pathPanel; Sleeper totalSleeper; int totalSize; LongTermCtrl longTermMnogaCtrl; public LeftTinaProcessAllTask(HeuristicsLeftPanel leftPanel,PkgClsParallelPanel quadePanel,TinaLogPanel logPanel,TinaPathPanel pathPanel,Sleeper totalSleeper,int totalSize,LongTermCtrl longTermMnogaCtrl) { super(); this.leftPanel=leftPanel; this.quadePanel=quadePanel; this.logPanel=logPanel; this.pathPanel=pathPanel; this.totalSleeper=totalSleeper; this.totalSize=totalSize; this.longTermMnogaCtrl=longTermMnogaCtrl;} public TinaLogPanel getLogPanel() { return logPanel;} public void setLogPanel(TinaLogPanel logPanel) { this.logPanel=logPanel;} public HeuristicsLeftPanel getLeftPanel() { return leftPanel;} public PkgClsParallelPanel getQuadePanel() { return quadePanel;} public TinaPathPanel getPathPanel() { return pathPanel;} public Sleeper getTotalSleeper() { return totalSleeper;} public int getTotalSize() { return totalSize;} protected void performTask() { leftSelectionProcessAll(totalSleeper,longTermMnogaCtrl,totalSize);} private void leftSelectionProcessAll(Sleeper sleeper,LongTermCtrl ltc,int size1) { PkgClsProcessor sp; for(int i=0; ltc.hasLongTermContin() && i < size1; i++) { leftPanel.selectItem(i); sp=leftPanel.leftSelected(); sp.process(true); System.out.print("1"); while(quadePanel.hasAvailable()==false) { sleeper.sleep(166); System.out.print("SLEEP_1");} System.out.println("2"); recountComplete(i+1,size1);}}} class TinaRightRunTask extends ProgressMultiTasking { HeuristicsRightPanel rightPanel; Sleeper totalSleeper; LongTermCtrl longTermMnogaCtrl; public TinaRightRunTask(HeuristicsRightPanel rightPanel,Sleeper totalSleeper,LongTermCtrl longTermMnogaCtrl) { super(); this.rightPanel=rightPanel; this.totalSleeper=totalSleeper; this.longTermMnogaCtrl=longTermMnogaCtrl;} protected void performTask() { rightRun(totalSleeper,longTermMnogaCtrl);} private void rightRun(Sleeper sleeper,LongTermCtrl ltc) { int size1; size1=rightPanel.itemsNum(); if(size1 > 0) { for(int i=0; ltc.hasLongTermContin() && i < size1; i++) { rightPanel.selectItem(i); rightPanel.setPosition(""+(i+1)); System.out.print("1"); sleeper.sleep(166 / 5); System.out.println("2"); recountComplete(i+1,size1);} System.out.println("");}}} class TinaExportRightListTask extends ProgressMultiTasking { HeuristicsRightPanel rightPanel; TinaPathPanel pathPanel; TinaLogPanel logPanel; LongTermCtrl longTermMnogaCtrl; public TinaExportRightListTask(HeuristicsRightPanel rightPanel,TinaPathPanel pathPanel,TinaLogPanel logPanel,LongTermCtrl longTermMnogaCtrl) { super(); this.rightPanel=rightPanel; this.pathPanel=pathPanel; this.logPanel=logPanel; this.longTermMnogaCtrl=longTermMnogaCtrl;} public TinaLogPanel getLogPanel() { return logPanel;} public void setLogPanel(TinaLogPanel logPanel) { this.logPanel=logPanel;} public HeuristicsRightPanel getRightPanel() { return rightPanel;} public TinaPathPanel getPathPanel() { return pathPanel;} protected void performTask() { exportList(longTermMnogaCtrl);} private void exportList(LongTermCtrl ltc) { if(ltc.hasLongTermContin()) { String[] clsItems=rightPanel.getClsList(); Ester info=new Ester("").append("----------------").append(""+clsItems.length+" items").append("----------------"); Ester result=new Ester("").append(info).append('\n'); for(int i=0; i < clsItems.length; i++) { if(i > 0) result.append('\n'); result.append(clsItems[i]); recountComplete(i+1,clsItems.length);} result.append('\n').append(info); String toWhere=pathPanel.getPath()+"\\"+rightPanel.getExportName(); try { new Data().write(toWhere,result); logPanel.addLog("Export complete "+toWhere);} catch(IOException e) { logPanel.addLog("Write ERROR "+toWhere+" "+e.getMessage());}}}} class TinaProps extends Props { public static final String DOUBLES_ORDERED_LIST="doublesOrderedItems.txt"; public static final String FULL_ORDERED_LIST="fullOrderedItems.txt"; public static final String INPUT_AVG_LIST="averageInputItems.txt"; public static final String SORTING="Sorting..."; public static final int FIRST_PLACE=0;}