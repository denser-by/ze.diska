package mydev.air; import java.util.Arrays; import mydev.about.CanvasAdapter; import mydev.about.Colorfull; import mydev.about.PaintAdapter; import mydev.about.Point2D; import mydev.about.Point3D; import mydev.about.Pyramid; import mydev.about.Triangle3D; import mydev.about.Vector3; public class CraftPyramid extends Pyramid implements CraftShape { private CraftVertEx cubeA; private CraftVertEx cubeB; private CraftVertEx cubeC; private CraftVertEx cubeD; private CustomTriangle2D[] projection; private static FillingType fillingType=FillingType.FT_LINES; public CraftPyramid(CraftVertEx aItem,CraftVertEx bItem,CraftVertEx cItem,CraftVertEx dItem,int triColor) { super(new Triangle3D(aItem.getCenter(),bItem.getCenter(),cItem.getCenter(),triColor,fillingType.isSolid()),dItem.getCenter(),triColor,fillingType.isSolid()); this.cubeA=aItem; this.cubeB=bItem; this.cubeC=cItem; this.cubeD=dItem;} public ProjPyramidXY pyrProjXY(Vector3 xyShift) { update3D(); ProjPyramidXY pyrProj=new ProjPyramidXY(A(),"A",B(),"B",C(),"C",D(),"D",CraftProps.lineColorVirtualProjection,CraftProps.textColorVirtualCoords,xyShift); return pyrProj;} public ProjPyramidYZ pyrProjYZ(Vector3 yzShift) { update3D(); ProjPyramidYZ pyrProj=new ProjPyramidYZ(A(),"A",B(),"B",C(),"C",D(),"D",CraftProps.lineColorVirtualProjection,CraftProps.textColorVirtualCoords,yzShift); return pyrProj;} public ProjPyramidXZ pyrProjXZ(Vector3 xzShift) { update3D(); ProjPyramidXZ pyrProj=new ProjPyramidXZ(A(),"A",B(),"B",C(),"C",D(),"D",CraftProps.lineColorVirtualProjection,CraftProps.textColorVirtualCoords,xzShift); return pyrProj;} public void updatePyrProjXY(Point2D p1,Point2D p2,Point2D p3,Point2D p4,Vector3 relocVect,Point2D p1234) { updatePyrCommon(p1,p2,p3,p4,relocVect,p1234);} public void updatePyrProjYZ(Point2D p1,Point2D p2,Point2D p3,Point2D p4,Vector3 relocVect2,Point2D p1234) { Vector3 relocVect=Vector3.shiftYZ(relocVect2.getDx(),relocVect2.getDy()); updatePyrCommon(p1,p2,p3,p4,relocVect,p1234);} public void updatePyrProjXZ(Point2D p1,Point2D p2,Point2D p3,Point2D p4,Vector3 relocVect2,Point2D p1234) { Vector3 relocVect=Vector3.shiftXZ(relocVect2.getDx(),relocVect2.getDy()); updatePyrCommon(p1,p2,p3,p4,relocVect,p1234);} private void updatePyrCommon(Point2D p1,Point2D p2,Point2D p3,Point2D p4,Vector3 relocVect,Point2D p1234) { Point3D A=cubeA.getCenter(); Point3D B=cubeB.getCenter(); Point3D C=cubeC.getCenter(); Point3D D=cubeD.getCenter(); if(p1234.equals(p1)) A.shift(relocVect); else if(p1234.equals(p2)) B.shift(relocVect); else if(p1234.equals(p3)) C.shift(relocVect); else if(p1234.equals(p4)) D.shift(relocVect); update(A,B,C,D);} private void update3D() { update(cubeA.getCenter(),cubeB.getCenter(),cubeC.getCenter(),cubeD.getCenter());} private void update() { Point2D dVert=cubeD.getFrontBackViewCenter(); Point2D aVert=cubeA.getFrontBackViewCenter(); Point2D bVert=cubeB.getFrontBackViewCenter(); Point2D cVert=cubeC.getFrontBackViewCenter(); if(projection==null) projection=new CustomTriangle2D[1+1+1+1]; projection[0]=new CustomTriangle2D(aVert,bVert,cVert,CraftProps.lineColorVirtualSpace.getRGB(),full); projection[0].setFillingType(fillingType); projection[1]=new CustomTriangle2D(dVert,bVert,cVert,CraftProps.lineColorVirtualSpace.getRGB(),full); projection[1].setFillingType(fillingType); projection[1+1]=new CustomTriangle2D(aVert,dVert,cVert,CraftProps.lineColorVirtualSpace.getRGB(),full); projection[1+1].setFillingType(fillingType); projection[1+1+1]=new CustomTriangle2D(aVert,bVert,dVert,CraftProps.lineColorVirtualSpace.getRGB(),full); projection[1+1+1].setFillingType(fillingType);} public void toPen(CanvasAdapter ics,PaintAdapter pn) { update(); toPenProj3D(ics,pn);} public void toPenProj3D(CanvasAdapter ics,PaintAdapter pn) { if(projection !=null) { if(fillingType.isLines() || fillingType.isFrame() || fillingType.isQuery()) for(int i=0; i < projection.length; i++) projection[i].toPenConture(ics,pn.select(projection[i])); else if(fillingType.isSolid()) for(int i=0; i < projection.length; i++) projection[i].toPenSolid(ics,pn.select(projection[i]));}} public Colorfull setFillingType(FillingType fillingType) { CraftPyramid.fillingType=fillingType; if(projection !=null) for(int i=0; i < projection.length; i++) projection[i].setFillingType(fillingType); return this;} public FillingType getFillingType() { return fillingType;} public String toString() { return "CraftPyramid [cubeA="+cubeA+", cubeB="+cubeB+", cubeC="+cubeC+", cubeD="+cubeD+", projection="+Arrays.toString(projection)+"]";}}