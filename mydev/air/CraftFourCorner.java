package mydev.air; import mydev.about.Canvas; import mydev.about.Colorfull; import mydev.about.FourCornersConture3D; import mydev.about.Paint; import mydev.about.Point2D; import mydev.about.Point3D; import mydev.about.Vector3; public class CraftFourCorner extends FourCornersConture3D implements CraftShape { private CraftVertEx cubeA; private CraftVertEx cubeB; private CraftVertEx cubeC; private CraftVertEx cubeD; private CustomFourCornersConture2D projection; private static FillingType fillingType=FillingType.FT_LINES; public CraftFourCorner(CraftVertEx aItem,CraftVertEx bItem,CraftVertEx cItem,CraftVertEx dItem,int fourColor) { super(aItem.getCenter(),bItem.getCenter(),cItem.getCenter(),dItem.getCenter(),fourColor,fillingType.isSolid()); this.cubeA=aItem; this.cubeB=bItem; this.cubeC=cItem; this.cubeD=dItem;} public ProjContureFourXY fourProjXY(Vector3 xyShift) { update3D(); ProjContureFourXY fourProj=new ProjContureFourXY(A(),cubeA.getName(),B(),cubeB.getName(),C(),cubeC.getName(),D(),cubeD.getName(),CraftProps.lineColorVirtualProjection,CraftProps.textColorVirtualCoords,xyShift); return fourProj;} public ProjContureFourYZ fourProjYZ(Vector3 yzShift) { update3D(); ProjContureFourYZ fourProj=new ProjContureFourYZ(A(),cubeA.getName(),B(),cubeB.getName(),C(),cubeC.getName(),D(),cubeD.getName(),CraftProps.lineColorVirtualProjection,CraftProps.textColorVirtualCoords,yzShift); return fourProj;} public ProjContureFourXZ fourProjXZ(Vector3 xzShift) { update3D(); ProjContureFourXZ fourProj=new ProjContureFourXZ(A(),cubeA.getName(),B(),cubeB.getName(),C(),cubeC.getName(),D(),cubeD.getName(),CraftProps.lineColorVirtualProjection,CraftProps.textColorVirtualCoords,xzShift); return fourProj;} public void updateFourProjXY(Point2D p1,Point2D p2,Point2D p3,Point2D p4,Vector3 relocVect,Point2D p1234) { updateFourCommon(p1,p2,p3,p4,relocVect,p1234);} public void updateFourProjYZ(Point2D p1,Point2D p2,Point2D p3,Point2D p4,Vector3 relocVect2,Point2D p1234) { Vector3 relocVect=Vector3.shiftYZ(relocVect2.getDx(),relocVect2.getDy()); updateFourCommon(p1,p2,p3,p4,relocVect,p1234);} public void updateFourProjXZ(Point2D p1,Point2D p2,Point2D p3,Point2D p4,Vector3 relocVect2,Point2D p1234) { Vector3 relocVect=Vector3.shiftXZ(relocVect2.getDx(),relocVect2.getDy()); updateFourCommon(p1,p2,p3,p4,relocVect,p1234);} private void updateFourCommon(Point2D p1,Point2D p2,Point2D p3,Point2D p4,Vector3 relocVect,Point2D p1234) { Point3D A=cubeA.getCenter(); Point3D B=cubeB.getCenter(); Point3D C=cubeC.getCenter(); Point3D D=cubeD.getCenter(); if(p1234.equals(p1)) A.shift(relocVect); else if(p1234.equals(p2)) B.shift(relocVect); else if(p1234.equals(p3)) C.shift(relocVect); else if(p1234.equals(p4)) D.shift(relocVect); update(A,B,C,D);} private void update3D() { update(cubeA.getCenter(),cubeB.getCenter(),cubeC.getCenter(),cubeD.getCenter());} private void update() { Point2D aVert=cubeA.getFrontBackViewCenter(); Point2D bVert=cubeB.getFrontBackViewCenter(); Point2D cVert=cubeC.getFrontBackViewCenter(); Point2D dVert=cubeD.getFrontBackViewCenter(); projection=new CustomFourCornersConture2D(aVert,bVert,cVert,dVert,CraftProps.lineColorVirtualSpace.getRGB(),full); projection.setFillingType(fillingType);} public void toPen(Canvas ics,Paint pn) { update(); toPenProj3D(ics,pn);} public void toPenProj3D(Canvas ics,Paint pn) { if(fillingType.isLines()) projection.toPenConture(ics,pn.select(projection)); if(fillingType.isFrame()) projection.toPenConture(ics,pn.select(projection)); else if(fillingType.isQuery()) projection.toPenConture(ics,pn.select(projection)); else if(fillingType.isSolid()) projection.toPenSolid(ics,pn.select(projection));} public Colorfull setFillingType(FillingType fillingType) { CraftFourCorner.fillingType=fillingType; if(projection !=null) projection.setFillingType(fillingType); return this;} public FillingType getFillingType() { return fillingType;} public String toString() { return "CraftFourCorner [cubeA="+cubeA+", cubeB="+cubeB+", cubeC="+cubeC+", cubeD="+cubeD+", projection="+projection+"]";}}