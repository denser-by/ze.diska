package mydev.air; import mydev.vutils.Data; import mydev.vutils.Ester; import mydev.vutils.Queue; public abstract class ComboSeqBox { public abstract String[] getAllSequence(); public abstract String getName(); protected String[] extractSeqArray(Queue queue) { Object[] queueRecordsArray=queue.getQueueRecordsArray(); String[] result=new String[queueRecordsArray.length]; for(int i=0; i < queueRecordsArray.length; i++) result[i]=(String) queueRecordsArray[i]; return result;}} class AirFormation extends ComboSeqBox { public static final AirFormation AF_CHAIN=new AirFormation("Chain"); public static final AirFormation AF_ZUB=new AirFormation("Tooth"); public static final AirFormation AF_LINE=new AirFormation("Line"); private String name; public AirFormation(String name) { this.name=name;} public boolean isChain() { return isChain(name);} public boolean isTri() { return isTri(name);} public boolean isLine() { return isLine(name);} public boolean isChain(String item) { return item !=null && item.equalsIgnoreCase(AF_CHAIN.getName());} public boolean isTri(String item) { return item !=null && item.equalsIgnoreCase(AF_ZUB.getName());} public boolean isLine(String item) { return item !=null && item.equalsIgnoreCase(AF_LINE.getName());} public String getName() { return name;} public String[] getAllSequence() { Queue queue=new Queue(); queue.enqueueQueueRecord(AirFormation.AF_CHAIN.getName()); queue.enqueueQueueRecord(AirFormation.AF_ZUB.getName()); queue.enqueueQueueRecord(AirFormation.AF_LINE.getName()); return extractSeqArray(queue);} public String toString() { return "AirFormation [name="+name+"]";}} class PathType extends ComboSeqBox { public static final PathType PT_NSWE=new PathType("N-S-W-E"); public static final PathType PT_SPIRAL=new PathType("Spiral"); public static final PathType PT_RING=new PathType("Ring"); public static final PathType PT_SPHERE=new PathType("Sphere"); private String name; public PathType(String name) { this.name=name;} public boolean isRing() { return isRing(name);} public boolean isSpiral() { return isSpiral(name);} public boolean isNorthSouthWestEast() { return isNorthSouthWestEast(name);} public boolean isSphere() { return isSphere(name);} public boolean isRing(String item) { return item !=null && item.equalsIgnoreCase(PT_RING.getName());} public boolean isSpiral(String item) { return item !=null && item.equalsIgnoreCase(PT_SPIRAL.getName());} public boolean isNorthSouthWestEast(String item) { return item !=null && item.equalsIgnoreCase(PT_NSWE.getName());} public boolean isSphere(String item) { return item !=null && item.equalsIgnoreCase(PT_SPHERE.getName());} public String getName() { return name;} public String toString() { return "PathType [name="+name+"]";} public String[] getAllSequence() { Queue queue=new Queue(); queue.enqueueQueueRecord(PathType.PT_SPIRAL.getName()); queue.enqueueQueueRecord(PathType.PT_RING.getName()); queue.enqueueQueueRecord(PathType.PT_SPHERE.getName()); queue.enqueueQueueRecord(PathType.PT_NSWE.getName()); return extractSeqArray(queue);}} class CasualType extends ComboSeqBox { public static final CasualType CT_POINTS=new CasualType("Points"); public static final CasualType CT_LINES=new CasualType("Lines"); public static final CasualType CT_TRIANGLES=new CasualType("Triangles"); public static final CasualType CT_FOURCORNERS=new CasualType("Four-Corners"); public static final CasualType CT_PYRAMIDES=new CasualType("Pyramides"); public static final CasualType CT_CUBES=new CasualType("Cubes"); private String name; public CasualType(String name) { this.name=name;} public boolean isLines() { return isLines(name);} public boolean isLines(String item) { return item !=null && item.equalsIgnoreCase(CT_LINES.getName());} public boolean isPoints() { return isPoints(name);} public boolean isPoints(String item) { return item !=null && item.equalsIgnoreCase(CT_POINTS.getName());} public boolean isTriangles() { return isTriangles(name);} public boolean isTriangles(String item) { return item !=null && item.equalsIgnoreCase(CT_TRIANGLES.getName());} public boolean isFourCorners() { return isFourCorners(name);} public boolean isFourCorners(String item) { return item !=null && item.equalsIgnoreCase(CT_FOURCORNERS.getName());} public boolean isPyramides() { return isPyramides(name);} public boolean isPyramides(String item) { return item !=null && item.equalsIgnoreCase(CT_PYRAMIDES.getName());} public boolean isCubes() { return isCubes(name);} public boolean isCubes(String item) { return item !=null && item.equalsIgnoreCase(CT_CUBES.getName());} public String getName() { return name;} public String[] getAllSequence() { Queue queue=new Queue(); queue.enqueueQueueRecord(CasualType.CT_POINTS.getName()); queue.enqueueQueueRecord(CasualType.CT_LINES.getName()); queue.enqueueQueueRecord(CasualType.CT_TRIANGLES.getName()); queue.enqueueQueueRecord(CasualType.CT_FOURCORNERS.getName()); queue.enqueueQueueRecord(CasualType.CT_PYRAMIDES.getName()); queue.enqueueQueueRecord(CasualType.CT_CUBES.getName()); return extractSeqArray(queue);} public String toString() { return "CasualType [name="+name+"]";}} class MotionVelocity extends ComboSeqBox { public static final MotionVelocity veStop=new MotionVelocity("Stop Speed"); public static final MotionVelocity veSlow=new MotionVelocity("Slow Speed",1); public static final MotionVelocity veNorm=new MotionVelocity("Norm Speed",1+1); public static final MotionVelocity veFast=new MotionVelocity("Fast Speed",1+1+1); public static final MotionVelocity veFaster=new MotionVelocity("Faster Speed",1+1+1+1); public static final MotionVelocity veFastest=new MotionVelocity("Fastest Speed",1+1+1+1+1); public static final short minVelocity=veStop.getStepsMult(); public static final short maxVelocity=veFastest.getStepsMult(); public static final MotionVelocity startVelocity=veNorm; private String name; private short stepsMult; MotionVelocity(String name) { super(); this.name=name;} MotionVelocity(String name,int steps) { super(); this.name=name; this.stepsMult=(short) steps;} public String getName() { return name;} public static MotionVelocity recover(String curSelSpeed) { String speedNum=new Data().replace(new Ester(curSelSpeed),new Ester(" automatique"),new Ester("")).toString(); int num=Integer.parseInt(speedNum); switch(num) { case 0 : return veStop; case 1 : return veSlow; case 2 : return veNorm; case 3 : return veFast; case 4 : return veFaster; case 5 : return veFastest;} return null;} public short getStepsMult() { return stepsMult;} public void accelerating() { if(stepsMult < maxVelocity) stepsMult++;} public void breaking() { if(stepsMult > minVelocity) stepsMult--;} public static MotionVelocity getStartVelocity() { return MotionVelocity.veNorm;} public String repr() { return ""+stepsMult+" automatique";} public String toString() { return "MotionVelocity [name="+name+", stepsMult="+stepsMult+"]";} public boolean isSlower(MotionVelocity speed) { return stepsMult < speed.stepsMult;} public boolean isGreater(MotionVelocity speed) { return stepsMult > speed.stepsMult;} public void cruisingAuto(MotionVelocity newSpeed) { cruising(newSpeed,this);} private void cruising(MotionVelocity newSpeed,MotionVelocity speed) { if(newSpeed.isGreater(speed)) while(newSpeed.isGreater(speed)) speed.accelerating(); else if(newSpeed.isSlower(speed)) while(newSpeed.isSlower(speed)) speed.breaking();} public String[] getAllSequence() { Queue queue=new Queue(); queue.enqueueQueueRecord(MotionVelocity.veStop.getName()); queue.enqueueQueueRecord(MotionVelocity.veSlow.getName()); queue.enqueueQueueRecord(MotionVelocity.veNorm.getName()); queue.enqueueQueueRecord(MotionVelocity.veFast.getName()); queue.enqueueQueueRecord(MotionVelocity.veFaster.getName()); queue.enqueueQueueRecord(MotionVelocity.veFastest.getName()); return extractSeqArray(queue);}} class FillingType extends ComboSeqBox { public static final FillingType FT_SOLID=new FillingType("Solid"); public static final FillingType FT_LINES=new FillingType("Lines"); public static final FillingType FT_REGENERATION=new FillingType("Cells"); public static final FillingType FT_FRAME=new FillingType("Ribs"); private String name; private FillingType(String name) { super(); this.name=name;} public boolean isQuery() { return isQuery(name);} public boolean isSolid() { return isSolid(name);} public boolean isFrame() { return isFrame(name);} public boolean isLines() { return isLines(name);} public static FillingType getType(String curSelFilling) { if(FT_SOLID.isSolid(curSelFilling)) return FT_SOLID; else if(FT_LINES.isLines(curSelFilling)) return FT_LINES; else if(FT_FRAME.isFrame(curSelFilling)) return FT_FRAME; return FT_REGENERATION;} public boolean isSolid(String item) { return item !=null && item.equalsIgnoreCase(FT_SOLID.name);} public boolean isLines(String item) { return item !=null && item.equalsIgnoreCase(FT_LINES.name);} public boolean isFrame(String item) { return item !=null && item.equalsIgnoreCase(FT_FRAME.name);} public boolean isQuery(String item) { return item !=null && item.equalsIgnoreCase(FT_REGENERATION.name);} public String getName() { return name;} public String[] getAllSequence() { Queue queue=new Queue(); queue.enqueueQueueRecord(FillingType.FT_SOLID.getName()); queue.enqueueQueueRecord(FillingType.FT_LINES.getName()); queue.enqueueQueueRecord(FillingType.FT_REGENERATION.getName()); queue.enqueueQueueRecord(FillingType.FT_FRAME.getName()); return extractSeqArray(queue);} public String toString() { return "FillingType [name="+name+"]";}}