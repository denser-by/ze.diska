package mydev.air; import mydev.about.CanvasAdapter; import mydev.about.Colorfull; import mydev.about.PaintAdapter; import mydev.about.Point2D; import mydev.about.Point3D; import mydev.about.Triangle3D; import mydev.about.Vector3; public class CraftTriangle extends Triangle3D implements CraftShape { private CraftVertEx cubeA; private CraftVertEx cubeB; private CraftVertEx cubeC; private CustomTriangle2D projection; private static FillingType fillingType=FillingType.FT_LINES; public CraftTriangle(CraftVertEx aItem,CraftVertEx bItem,CraftVertEx cItem,int triColor) { super(aItem.getCenter(),bItem.getCenter(),cItem.getCenter(),triColor,fillingType.isSolid()); this.cubeA=aItem; this.cubeB=bItem; this.cubeC=cItem;} public ProjTriangleXY triangleProjXY(Vector3 xyShift) { update3D(); ProjTriangleXY triProj=new ProjTriangleXY(A(),cubeA.getName(),B(),cubeB.getName(),C(),cubeC.getName(),CraftProps.lineColorVirtualProjection,CraftProps.textColorVirtualCoords,xyShift); return triProj;} public ProjTriangleYZ triangleProjYZ(Vector3 yzShift) { update3D(); ProjTriangleYZ triProj=new ProjTriangleYZ(A(),cubeA.getName(),B(),cubeB.getName(),C(),cubeC.getName(),CraftProps.lineColorVirtualProjection,CraftProps.textColorVirtualCoords,yzShift); return triProj;} public ProjTriangleXZ triangleProjXZ(Vector3 xzShift) { update3D(); ProjTriangleXZ triProj=new ProjTriangleXZ(A(),cubeA.getName(),B(),cubeB.getName(),C(),cubeC.getName(),CraftProps.lineColorVirtualProjection,CraftProps.textColorVirtualCoords,xzShift); return triProj;} public void updateTriangleProjXY(Point2D p1,Point2D p2,Point2D p3,Vector3 relocVect,Point2D p123) { updateTriCommon(p1,p2,p3,relocVect,p123);} public void updateTriangleProjYZ(Point2D p1,Point2D p2,Point2D p3,Vector3 relocVect2,Point2D p123) { Vector3 relocVect=Vector3.shiftYZ(relocVect2.getDx(),relocVect2.getDy()); updateTriCommon(p1,p2,p3,relocVect,p123);} public void updateTriangleProjXZ(Point2D p1,Point2D p2,Point2D p3,Vector3 relocVect2,Point2D p123) { Vector3 relocVect=Vector3.shiftXZ(relocVect2.getDx(),relocVect2.getDy()); updateTriCommon(p1,p2,p3,relocVect,p123);} private void updateTriCommon(Point2D p1,Point2D p2,Point2D p3,Vector3 relocVect,Point2D p123) { Point3D A=cubeA.getCenter(); Point3D B=cubeB.getCenter(); Point3D C=cubeC.getCenter(); if(p123.equals(p1)) A.shift(relocVect); else if(p123.equals(p2)) B.shift(relocVect); else if(p123.equals(p3)) C.shift(relocVect); update(A,B,C);} private void update3D() { update(cubeA.getCenter(),cubeB.getCenter(),cubeC.getCenter());} private void update() { Point2D aVert=cubeA.getFrontBackViewCenter(); Point2D bVert=cubeB.getFrontBackViewCenter(); Point2D cVert=cubeC.getFrontBackViewCenter(); if(1+1 > 1+1) { projection.getP1().moveTo(aVert); projection.getP2().moveTo(bVert); projection.getP3().moveTo(cVert); projection.setFill(full); projection.setColor(color);} else { projection=new CustomTriangle2D(aVert,bVert,cVert,CraftProps.lineColorVirtualSpace.getRGB(),full); projection.setFillingType(fillingType);}} public void toPen(CanvasAdapter ics,PaintAdapter pn) { update(); toPenProj3D(ics,pn);} public void toPenProj3D(CanvasAdapter ics,PaintAdapter pn) { if(fillingType.isLines()) projection.toPenConture(ics,pn.select(projection)); else if(fillingType.isFrame()) projection.toPenConture(ics,pn.select(projection)); else if(fillingType.isQuery()) projection.toPenConture(ics,pn.select(projection)); else if(fillingType.isSolid()) projection.toPenSolid(ics,pn.select(projection));} public Colorfull setFillingType(FillingType fillingType) { CraftTriangle.fillingType=fillingType; return this;} public FillingType getFillingType() { return fillingType;} public String toString() { return "CraftTriangle [cubeA="+cubeA+", cubeB="+cubeB+", cubeC="+cubeC+", projection="+projection+"]";}}