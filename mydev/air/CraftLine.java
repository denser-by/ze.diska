package mydev.air; import mydev.about.Canvas; import mydev.about.Colorfull; import mydev.about.Line3D; import mydev.about.Paint; import mydev.about.Point2D; import mydev.about.Point3D; import mydev.about.Vector3; public class CraftLine extends Line3D implements CraftShape { private CraftVertEx cubeA; private CraftVertEx cubeB; private CustomLine2D projection; private static FillingType fillingType=FillingType.FT_SOLID; public CraftLine(CraftVertEx aItem,CraftVertEx bItem,int lineColor) { super(aItem.getCenter(),bItem.getCenter(),lineColor); this.cubeA=aItem; this.cubeB=bItem;} public ProjLineXY lineProjXY(Vector3 xyShift) { update3D(); ProjLineXY lineProj=new ProjLineXY(A(),cubeA.getName(),B(),cubeB.getName(),CraftProps.lineColorVirtualProjection,CraftProps.textColorVirtualCoords,xyShift); return lineProj;} public ProjLineYZ lineProjYZ(Vector3 yzShift) { update3D(); ProjLineYZ lineProj=new ProjLineYZ(A(),cubeA.getName(),B(),cubeB.getName(),CraftProps.lineColorVirtualProjection,CraftProps.textColorVirtualCoords,yzShift); return lineProj;} public ProjLineXZ lineProjXZ(Vector3 xzShift) { update3D(); ProjLineXZ lineProj=new ProjLineXZ(A(),cubeA.getName(),B(),cubeB.getName(),CraftProps.lineColorVirtualProjection,CraftProps.textColorVirtualCoords,xzShift); return lineProj;} public void updateLineProjXY(Point2D p1,Point2D p2,Vector3 relocVect,Point2D p1234) { updateLineCommon(p1,p2,relocVect,p1234);} public void updateLineProjYZ(Point2D p1,Point2D p2,Vector3 relocVect2,Point2D p1234) { Vector3 relocVect=Vector3.shiftYZ(relocVect2.getDx(),relocVect2.getDy()); updateLineCommon(p1,p2,relocVect,p1234);} public void updateLineProjXZ(Point2D p1,Point2D p2,Vector3 relocVect2,Point2D p1234) { Vector3 relocVect=Vector3.shiftXZ(relocVect2.getDx(),relocVect2.getDy()); updateLineCommon(p1,p2,relocVect,p1234);} private void updateLineCommon(Point2D p1,Point2D p2,Vector3 relocVect,Point2D p1234) { Point3D A=cubeA.getCenter(); Point3D B=cubeB.getCenter(); if(p1234.equals(p1)) A.shift(relocVect); else if(p1234.equals(p2)) B.shift(relocVect); update(A,B);} private void update3D() { update(cubeA.getCenter(),cubeB.getCenter());} private void update() { Point2D aVert=cubeA.getFrontBackViewCenter(); Point2D bVert=cubeB.getFrontBackViewCenter(); projection=new CustomLine2D(aVert,bVert,CraftProps.lineColorVirtualSpace.getRGB());} public void toPen(Canvas ics,Paint pn) { update(); toPenProj3D(ics,pn);} public void toPenProj3D(Canvas ics,Paint pn) { projection.toPen(ics,pn.select(projection));} public Colorfull setFillingType(FillingType fillingType) { CraftLine.fillingType=FillingType.FT_SOLID; return this;} public FillingType getFillingType() { return fillingType;} public String toString() { return "CraftLine [cubeA="+cubeA+", cubeB="+cubeB+", projection="+projection+"]";}}