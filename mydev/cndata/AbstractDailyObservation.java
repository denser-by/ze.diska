package mydev.cndata; import java.awt.Component; import java.awt.Image; import java.awt.image.DirectColorModel; import java.awt.image.MemoryImageSource; import java.util.Enumeration; import java.util.Hashtable; import mydev.vutils.Queue; public abstract class AbstractDailyObservation { protected int[] colors; protected short[] pix; protected Queue pictures=new Queue(); protected short width; protected short height; protected int idx; protected AbstractDailyObservation() {} public Image getImage(int pictureIdx,Component comp) { short[] picturePixels=getPicturePixels(pictureIdx); int[] data=new int[picturePixels.length]; for(int i=0; i < data.length; i++) data[i]=colors[picturePixels[i]]; Image img1=createImage(width,height,data,comp); return img1;} public int[] getImagePalette(int pictureIdx) { short[] picturePixels=getPicturePixels(pictureIdx); Hashtable palette=new Hashtable(); for(int i=0; i < picturePixels.length; i++) { int c=colors[picturePixels[i]]; palette.put(new Integer(c),""+c);} int[] result=new int[palette.size()]; int idx=0; Enumeration colorKeys=palette.keys(); while(colorKeys.hasMoreElements()) { Integer curColor=(Integer) colorKeys.nextElement(); result[idx++]=curColor.intValue();} return result;} private Image createImage(int width,int height,int[] pix,Component comp) { int bits=32; int redMask=16711680; int greenMask=65280; int blueMask=255; DirectColorModel cm=new DirectColorModel(bits,redMask,greenMask,blueMask); Image image=comp.createImage(new MemoryImageSource(width,height,cm,pix,0,width)); return image;} public int[] getColors() { return colors;} public short[] getPicturePixels(int pictureIdx) { if(pictureIdx >= 0 && pictureIdx < pictures.sizeOfQueue()) return(short[]) pictures.getQueueRecord(pictureIdx); return null;} public long getPicturesNum() { return pictures.sizeOfQueue();} int getHexInt(String hex) { char ch1=hex.charAt(0); char ch2=hex.charAt(1); int result=charVal(ch1) * 16+charVal(ch2); return result;} int charVal(char ch) { switch(ch) { case '0' : return 0; case '1' : return 1; case '2' : return 2; case '3' : return 3; case '4' : return 4; case '5' : return 5; case '6' : return 6; case '7' : return 7; case '8' : return 8; case '9' : return 9; case 'a' : case 'A' : return 10; case 'b' : case 'B' : return 11; case 'c' : case 'C' : return 12; case 'd' : case 'D' : return 13; case 'e' : case 'E' : return 14; case 'f' : case 'F' : return 15;} return-1;} void q16(int ci1,int ci2,int ci3,int ci4,int ci5,int ci6,int ci7,int ci8,int bi1,int bi2,int bi3,int bi4,int bi5,int bi6,int bi7,int bi8) { q8(ci1,ci2,ci3,ci4,ci5,ci6,ci7,ci8); q8(bi1,bi2,bi3,bi4,bi5,bi6,bi7,bi8);} void q8(int ci1,int ci2,int ci3,int ci4,int ci5,int ci6,int ci7,int ci8) { pix[idx++]=(short) ci1; pix[idx++]=(short) ci2; pix[idx++]=(short) ci3; pix[idx++]=(short) ci4; pix[idx++]=(short) ci5; pix[idx++]=(short) ci6; pix[idx++]=(short) ci7; pix[idx++]=(short) ci8;} void q1(int colorIndex) { pix[idx++]=(short) colorIndex;} abstract void q4(String colorHex6); void q48(String ch61,String ch62,String ch63,String ch64,String ch65,String ch66,String ch67,String ch68) { q4(ch61); q4(ch62); q4(ch63); q4(ch64); q4(ch65); q4(ch66); q4(ch67); q4(ch68);} void q410(String ch61,String ch62,String ch63,String ch64,String ch65,String ch66,String ch67,String ch68,String ch69,String ch610) { q4(ch61); q4(ch62); q4(ch63); q4(ch64); q4(ch65); q4(ch66); q4(ch67); q4(ch68); q4(ch69); q4(ch610);} void q412(String ch61,String ch62,String ch63,String ch64,String ch65,String ch66,String ch67,String ch68,String ch69,String ch610,String ch611,String ch612) { q4(ch61); q4(ch62); q4(ch63); q4(ch64); q4(ch65); q4(ch66); q4(ch67); q4(ch68); q4(ch69); q4(ch610); q4(ch611); q4(ch612);} public short getWidth() { return width;} public short getHeight() { return height;} void createPalette() { createPalette1();} abstract void createPalette1(); void createPicture(short width1,short height1) { width=width1; height=height1; createPicture1();} abstract void createPicture1();}