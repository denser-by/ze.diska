package mydev.olin; import java.awt.BorderLayout; import java.awt.Button; import java.awt.Choice; import java.awt.Color; import java.awt.Component; import java.awt.Dimension; import java.awt.Event; import java.awt.FlowLayout; import java.awt.Frame; import java.awt.GridLayout; import java.awt.Label; import java.awt.LayoutManager; import java.awt.Panel; import java.awt.Point; import java.awt.Scrollbar; import java.awt.TextArea; import java.awt.TextField; import java.io.File; import java.io.IOException; import mydev.aaa.Sleeper; import mydev.about.CanvasAdapter; import mydev.about.PaintAdapter; import mydev.anim.ColorsLogo; import mydev.bbb.Enter2; import mydev.bbb.Location; import mydev.uix.AbstractApproach; import mydev.uix.AbstractApproachProvider; import mydev.uix.AbstractParallelPanel; import mydev.uix.AmountPanel; import mydev.uix.AveragePanel; import mydev.uix.Better; import mydev.uix.ChoiceFactory; import mydev.uix.CommonCanvas; import mydev.uix.CommonDataArrayPanel; import mydev.uix.CommonLogPanel; import mydev.uix.CommonLogo; import mydev.uix.CommonSouthPanel; import mydev.uix.ControlsPanel; import mydev.uix.HeaderPathPanel; import mydev.uix.IgnorePanel; import mydev.uix.LabeledEditPair; import mydev.uix.LabeledPanel; import mydev.uix.ListPanel; import mydev.uix.ListPanelPagesOpener; import mydev.uix.LoggingVkusnjashki; import mydev.uix.LongTermCtrl; import mydev.uix.MultyButtonTiersBuilder; import mydev.uix.PagesPanel; import mydev.uix.Params; import mydev.uix.PieChartUnity; import mydev.uix.ProgressBar; import mydev.uix.ProgressMultiTasking; import mydev.uix.PropertySetPanel; import mydev.uix.Props; import mydev.uix.SidePanelFactory; import mydev.uix.SizePanel; import mydev.uix.Timer; import mydev.uix.ToogleMultyButton; import mydev.uix.YellowAutoButton; import mydev.vutils.AverageRec; import mydev.vutils.Data; import mydev.vutils.Ester; import mydev.vutils.ExpectHere; import mydev.vutils.Files; import mydev.vutils.Filter; import mydev.vutils.Join; import mydev.vutils.Karta; import mydev.vutils.Metr; import mydev.vutils.Order; import mydev.vutils.Queue; import mydev.vutils.ReadyFree; import mydev.vutils.Time; import mydev.vutils.TimeTracking; public class OneLine extends Frame implements Runnable,LongTermCtrl { static final boolean firstPreview=1+1+1-1 > 1+1; OneLinePathPanel pathPanel; SourceLeftPanel leftPanel; LettersOneLineRightPanel rightPanel; LimStatParallelPanel quadePanel; OneLineSouthPanel southPanel; OneLineLogPanel logPanel; String pathParam; String leftPanelParam; SourceProcessor spCurrent; AzRegistry registry; public OneLine(String title) { super(title); setLayout(new BorderLayout()); setBackground(Color.gray); this.registry=new AzRegistry();} public static void main(String[] args) throws IOException { OneLine main=new OneLine("Leaves Days Publicity"); if(args.length > 0) { String param=args[0]; String line=SourcePanel.line(param); main.setPathParam(param); System.out.println(line); return;} else { System.out.println("Please specify source file as a parameter.");} main.show(); main.start(); main.pack(); main.reMoveRnd(); main.resize(Enter2.instance().getMainWindowsWidth(),Enter2.instance().getMainWindowsHeight()); Sleeper sleeper=new Sleeper(); if(Props.mainLower) Thread.currentThread().setPriority(Thread.MIN_PRIORITY); while(Better.working) { main.refreshUpdatable(); TimeTracking.memTrack(); sleeper.sleep(Timer.DEF_REF_TIME);} main.hide(); main.dispose(); System.exit(1-1);} public void setPathParam(String path) { this.pathParam=path; File file=new File(path); String fullPath=file.getAbsolutePath(); if(file.isDirectory()) updateInfo(null,true); else { String item=file.getName(); leftPanelParam=item; leftPanel.addItem(item,fullPath);}} protected void reMoveRnd() { Location ol=Enter2.instance().location(); Point p=ol.getRandomExternalPos((short) Location.MAIN_WINDOWS_WIDTH,(short) Location.MAIN_WINDOWS_HEIGHT); move(p.x,p.y);} public boolean hasLongTermContin() { return pathPanel.hasLongTermContin();} public boolean handleEvent(Event et) { if(et.id==Event.WINDOW_DESTROY) new Better().exitApplicationLoop(); if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getQuadeBtn()) { pathPanel.changeQuadeState(); cRemake(); pack(); invalidate(); repaint();} if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getBtScan()) { logPanel.prognoseTasks(1); registry.clearResults(); rightPanel.clearRecount(); leftPanel.clearAvgPanel(); updateInfo(null,true); quadePanel.clearAverage();} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getCbCancelIgnore()) leftPanel.onCancelIgnore(); if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getPfsChoice()) processPfsChoice(); if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getPinterChoice()) processPinterChoice(); if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getBtStop()) pathPanel.disableStop(); if(rightPanel !=null && et.target==rightPanel.getPieChartVertScroll()) rightPanel.refreshUpdatableLegend(); if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getChTypeSort()) rightPanel.changePieChartType(); if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getBtOneLine()) { spCurrent.process(false); leftPanel.enableOneLineBtn(!true); leftPanel.enableSaveBtn(true);} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getSaveBtn()) { spCurrent.saveSourceLine(); leftPanel.enableOneLineBtn(false); leftPanel.enableSaveBtn(false);} if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getChPreview()) { if(pathPanel.getPreview()) { pathPanel.setPath("C:\\Users\\dzianis\\workspace\\Palette"); pathPanel.setPath("C:\\Users\\dzianis\\workspace\\Subscriber"); pathPanel.setPath("C:\\Users\\dzianis\\workspace");} else { pathPanel.setPath("C:\\Users\\dzianis\\workspace"); pathPanel.setPath("C:\\Users\\dzianis\\workspace\\Subscriber");}} if(et.id==Event.LIST_SELECT && leftPanel.isItemsCtrl(et.target)) { registry.clearResults(); quadePanel.initSource(); spCurrent=leftSelected(); leftPanel.enableOneLineBtn(true);} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getAutoBtn()) autoLines(); return super.handleEvent(et);} private void processPfsChoice() { SourcePanel.modeSkipPublicFinalClass=leftPanel.getPfs();} private void processPinterChoice() { SourcePanel.modeSkipPublicInterf=leftPanel.getPinter();} public void run() { logPanel.prognoseTasks(1+1+1+1-(firstPreview ? 0 : 1)); ExpectHere eh=new ExpectHere(); updateInfo(eh,false); eh.stopUntilExpected(); LongTermCtrl ltc=pathPanel; SourceProcessor sp; Sleeper sleeper=new Sleeper(); Time t=new Time(); t.start(); int size1=leftPanel.itemsNum(); if(size1 > 0) { if(firstPreview && pathPanel.getPreview()) preview(sleeper,size1,ltc); oneLineItemsAll(ltc,sleeper,size1); while(quadePanel.hasInProgress()) { sleeper.sleep(5);} if(pathPanel.getPreview()) { preview(sleeper,size1,ltc); pathPanel.setPreview(false); sleeper.sleep(166 * 2); new Better().exitApplicationLoop();}} t.trust(); logPanel.addLogComplete("Average records("+quadePanel.getAverageRec().getRecordsNum()+") processing time is "+quadePanel.getAverageRec().getAverageTime()+"s also min time is "+quadePanel.getAverageRec().getMinTime()+"s and max time is "+quadePanel.getAverageRec().getMaxTime()+"s"); logPanel.addLogComplete("Auto OneLine transform complete "+t.ess()); pathPanel.getBtScan().enable(true); pathPanel.enableQuadeBtn(true); pathPanel.enablePreview(true); leftPanel.enableAutoBtn(true); leftPanel.enablePfs(true); leftPanel.enablePinter(true); leftPanel.enableCtrls(true); pathPanel.disableStop();} private void oneLineItemsAll(LongTermCtrl ltc,Sleeper sleeper,int size1) { OneLineAllTask oneLineTask=new OneLineAllTask(leftPanel,quadePanel,logPanel,sleeper,size1,ltc); logPanel.regTreckableTask(oneLineTask); oneLineTask.run();} private void preview(Sleeper sleeper,int size1,LongTermCtrl ltc) { OneLinePreviewTask previewTask=new OneLinePreviewTask(leftPanel,quadePanel,logPanel,sleeper,size1,ltc,registry); logPanel.regTreckableTask(previewTask); previewTask.run();} protected void autoLines() { registry.clearResults(); leftPanel.enableAutoBtn(false); leftPanel.enablePfs(false); leftPanel.enablePinter(false); pathPanel.getBtScan().enable(false); pathPanel.enableQuadeBtn(false); pathPanel.enableStop(); pathPanel.enablePreview(false); leftPanel.enableCtrls(false); new Thread(this).start();} protected void start() { this.southPanel=new OneLineSouthPanel(); this.logPanel=southPanel.getLogPanel(); this.pathPanel=new OneLinePathPanel(pathParam); add("North",pathPanel.getWrapPanel()); add("West",leftPanel=new SourceLeftPanel()); cRemake(); add("East",createPanelColorfullWrap(rightPanel=new LettersOneLineRightPanel(quadePanel,registry),SubscriberProps.bgStatPanelColor)); add("South",southPanel); if(leftPanelParam !=null) { leftPanel.selectItem(0); leftPanel.setAmount("1"); leftPanel.setSize(""+new File(pathParam).length()); spCurrent=(SourcePanel) quadePanel.getFirst(); spCurrent.readSource(leftPanelParam,pathParam,"","",0); spCurrent.process(false); leftPanel.enableSaveBtn(true);}} protected Panel createPanelColorfullWrap(Component comp,Color wrapColor) { LabeledPanel ignorePanelWrap=new LabeledPanel("",comp,LabeledPanel.DEF_WRAP_SIZE,wrapColor,wrapColor,wrapColor); return ignorePanelWrap;} void cRemake() { if(quadePanel !=null) remove(quadePanel); add("Center",quadePanel=LimStatParallelPanel.create(pathPanel.getQuade(),logPanel.getLogging(),registry));} protected void refreshUpdatable() { leftPanel.updateOnUiThread(quadePanel.getAverageRec()); southPanel.refreshUpdatable(); pathPanel.refreshUpdatable(); rightPanel.refreshUpdatable();} protected void updateInfo(ExpectHere eh,boolean opSingle) { String path=pathPanel.getPath(); pathPanel.enableStop(); leftPanel.clearItems(); if(opSingle) { leftPanel.enablePfs(false); leftPanel.enablePinter(false);} quadePanel.initSource(); leftPanel.setPosition(""); leftPanel.dropBtnSkipPosition(); ScanMultySrcLeftTask scanMultySrcLeft=new ScanMultySrcLeftTask(leftPanel,path,logPanel,eh,opSingle,pathPanel); logPanel.regTreckableTask(scanMultySrcLeft); new Thread(scanMultySrcLeft).start();} protected SourceProcessor leftSelected() { SourceProcessor sp=leftPanel.leftSelected(quadePanel,logPanel); return sp;} static boolean notEq(Dimension d1,Dimension other) { if(d1.width !=other.width) return true; if(d1.height !=other.height) return true; return false;}} class OneLineSouthPanel extends CommonSouthPanel { OneLineLogPanel logPanel; ColorsLogo logoPanel; public OneLineSouthPanel() { super();} protected CommonLogo obtainLogo() { logoPanel=new ColorsLogo(); return logoPanel;} protected CommonLogPanel obtainLogPanel() { logPanel=new OneLineLogPanel(); return logPanel;} public OneLineLogPanel getLogPanel() { return logPanel;}} class OneLineLogPanel extends CommonLogPanel implements LoggingVkusnjashki { public OneLineLogPanel() { super(false);} protected ProgressBar obtainProgressBarCurrent() { ProgressBar progressBar=new ProgressBar(ProgressBar.DEF_HEIGHT,SubscriberProps.borderProgressColor,SubscriberProps.bgProgressColor,SubscriberProps.mainProgressColor,true); return progressBar;} protected ProgressBar obtainProgressBarTotal() { return new ProgressBar(ProgressBar.DEF_HEIGHT,SubscriberProps.borderProgressTotalColor,SubscriberProps.bgProgressTotalColor,SubscriberProps.mainProgressTotalColor,true);} public Color getPanelBgColor() { return SubscriberProps.bgLogPanelColor;} public LayoutManager getPanelLayout() { return new BorderLayout();} public LoggingVkusnjashki getLogging() { return(LoggingVkusnjashki)(this);}} class OneLinePathPanel extends HeaderPathPanel implements LongTermCtrl { private String pathParam; public OneLinePathPanel(String pathParam) { super("Leaves Days Publicity",true,true,LabeledPanel.DEF_MIN_SIZE,SubscriberProps.northBgColor,SubscriberProps.northBorderColor,SubscriberProps.northTextColor); this.pathParam=pathParam;} public boolean getQuade() { return getMultyState();} public void enableQuadeBtn(boolean enable) { enableMultyBtn(enable);} public void changeQuadeState() { changeMultyState();} public Button getQuadeBtn() { return getBtMulty();} public boolean hasLongTermContin() { return longTermOp;} protected ToogleMultyButton obtainMultyButton() { return new QuadeButton();} protected Label obtainLbPath() { return new Label("Source location:");} protected TextField obtainTfPath() { TextField tfPath=new TextField("",50+20+10+5-30-20+5); tfPath.setText("C:\\Users\\dzianis\\workspace\\Architecho\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\"); tfPath.setText("C:\\Users\\dzianis\\workspace2\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\Architecho\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\Delivery\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\Palette\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\Subscriber"); tfPath.setText("C:\\Users\\dzianis\\workspace\\Visual"); tfPath.setText("C:\\Users\\dzianis\\workspace\\Runnners"); if(pathParam !=null) tfPath.setText(pathParam); return tfPath;} protected void buildPanel() { buildPath();} public Color getPanelBgColor() { return SubscriberProps.bgTopColor;}} class SourcePropertySetPanel extends PropertySetPanel { public SourcePropertySetPanel(Color bgColor,LabeledEditPair[] pairs) { super(bgColor,pairs);} protected LayoutManager getPanelLayout(int num,int sps) { return super.getPanelLayout(num,1);}} abstract class CommonOneLinePieChartCanvas extends CommonCanvas { protected PieChartUnity pieChartUnity; public CommonOneLinePieChartCanvas(PieChartUnity pieChartUnity,boolean withBorder,int width,int height) { super(width,height,SubscriberProps.bgChartColor,withBorder ? SubscriberProps.textChartPanelColor : null); this.pieChartUnity=pieChartUnity;}} class OneLinePieChartCanvas extends CommonOneLinePieChartCanvas { public OneLinePieChartCanvas(PieChartUnity pieChartUnity,boolean withBorder) { super(pieChartUnity,withBorder,110+5+5-1-1-1-1-5,110-(5+5)-1);} public void updatePercents() { if(pieChartUnity.getPieChart() !=null) pieChartUnity.getPieChart().updateSectorsPercents();} public void clearItems() { if(pieChartUnity.getPieChart() !=null) pieChartUnity.getPieChart().clearSectors();} public void appendItem(String name,long amount) { if(pieChartUnity.getPieChart() !=null) pieChartUnity.getPieChart().addSector(name,amount);} protected void drawItems(CanvasAdapter ics,PaintAdapter pn) { if(pieChartUnity.getPieChart()==null) pieChartUnity.obtainPieChart(sCur.width / 2,sCur.height / 2,(sCur.width < sCur.height ? sCur.width : sCur.height) / 2-2); if(OneLine.notEq(sCur,sPrev)) pieChartUnity.getPieChart().reshapeSectors(sCur.width / 2,sCur.height / 2,(sCur.width < sCur.height ? sCur.width : sCur.height) / 2-2); pieChartUnity.getPieChart().toPen(ics,pn.select(pieChartUnity.getPieChart()));}} class OneLinePieChartLegendCanvas extends CommonOneLinePieChartCanvas { Scrollbar vScroll; public OneLinePieChartLegendCanvas(PieChartUnity pieChartUnity,Scrollbar vScroll,boolean withBorder) { super(pieChartUnity,withBorder,10,10); this.vScroll=vScroll;} public void clearItems() { if(pieChartUnity.getPieChartLegend() !=null) pieChartUnity.getPieChartLegend().clearRecords();} protected void drawItems(CanvasAdapter ics,PaintAdapter pn) { if(pieChartUnity.getPieChartLegend()==null) pieChartUnity.obtainPieChartLegend(sCur.width,sCur.height,vScroll); if(OneLine.notEq(sCur,sPrev)) pieChartUnity.getPieChartLegend().reshape(sCur.width,sCur.height); pieChartUnity.getPieChartLegend().toPen(ics,pn.select(pieChartUnity.getPieChartLegend()));}} class LettersOneLineRightPanel extends Panel { LimStatParallelPanel quadePanel; OneLinePieChartCanvas pieChartCanvas; OneLinePieChartLegendCanvas pieChartLegendCanvas; Scrollbar vScroll; Choice chTypeSort; private AzRegistry registry; private PieChartUnity pieChartUnity; private boolean init; public LettersOneLineRightPanel(LimStatParallelPanel quadePanel,AzRegistry registry) { super(); setLayout(new BorderLayout()); setBackground(Color.gray); this.quadePanel=quadePanel; this.registry=registry; this.pieChartUnity=new PieChartUnity(); add("North",pieChartCanvas=new OneLinePieChartCanvas(pieChartUnity,false)); add2("East",new Scrollbar(Scrollbar.VERTICAL,1,10,1,100)); add("Center",pieChartLegendCanvas=new OneLinePieChartLegendCanvas(pieChartUnity,vScroll,false)); add("South",chTypeSort=obtainChoiceSort());} public void changePieChartType() { refreshUpdatable();} public void refreshUpdatableLegend() { refreshUpdatable();} public Scrollbar getPieChartVertScroll() { return vScroll;} public Choice getChTypeSort() { return chTypeSort;} protected Choice obtainChoiceSort() { Choice chType=new Choice(); chType.addItem(SubscriberProps.SORT_DESC); chType.addItem(SubscriberProps.SORT_ASC); chType.addItem(SubscriberProps.SORT_FIRST); chType.addItem(SubscriberProps.SORT_LAST); return chType;} void add2(String string,Scrollbar scroll) {} public void clearRecount() { pieChartCanvas.clearItems(); pieChartCanvas.updatePercents(); pieChartCanvas.refreshUpdatable(); pieChartLegendCanvas.clearItems(); pieChartLegendCanvas.refreshUpdatable();} public void refreshUpdatable() { if(init==false && pieChartUnity.getPieChartLegend() !=null) { pieChartUnity.getPieChartLegend().setLegendItemSide(5+5+5-1-1+1+1-1); pieChartUnity.getPieChartLegend().setSpace(1+1-1); init=true;} if(registry.isStarted() && registry.peekChanges()) { pieChartCanvas.clearItems(); String attrTypeSort=getChTypeSort().getSelectedItem(); boolean amountSort=true; boolean ascendSort=true; if(attrTypeSort.equalsIgnoreCase(SubscriberProps.SORT_ASC)) { amountSort=true; ascendSort=true;} else if(attrTypeSort.equalsIgnoreCase(SubscriberProps.SORT_DESC)) { amountSort=true; ascendSort=false;} else if(attrTypeSort.equalsIgnoreCase(SubscriberProps.SORT_FIRST)) { amountSort=false; ascendSort=true;} else if(attrTypeSort.equalsIgnoreCase(SubscriberProps.SORT_LAST)) { amountSort=false; ascendSort=false;} LetterSourceSortItem.setSortingArgs(amountSort,ascendSort); LetterSourceSortItem[] asc=new LetterSourceSortItem[AzRegistry.LETTERS.length()]; for(int i=0; i < asc.length; i++) { char cur=AzRegistry.LETTERS.charAt(i); Ester lc=new Ester("").append(cur).lc(); SourcePieChartRecord rec=new SourcePieChartRecord(cur,""+cur+lc.toString(),registry.getResult(cur)); asc[i]=new LetterSourceSortItem(rec);} new Order().order(asc); for(int i=0; i < asc.length; i++) pieChartCanvas.appendItem(asc[i].getRec().name,asc[i].getRec().amount); pieChartCanvas.updatePercents(); pieChartCanvas.refreshUpdatable(); pieChartLegendCanvas.refreshUpdatable();}}} class SourcePieChartRecord { char letter; String name; long amount; public SourcePieChartRecord(char letter,String name,long amount) { super(); this.letter=letter; this.name=name; this.amount=amount;}} class LetterSourceSortItem extends Ester { private static boolean amountSort; private static boolean ascend; private SourcePieChartRecord rec; public LetterSourceSortItem(SourcePieChartRecord rec) { super(); this.rec=rec;} public SourcePieChartRecord getRec() { return rec;} public boolean less(Ester es) { LetterSourceSortItem other=(LetterSourceSortItem) es; if(ascend) { if(amountSort) return rec.amount < other.rec.amount; else return rec.letter < other.rec.letter;} if(amountSort) return rec.amount > other.rec.amount; return rec.letter > other.rec.letter;} public static void setSortingArgs(boolean amountSort,boolean ascend) { LetterSourceSortItem.amountSort=amountSort; LetterSourceSortItem.ascend=ascend;}} class SourceRightPropertySetPanel extends Panel { LimStatParallelPanel quadePanel; PropertySetPanel propSetPanel; AzRegistry registry; public SourceRightPropertySetPanel(LimStatParallelPanel quadePanel,AzRegistry registry) { super(); setLayout(new FlowLayout()); setBackground(Color.gray); this.quadePanel=quadePanel; this.registry=registry; LabeledEditPair[] pairs=new LabeledEditPair[5+5+5+1+5+1+1+1-1-1-1-1+1+1]; Ester abcUp=new Ester(AzRegistry.LETTERS); Ester abcDwn=new Ester("").append(abcUp).lc(); SourcePanel spCurrent=(SourcePanel) quadePanel.getFirst(); for(int i=0+1; i <= pairs.length; i++) { pairs[i-1]=new LabeledEditPair(new Ester("").append(abcUp.at(i-1)).append(abcDwn.at(i-1)).toString(),"0",false,5-1,false); spCurrent.getSeno().cookingLabel(pairs[i-1]);} this.propSetPanel=new SourcePropertySetPanel(SubscriberProps.bgCtrlPanelColor,pairs); add(propSetPanel.cookingLabels(Color.white,Color.black,Color.gray));} public void refreshUpdatable() { for(int i=0; i < propSetPanel.getPropertyNum(); i++) propSetPanel.setText(""+registry.getResult(AzRegistry.LETTERS.charAt(i)),i);}} class SourceLeftPanel extends CommonDataArrayPanel implements ListPanelPagesOpener { IgnorePanel ignorePanel; ListPanel listPanel; LeftOneLineCtrlsPanel savePanel; SizePanel sizePanel; AveragePanel avgPanel; private Queue leftItemsQueue=new Queue(); private boolean leftItemsQueueIns; private String[] leftItemsQueueArr=new String[1-1]; public SourceLeftPanel() { super();} public void openFirstPage() { System.out.println("open first page app");} public void openLastPage() { System.out.println("open last page app");} public void openNextPage() { System.out.println("open next page app");} public void openPrevPage() { System.out.println("open prev page app");} protected Panel obtainControlsPanel() { this.savePanel=new LeftOneLineCtrlsPanel(); return savePanel;} protected SizePanel obtainSizePanel() { this.sizePanel=SidePanelFactory.createTotalSizePanel(); return sizePanel;} protected ListPanel obtainListPanel() { this.listPanel=new ListPanel(new StatSubscriberPanel(),new PagesSubscriberPanel()); return listPanel;} protected AveragePanel obtainAveragePanel() { this.avgPanel=SidePanelFactory.createUsualAveragePanel(); return avgPanel;} protected IgnorePanel obtainIgnorePanel() { this.ignorePanel=new SubscriberIgnorePanel(); return ignorePanel;} public IgnorePanel getIgnorePanel() { return ignorePanel;} public Color getPanelBgColor() { return SubscriberProps.bgSideColor;} protected Color getWrapPanelColor() { return SubscriberProps.bgStatPanelColor;} public SourceProcessor leftSelected(LimStatParallelPanel quadePanel,LoggingVkusnjashki logPanel) { int idxSel=getSelectedIdx(); String curSel=getItemSelected(); String path=getSelectedPath(); logPanel.addLog("Selected item "+path); SourceProcessor sp=(SourceProcessor) quadePanel.assignSource(curSel,path,"","",idxSel); setPosition(""+(idxSel+1)); return sp;} public Button getAutoBtn() { return savePanel.getOneLineSavePanel().getBtAuto();} public Button getSaveBtn() { return savePanel.getOneLineSavePanel().getBtSave();} public Button getBtOneLine() { return savePanel.getOneLineSavePanel().getBtOneLine();} public Choice getPfsChoice() { return savePanel.getPfsChoice();} public boolean getPfs() { return savePanel.getPfs();} public Choice getPinterChoice() { return savePanel.getPinterChoice();} public boolean getPinter() { return savePanel.getPinter();} public void dropBtnSkipPosition() { savePanel.getOneLineSavePanel().dropBtnSkipPosition();} public String getSelectedPath() { int idxSel=listPanel.getSelectedIndex(); if(leftItemsQueueIns) leftItemsQueueArr=makeCopyCash(); String path=leftItemsQueueArr[idxSel]; return path;} public void clearItems() { listPanel.clearItems(); leftItemsQueue.clearQueue(); leftItemsQueueIns=false; leftItemsQueueArr=makeCopyCash();} private String[] makeCopyCash() { leftItemsQueueIns=false; Object[] queueRecordsArray=leftItemsQueue.getQueueRecordsArray(); String[] result=new String[queueRecordsArray.length]; for(int i=0; i < result.length; i++) result[i]=(String) queueRecordsArray[i]; return result;} public void updateOnUiThread(AverageRec mar) { updateMinMaxAvg(mar);} public void addItem(String item,String fullPath) { listPanel.addItem(item); leftItemsQueue.enqueueQueueRecord(fullPath); leftItemsQueueIns=true;} public void enableOneLineBtn(boolean enable) { savePanel.getOneLineSavePanel().getBtOneLine().enable(enable);} public void enableSaveBtn(boolean enable) { savePanel.getOneLineSavePanel().getBtSave().enable(enable);} public void enableAutoBtn(boolean enable) { savePanel.getOneLineSavePanel().getBtAuto().enable(enable);} public void enablePfs(boolean enable) { savePanel.getPfsChoice().enable(enable);} public void enablePinter(boolean enable) { savePanel.getPinterChoice().enable(enable);} public void enableCtrls(boolean enable) { listPanel.listEnable(enable);}} class SubscriberIgnorePanel extends IgnorePanel { public SubscriberIgnorePanel() { super();} protected void initIgnoreList() { String ignoreListOneLine="mydev."+"aaa;"+"\n"+"mydev."+"vutils;"+"\n"+"galle"+"ry.java"+"\n"+"mydev."+"anim;"+"\n"+"p_ticca"+"3d.java"+"\n"+"mydev."+"classes;"+"\n"+"mydev."+"extension;"+"\n"+"mydev."+"oneway;"+"\n"+"mydev."+"oline;"+"\n"+"mydev."+"t3;"+"\n"+"mydev."+"zetup;"+"\n"+"mydev."+"rs;"+"\n"+"mydev."+"xera;"+"\n"+"mydev."+"cndata;"; setIgnoreList(ignoreListOneLine);}} class LeftOneLineCtrlsPanel extends Panel { ChoiceFactory pfsChoiceFactory; ChoiceFactory pinterChoiceFactory; Panel setsPanel; Panel interPanel; LeftOneLineSavePanel oneLineSavePanel; public LeftOneLineCtrlsPanel() { super(); this.pfsChoiceFactory=pfsInit(); this.pinterChoiceFactory=pinterInit(); MultyButtonTiersBuilder.create().appendPanel(setsPanel=PublicFinalSkipPanel.create(pfsChoiceFactory)).appendPanel(interPanel=PublicInterfSkipPanel.create(pinterChoiceFactory)).appendControlsPanel(oneLineSavePanel=new LeftOneLineSavePanel()).build(this);} ChoiceFactory pfsInit() { String[] variants=new String[1+1]; variants[1-1]=SubscriberProps.YES; variants[1]=SubscriberProps.NO; ChoiceFactory result=new ChoiceFactory(variants,1-1); return result;} ChoiceFactory pinterInit() { String[] variants=new String[1+1]; variants[1-1]=SubscriberProps.SKIP; variants[1]=SubscriberProps.NO; ChoiceFactory result=new ChoiceFactory(variants,1-1+1); return result;} public Panel getSetsPanel() { return setsPanel;} public Panel getInterPanel() { return interPanel;} public LeftOneLineSavePanel getOneLineSavePanel() { return oneLineSavePanel;} public Choice getPfsChoice() { return pfsChoiceFactory.getChCases();} public boolean getPfs() { return pfsChoiceFactory.isSelected(SubscriberProps.YES);} public Choice getPinterChoice() { return pinterChoiceFactory.getChCases();} public boolean getPinter() { return pinterChoiceFactory.isSelected(SubscriberProps.SKIP);}} class OneLineSkipPanel extends PropertySetPanel { public OneLineSkipPanel(Color bgColor,LabeledEditPair[] pairs) { super(bgColor,pairs);} Panel createPanelColorfullWrap(Component comp,Color wrapColor) { LabeledPanel ignorePanelWrap=new LabeledPanel("",comp,LabeledPanel.DEF_WRAP_SIZE,wrapColor,wrapColor,wrapColor,false,true,true,!true); return ignorePanelWrap;}} class PublicFinalSkipPanel extends OneLineSkipPanel { public PublicFinalSkipPanel(Color bgColor,LabeledEditPair[] pairs) { super(bgColor,pairs);} public static Panel create(ChoiceFactory cfPublFinal) { LabeledEditPair[] pairs=new LabeledEditPair[1]; pairs[1-1]=new LabeledEditPair("public final Skip",cfPublFinal.getChCases()); PublicFinalSkipPanel psp=new PublicFinalSkipPanel(SubscriberProps.bgCtrlPanelColor,pairs); return psp.createPanelColorfullWrap(psp.cookingLabels(SubscriberProps.bgSizePanelColor,SubscriberProps.textChartPanelColor,SubscriberProps.bgChartPanelColor),SubscriberProps.bgCtrlPanelColor);}} class PublicInterfSkipPanel extends OneLineSkipPanel { public PublicInterfSkipPanel(Color bgColor,LabeledEditPair[] pairs) { super(bgColor,pairs);} public static Panel create(ChoiceFactory cfPublInterf) { LabeledEditPair[] pairs=new LabeledEditPair[1]; pairs[1-1]=new LabeledEditPair("public interface",cfPublInterf.getChCases()); PublicInterfSkipPanel psp=new PublicInterfSkipPanel(SubscriberProps.bgCtrlPanelColor,pairs); return psp.createPanelColorfullWrap(psp.cookingLabels(SubscriberProps.bgSizePanelColor,SubscriberProps.textChartPanelColor,SubscriberProps.bgChartPanelColor),SubscriberProps.bgCtrlPanelColor);}} class LeftOneLineSavePanel extends ControlsPanel { final static String BT_ONELINE="btOneLine"; final static String BT_SAVE="btSave"; public LeftOneLineSavePanel() { super();} public Button getBtOneLine() { return(Button) getCtrl(BT_ONELINE);} public Button getBtSave() { return(Button) getCtrl(BT_SAVE);} public Button getBtAuto() { return getAutoBtn().getBtAuto();} public Color getPanelBgColor() { return SubscriberProps.bgCtrlPanelColor;} public LayoutManager getPanelLayout() { return new FlowLayout(FlowLayout.CENTER,1+1,1+1);} protected void buildPanel() { append(BT_ONELINE,new Button("OneLine")); append(BT_SAVE,new Button("Save")); append("subscriberAuto",new SubscriberAuto());} public void enableCtrls(boolean enable) {((Button) getCtrl(BT_ONELINE)).enable(enable);((Button) getCtrl(BT_SAVE)).enable(enable); getAutoBtn().enableCtrl(enable);}} class SubscriberAuto extends YellowAutoButton { public SubscriberAuto() { super();}} class StatSubscriberPanel extends AmountPanel { public StatSubscriberPanel() { super("*.java","file(s)");} public Color getPanelBgColor() { return SubscriberProps.bgAmountPanelColor;} protected int getPosWidth() { return 5-1+1+1-1;} protected int getAmountWidth() { return 12-5-1-1;}} class PagesSubscriberPanel extends PagesPanel { public PagesSubscriberPanel() { super(SubscriberProps.listPanelPageSize);} public Color getPanelBgColor() { return SubscriberProps.bgPagesPanelColor;}} class ScanMultySrcLeftTask extends ProgressMultiTasking { SourceLeftPanel leftPanel; OneLineLogPanel logPanel; OneLinePathPanel pathPanel; private String path; private Metr amount=new Metr(); private Metr size=new Metr(); private ExpectHere expectHere; private boolean opSingle; public ScanMultySrcLeftTask(SourceLeftPanel leftPanel,String path,OneLineLogPanel logPanel,ExpectHere eh,boolean opSingle,OneLinePathPanel pathPanel) { super(); this.leftPanel=leftPanel; this.path=path; this.logPanel=logPanel; this.expectHere=eh; this.opSingle=opSingle; this.pathPanel=pathPanel;} public OneLineLogPanel getLogPanel() { return logPanel;} public void setLogPanel(OneLineLogPanel logPanel) { this.logPanel=logPanel;} public SourceLeftPanel getLeftPanel() { return leftPanel;} public String getPath() { return path;} public Metr getAmount() { return amount;} public Metr getSize() { return size;} void displayAmount(Metr m) { Ester repr=m.repr(' '); leftPanel.setAmount(new Ester("0").eq(repr) ? "" : repr.toString());} void displaySize(Metr m) { Ester repr=m.repr(','); leftPanel.setSize(new Ester("0").eq(repr) ? "" : repr.toString());} protected void performTask() { Time t=new Time(); t.start(); updateStat(); scanItems(path,".java"); t.trust(); logPanel.addLogComplete("Source scan complete "+t.ess()); leftPanel.enableAutoBtn(true==opSingle); leftPanel.enablePfs(true==opSingle); leftPanel.enablePinter(true==opSingle); if(opSingle) pathPanel.disableStop(); if(expectHere !=null) expectHere.markAsReached();} protected void updateStat() { Metr m=new Metr(0); m.inc(amount); displayAmount(m); m=new Metr(0); m.inc(size); displaySize(m);} protected void scanItems(String path,String ext) { Ester[] start=new Files().tree(new Ester(path)); Ester[] select=new Filter().endsWithIncensitive(start,new Ester(ext)); Ester[] damage=new Join().join(new Filter().endsWithIncensitive(start,new Ester("mydev\\webobj\\parser.java")),new Filter().endsWithIncensitive(start,new Ester("mydev/webobj/parser.java"))); select=new Join().sub(select,damage); Ester[] selectNames=new Filter().cutStart(select,new Ester(path)); for(int i=0; i < select.length && pathPanel.hasLongTermContin(); i++) { if(leftPanel.getIgnorePanel().hasIgnoreCoincidence(select[i].toString())) { recountComplete(i+1,select.length); continue;} leftPanel.addItem(selectNames[i].toString(),select[i].toString()); amount.inc(1); size.inc(new File(select[i].toString()).length()); updateStat(); recountComplete(i+1,select.length);}}} class CommandOneLine { public final static int ID_READY=1; public final static int ID_INIT=1+1; public final static int ID_READ_SOURCE=1+1+1; public final static int ID_ONELINE=1+1+1+1; public final static int ID_SAVE_SOURCE=1+1+1+1+1; private int id; protected boolean complete; CommandOneLine(int id) { super(); this.id=id; this.complete=false;} public static CommandOneLine create(int cmdId) { CommandOneLine cmd=null; switch(cmdId) { case ID_READY : case ID_INIT : cmd=new CommandOneLine(cmdId); break;} return cmd;} public int getId() { return id;} public boolean isComplete() { return complete;}} class ReadCommandOneLine extends CommandOneLine { private String name; private String path; public ReadCommandOneLine(String name,String path) { super(ID_READ_SOURCE); this.name=name; this.path=path;} public String getName() { return name;} public String getPath() { return path;}} class ProcessCommandOneLine extends CommandOneLine { private boolean needSave; private ReadyFree readyFree; public ProcessCommandOneLine(boolean needSave,ReadyFree readyFree) { super(ID_ONELINE); this.needSave=needSave; this.readyFree=readyFree;} public ReadyFree getReadyFree() { return readyFree;} public boolean isNeedSave() { return needSave;}} class SaveCommandOneLine extends CommandOneLine { private ReadyFree readyFree; public SaveCommandOneLine(ReadyFree readyFree) { super(ID_SAVE_SOURCE); this.readyFree=readyFree;} public ReadyFree getReadyFree() { return readyFree;}} interface SourceProcessor { boolean isReadyFree(); void readSource(String name,String path,String looking,String relPath,int idxSel); void process(boolean needSave); void saveSourceLine();} class CommandSubscriberQueue { private Queue itemsQueue=new Queue(); public CommandSubscriberQueue() { super();} public void push(CommandOneLine cmd) { itemsQueue.enqueueQueueRecord(cmd);} public boolean hasSomeWork() { return itemsQueue.isEmptyQueue()==false;} public CommandOneLine nextCurrent() { CommandOneLine cmd=(CommandOneLine) itemsQueue.dequeueQueueRecord(); return cmd;}} class LimStats extends Panel { LabeledEditPair leRound; LabeledEditPair leFigu; LabeledEditPair leSq; LabeledEditPair leOpNum; private String source; private AzRegistry registry; LabeledEditPair leSpace; LabeledEditPair leTab; LabeledEditPair leBack; LabeledEditPair leNext; public LimStats(AzRegistry registry) { super(); setBackground(SubscriberProps.bgLimStatPanelColor); this.registry=registry; setLayout(new GridLayout(2,4,1,1)); int editWidth=2+1-1+1; add(leNext=cookingLabel(new LabeledEditPair(""+'\\'+"n","",false,editWidth,true))); add(leSpace=cookingLabel(new LabeledEditPair("'  '","",false,editWidth,true))); add(leTab=cookingLabel(new LabeledEditPair(""+'\\'+"t","",false,editWidth,true))); add(leBack=cookingLabel(new LabeledEditPair(""+'\\'+"r","",false,editWidth,true))); add(leRound=cookingLabel(new LabeledEditPair("( )","",false,editWidth,true))); add(leFigu=cookingLabel(new LabeledEditPair("{ }","",false,editWidth,true))); add(leSq=cookingLabel(new LabeledEditPair("[ ]","",false,editWidth,true))); add(leOpNum=cookingLabel(new LabeledEditPair(" ; ","",false,editWidth,true)));} protected LabeledEditPair cookingLabel(LabeledEditPair labeledEditPair) { labeledEditPair.setPanelBgColor(SubscriberProps.bgLimStatPanelColor); labeledEditPair.getLbName().setForeground(Color.white); return labeledEditPair;} public LabeledEditPair getLeRound() { return leRound;} public LabeledEditPair getLeFigu() { return leFigu;} public LabeledEditPair getLeSq() { return leSq;} public LabeledEditPair getLeOpNum() { return leOpNum;} public void setSource(String source,boolean needProcessing) { this.source=source; if(needProcessing) processData();} private void processData() { int iRound=0; int iFigu=0; int iSq=0; int iOpNum=0; int iSpace=0; int iTab=0; int iBack=0; int iNext=0; if(source==null) source=""; char[] chAll=new char[source.length()]; source.getChars(0,chAll.length,chAll,0); for(int i=0; i < chAll.length; i++) { char ch; switch(ch=chAll[i]) { case '(' : case ')' : iRound+=1; break; case '{' : case '}' : iFigu+=1; break; case '[' : case ']' : iSq+=1; break; case ';' : iOpNum+=1; break; case ' ' : iSpace+=1; break; case '\t' : iTab+=1; break; case '\r' : iBack+=1; break; case '\n' : iNext+=1; break; case 'A' : case 'a' : case 'B' : case 'b' : case 'C' : case 'c' : case 'D' : case 'd' : case 'E' : case 'e' : case 'F' : case 'f' : case 'G' : case 'g' : case 'H' : case 'h' : case 'I' : case 'i' : case 'J' : case 'j' : case 'K' : case 'k' : case 'L' : case 'l' : case 'M' : case 'm' : case 'N' : case 'n' : case 'O' : case 'o' : case 'P' : case 'p' : case 'Q' : case 'q' : case 'R' : case 'r' : case 'S' : case 's' : case 'T' : case 't' : case 'U' : case 'u' : case 'V' : case 'v' : case 'W' : case 'w' : case 'X' : case 'x' : case 'Y' : case 'y' : case 'Z' : case 'z' : registry.incrLetter(ch,1); break;}} leRound.setText(iRound > 0 ? ""+iRound : ""); leFigu.setText(iFigu > 0 ? ""+iFigu : ""); leSq.setText(iSq > 0 ? ""+iSq : ""); leOpNum.setText(iOpNum > 0 ? ""+iOpNum : ""); leSpace.setText(iSpace > 0 ? ""+iSpace : ""); leTab.setText(iTab > 0 ? ""+iTab : ""); leBack.setText(iBack > 0 ? ""+iBack : ""); leNext.setText(iNext > 0 ? ""+iNext : "");}} class SourcePanel extends AbstractApproach implements SourceProcessor { final static String PFS_MARK="pub"+"lic "+"fin"+"al"+" cla"+"ss "; final static String PINTER_MARK="pub"+"lic "+"in"+"te"+"rfa"+"ce "; TextField tfSrcPath; TextArea taSource; LimStats seno; private String name; private String path; LoggingVkusnjashki logPanel; private ReadyFree readyFree; private CommandSubscriberQueue cq=new CommandSubscriberQueue(); private boolean hasNewLine; private boolean skipPublicFinalClass; private boolean skipPublicInterf; static boolean modeSkipPublicFinalClass=true; static boolean modeSkipPublicInterf=false; public SourcePanel(LoggingVkusnjashki logPanel,AzRegistry registry) { super(); this.logPanel=logPanel; setLayout(new BorderLayout()); setBackground(Color.lightGray); add("North",tfSrcPath=new TextField()); add("Center",taSource=new TextArea()); add("South",seno=new LimStats(registry)); tfSrcPath.setEditable(false); taSource.setEditable(false); this.readyFree=new ReadyFree();} public LoggingVkusnjashki getLogPanel() { return logPanel;} public void setLogPanel(LoggingVkusnjashki logPanel) { this.logPanel=logPanel;} public TextField getTfSrcPath() { return tfSrcPath;} public LimStats getSeno() { return seno;} public String getName() { return name;} public String getPath() { return path;} public boolean isHasNewLine() { return hasNewLine;} public boolean isReadyFree() { return readyFree.isFree();} public void clearPanel() {} public void doIt(Params params) { if(params !=null) { if(params.areYou(LimStatParallelPanel.CMD_INIT_SRC)) initSource(params.getParam("name"),params.getParam("path")); else if(params.areYou(LimStatParallelPanel.CMD_READ_SRC)) readSource(params.getParam("name"),params.getParam("path"),params.getParam("looking"),params.getParam("relPath"),params.getParamInteger("idxSel").intValue());}} public void initSource(String name,String path) { readSource("","","","",0);} public void readSource(String name,String path,String looking,String relPath,int idxSel) { CommandOneLine cmd=new ReadCommandOneLine(name,path); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} public void process(boolean needSave) { readyFree.setBusy(); CommandOneLine cmd=new ProcessCommandOneLine(needSave,readyFree); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} public void saveSourceLine() { CommandOneLine cmd=new SaveCommandOneLine(readyFree); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} public static String line(String path) throws IOException { return new mydev.oline.OneLine().line(path);} public static String loadSource(String path) throws IOException { return new Ester("").append(new mydev.oline.OneLine().read(path)).toString();} private void interpret(CommandOneLine cmd) { switch(cmd.getId()) { case CommandOneLine.ID_READY : break; case CommandOneLine.ID_INIT : break; case CommandOneLine.ID_READ_SOURCE : readSource((ReadCommandOneLine) cmd); break; case CommandOneLine.ID_ONELINE : oneLineTansform((ProcessCommandOneLine) cmd); break; case CommandOneLine.ID_SAVE_SOURCE : oneLineSave(((SaveCommandOneLine) cmd).getReadyFree()); break;}} private void readSource(ReadCommandOneLine cmd) { name=cmd.getName(); path=cmd.getPath(); tfSrcPath.setText(path); String source=""; if(path !=null && path.length() > 0) try { source=loadSource(path);} catch(IOException ex) { System.out.println("Can't read "+path+" . "+ex.getMessage()); ex.printStackTrace(); logPanel.addLog("Can't read "+path+" . "+ex.getMessage());} taSource.setText(source); seno.setSource(source,true); hasNewLine=source.indexOf('\n') >-1; if(modeSkipPublicFinalClass) skipPublicFinalClass=source.indexOf(PFS_MARK) >-1; else skipPublicFinalClass=false; if(modeSkipPublicInterf) skipPublicInterf=source.indexOf(PINTER_MARK) >-1; else skipPublicInterf=false;} private void oneLineTansform(ProcessCommandOneLine cmd) { ar.start(); logPanel.addLog("Starting "+path); try { hasNewLine=1+1 > 1-1; if(!skipPublicInterf) { if(!skipPublicFinalClass) { if(hasNewLine) { Time t=new Time(); t.start(); String source=line(path); taSource.setText(source); seno.setSource(source,false); t.trust(); logPanel.addLogComplete("One line transformation of "+name+" completed in "+t.ess());} else { logPanel.addLog("No transformation already One line at "+name); new Sleeper().sleep(997 / 2);}} else logPanel.addLog("Skipped transformation One line of "+PFS_MARK+name);} else logPanel.addLog("Skipped transformation One line of "+PINTER_MARK+name); if(cmd.isNeedSave()) { oneLineSave(cmd.getReadyFree()); taSource.setText(""); seno.setSource("",true); tfSrcPath.setText("");} else cmd.getReadyFree().setFree();} catch(IOException ex) { System.out.println("Can't transform "+path+" . "+ex.getMessage()); ex.printStackTrace(); logPanel.addLog("Can't transform "+path+" . "+ex.getMessage());} ar.trust();} private void oneLineSave(ReadyFree readyFree) { String content=taSource.getText(); logPanel.addLog("Save line with "+new Metr(content.length()).repr(',')+" byte(s) to "+path); try { new Data().write(path,new Ester(content)); logPanel.addLog(""+name+" complete"); readyFree.setFree();} catch(IOException ex) { System.out.println("Can't write "+path+" . "+ex.getMessage()); ex.printStackTrace(); logPanel.addLog("Can't write "+path+" . "+ex.getMessage());}} public void run() { while(Better.working) { if(cq.hasSomeWork()) { CommandOneLine cmd=cq.nextCurrent(); interpret(cmd);} sleeper.sleep(5);}}} class LimStatApproachProvider implements AbstractApproachProvider { LoggingVkusnjashki logPanel; AzRegistry registry; public LimStatApproachProvider(LoggingVkusnjashki logPanel,AzRegistry registry) { super(); this.logPanel=logPanel; this.registry=registry;} public AbstractApproach provideApproach() { return new SourcePanel(logPanel,registry);}} class LimStatParallelPanel extends AbstractParallelPanel { static final String CMD_INIT_SRC="initSource"; static final String CMD_READ_SRC="readSource"; static LoggingVkusnjashki logPanel; static AzRegistry registry; LimStatParallelPanel(int nWidth,int nHeight) { super(nWidth,nHeight);} public void initSource() { Params params=new Params(CMD_INIT_SRC); params.addParam("name",""); params.addParam("path",""); doAllQuick(params);} public SourceProcessor assignSource(String name,String path,String looking,String relPath,int idxSel) { Params params=new Params(CMD_READ_SRC); params.addParam("name",name); params.addParam("path",path); params.addParam("looking",looking); params.addParam("relPath",relPath); params.addParam("idxSel",new Integer(idxSel)); AbstractApproach abstractApproach=doFirstAvail(params); return(SourceProcessor) abstractApproach;} public static LimStatParallelPanel create(boolean quade,LoggingVkusnjashki lineLogging,AzRegistry registry) { if(lineLogging !=null) LimStatParallelPanel.logPanel=lineLogging; LimStatParallelPanel.registry=registry; return quade ? new LimStatParallelPanel(2,2) : new LimStatParallelPanel(1,1);} protected AbstractApproachProvider obtainProvider() { return new LimStatApproachProvider(logPanel,registry);}} class QuadeButton extends ToogleMultyButton { public QuadeButton() { super();} public Button getQuadeBtn() { return getMultyBtn();} public boolean getQuade() { return getState();} protected String getMultyName() { return "Quade";} protected int getMultyNumber() { return 1+1+1+1;}} class OneLinePreviewTask extends ProgressMultiTasking { SourceLeftPanel leftPanel; LimStatParallelPanel quadePanel; LoggingVkusnjashki logPanel; Sleeper totalSleeper; int totalSize; LongTermCtrl longTermMnogaCtrl; AzRegistry registry; public OneLinePreviewTask(SourceLeftPanel leftPanel,LimStatParallelPanel quadePanel,LoggingVkusnjashki logPanel,Sleeper totalSleeper,int totalSize,LongTermCtrl longTermMnogaCtrl,AzRegistry registry) { super(); this.leftPanel=leftPanel; this.quadePanel=quadePanel; this.logPanel=logPanel; this.totalSleeper=totalSleeper; this.totalSize=totalSize; this.longTermMnogaCtrl=longTermMnogaCtrl; this.registry=registry;} public LoggingVkusnjashki getLogPanel() { return logPanel;} public void setLogPanel(LoggingVkusnjashki logPanel) { this.logPanel=logPanel;} public SourceLeftPanel getLeftPanel() { return leftPanel;} public LimStatParallelPanel getQuadePanel() { return quadePanel;} public Sleeper getTotalSleeper() { return totalSleeper;} public int getTotalSize() { return totalSize;} protected void performTask() { preview(totalSleeper,totalSize,longTermMnogaCtrl);} private void preview(Sleeper sleeper,int size1,LongTermCtrl ltc) { SourceProcessor sp; registry.enableIncr(false); for(int i=0; ltc.hasLongTermContin() && i < size1; i++) { leftPanel.selectItem(i); sp=leftPanel.leftSelected(quadePanel,logPanel); sleeper.sleep(5); while(quadePanel.hasAvailable()==false) sleeper.sleep(5); recountComplete(i+1,size1);} while(quadePanel.hasInProgress()) { sleeper.sleep(166 * 3); System.out.print("SLEEP_2");} registry.enableIncr(true); System.out.println("");}} class OneLineAllTask extends ProgressMultiTasking { SourceLeftPanel leftPanel; LimStatParallelPanel quadePanel; LoggingVkusnjashki logPanel; LongTermCtrl longTermMnogaCtrl; private Sleeper totalSleeper; private int totalSize; public OneLineAllTask(SourceLeftPanel leftPanel,LimStatParallelPanel quadePanel,LoggingVkusnjashki logPanel,Sleeper totalSleeper,int totalSize,LongTermCtrl longTermMnogaCtrl) { super(); this.leftPanel=leftPanel; this.quadePanel=quadePanel; this.logPanel=logPanel; this.totalSleeper=totalSleeper; this.totalSize=totalSize; this.longTermMnogaCtrl=longTermMnogaCtrl;} public LoggingVkusnjashki getLogPanel() { return logPanel;} public void setLogPanel(LoggingVkusnjashki logPanel) { this.logPanel=logPanel;} public SourceLeftPanel getLeftPanel() { return leftPanel;} public LimStatParallelPanel getQuadePanel() { return quadePanel;} public Sleeper getTotalSleeper() { return totalSleeper;} public int getTotalSize() { return totalSize;} protected void performTask() { oneLineItemsAll(longTermMnogaCtrl,totalSleeper,totalSize);} private void oneLineItemsAll(LongTermCtrl ltc,Sleeper sleeper,int size1) { for(int i=0; ltc.hasLongTermContin() && i < size1; i++) { leftPanel.selectItem(i); SourceProcessor sp=leftPanel.leftSelected(quadePanel,logPanel); sp.process(true); while(quadePanel.hasAvailable()==false) sleeper.sleep(5); recountComplete(i+1,size1);}}} class SubscriberProps extends Props { public static final String SORT_FIRST="Aa-Zz"; public static final String SORT_DESC="Descend"; public static final String SORT_ASC="Ascend"; public static final String SORT_LAST="Zz-Aa"; public static final Color bgLimStatPanelColor=Props.bgSizePanelColor; final static String YES="Yes"; final static String NO="No"; final static String SKIP="Skip";} class AzRegistry { final static String LETTERS="ABCDEFGHIJKLMNOPQRSTUVWXYZ"; private Karta letterMap; private boolean enabledIncr; private boolean started; private boolean changes; public AzRegistry() { super(); this.letterMap=new Karta(); this.enabledIncr=true;} public synchronized void enableIncr(boolean enable) { this.enabledIncr=enable;} public synchronized void incrLetter(char letter,long amount) { if(!started) started=true; String key=getKey(letter); Long item=(Long) letterMap.get(key); if(enabledIncr) { changes=true; letterMap.put(key,new Long((item !=null ? item.longValue() : 0L)+amount));}} public boolean peekChanges() { if(changes) { changes=false; return true;} return false;} public synchronized long getResult(char letter) { Object res=letterMap.get(getKey(letter)); if(res !=null) return((Long) res).longValue(); return 0L;} public boolean isStarted() { return started;} public synchronized void clearResults() { letterMap=new Karta();} private String getKey(char letter) { String key=new Ester("").append(letter).lc().toString(); return key;}}