package mydev.cs; import java.util.Enumeration; import java.util.Vector; import mydev.about.Colorfull; import mydev.about.Rectangle2D; public abstract class WallsProfile extends Colorfull { private Vector wallSet=new Vector(); protected ContureWall farSide; protected ContureWall ceiling; protected ContureWall rightSide; protected ContureWall floor; protected ContureWall leftSide; protected ContureWall nearGlass; public WallsProfile(int contureColor) { super(contureColor); createWallSet(contureColor);} protected void createWallSet(int contureColor) { wallSet.addElement(farSide=obtainFarSide(contureColor)); wallSet.addElement(ceiling=obtainCeiling(contureColor)); wallSet.addElement(rightSide=obtainRightSide(contureColor)); wallSet.addElement(floor=obtainFloor(contureColor)); wallSet.addElement(leftSide=obtainLeftSide(contureColor)); wallSet.addElement(nearGlass=obtainNearGlass(contureColor));} protected abstract ContureWall obtainFarSide(int contureColor); protected abstract ContureWall obtainCeiling(int contureColor); protected abstract ContureWall obtainRightSide(int contureColor); protected abstract ContureWall obtainFloor(int contureColor); protected abstract ContureWall obtainLeftSide(int contureColor); protected abstract ContureWall obtainNearGlass(int contureColor); public ContureWall getFarSide() { return farSide;} public ContureWall getCeiling() { return ceiling;} public ContureWall getRightSide() { return rightSide;} public ContureWall getFloor() { return floor;} public ContureWall getLeftSide() { return leftSide;} public ContureWall getNearGlass() { return nearGlass;} public Enumeration wallsIterator() { Vector wallsCopy=new Vector(); wallsCopy.addAll(wallSet); return wallsCopy.elements();} public void updateWalls(Rectangle2D area) { Enumeration itWalls=wallsIterator(); while(itWalls.hasMoreElements()) { ContureWall curWall=(ContureWall) itWalls.nextElement(); curWall.update(area);}}}