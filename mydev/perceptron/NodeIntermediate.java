package mydev.perceptron; public class NodeIntermediate extends ResultlessNeuronicNode { protected double multSum; protected double multSumCopy; public NodeIntermediate(double mult) { super(); this.multSumCopy=mult; initClearState();} public NodeIntermediate() { this(NeuronicWrap.ONE_PARTIocULAR);} public float processSignal() { double signalSum=0f; Object[] queueRecordsArray=signalProviders.getQueueRecordsArray(); for(int i=0; i < queueRecordsArray.length; i++) { NeuronicWrap element=(NeuronicWrap) queueRecordsArray[i]; NeuronicNode refNode=element.getRefNode(); float inputNodeOutputSignal=refNode.processSignal(); float inputNodeParticularMult=element.getParticularMult(); signalSum+=inputNodeOutputSignal * inputNodeParticularMult;} return applyMultSumFilter(signalSum,multSum);} float applyMultSumFilter(double sumOfIncomingSignals,double sumMultiplier) { float result=(float)(sumOfIncomingSignals * sumMultiplier); return result;} public void initClearState() { this.multSum=multSumCopy;}}