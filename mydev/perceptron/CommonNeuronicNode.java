package mydev.perceptron; import mydev.vutils.Queue; abstract class CommonNeuronicNode implements NeuronicNode { public static final float NO_SIGNAL_SENIOR=0f; protected Queue signalProviders; protected CommonNeuronicNode() { super(); this.signalProviders=new Queue(); initClearState();} public void addIncomingNode(NeuronicNode neuronicNode) { if(neuronicNode !=null) signalProviders.enqueueQueueRecord(new NeuronicWrap(neuronicNode));} public void addIncomingNode(NeuronicNode neuronicNode,float particularMult) { if(neuronicNode !=null) signalProviders.enqueueQueueRecord(new NeuronicWrap(neuronicNode,particularMult));} public short sizeOfNode() { return(short) signalProviders.sizeOfQueue();}} class NeuronicWrap { public static final float ONE_PARTIocULAR=1f; private NeuronicNode refNode; private float particularMult; public NeuronicWrap(NeuronicNode refNode) { super(); this.refNode=refNode; this.particularMult=ONE_PARTIocULAR;} public NeuronicWrap(NeuronicNode refNode,float particularMult) { super(); this.refNode=refNode; this.particularMult=particularMult;} public NeuronicNode getRefNode() { return refNode;} public float getParticularMult() { return particularMult;}}