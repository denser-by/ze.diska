package mydev.ccc; import java.awt.Event; import java.awt.Frame; import java.awt.Graphics; import java.awt.Image; import java.awt.Window; import mydev.aaa.Enter; import mydev.aaa.Kadr; import mydev.aaa.Okno; import mydev.aaa.Shorty; import mydev.aaa.Slip; import mydev.aaa.Stop; import mydev.bbb.Identifiable; public class COkno extends Okno implements CMove,Identifiable { short mss=500; short ww=10,hh=10,xx=10,yy=10; Internal3DPlane plane; Kadr kkadr; String name; CFrame frr; SandboxC wndd; Graphics cs1; Shorty rtt; public COkno(Internal3DPlane plane) { super(); this.plane=plane; this.rtt=Enter.instance().shorty();} public void dump() { System.out.println("BOkno "+xx+","+yy+","+ww+","+hh);} public void run() { Shorty or=Enter.instance().shorty(); while(plane !=null && kkadr !=null) { if(plane.hasCOknos()) { this.cs1=plane.getDrawGraphics(); kkadr.make(cs1,or.rev(ww,0),or.rev(hh,0)); if(!plane.hasCOknos()) plane.markRepaint();} sleep(mss);}} public String toString() { return "COkno [mss="+mss+", ww="+ww+", hh="+hh+", xx="+xx+", yy="+yy+", plane="+plane+", kkadr="+kkadr+", name="+name+", frr="+frr+", wndd="+wndd+", cs1="+cs1+", rtt="+rtt+", hi="+hi+"]";} public Image canva(short i,short e) { return plane !=null ? plane.createImage(i,e) : null;} public Okno kadr(Kadr kadr) { this.kkadr=kadr; super.kadr(kadr); return this;} public Okno size(short w,short h) { this.ww=w; this.hh=h; super.size(w,h); return this;} public Okno move(short x,short y) { this.xx=x; this.yy=y; super.move(x,y); return this;} public Slip memo() { return new Slip(""+ww+","+hh+","+xx+","+yy,name);} public void out() { this.hi=null;} private CShift hi; public void in(CShift hi) { if(!(this.hi !=null && this.hi.dx==-hi.dx && this.hi.dy==-hi.dy)) { move(rtt.rev(xx,hi.dx),rtt.rev(yy,hi.dy)); this.hi=hi; wndd.reshape(xx,yy,ww,hh);}} public boolean recall(Slip item) { String ati=new String(item.symbols()); int idx=ati.indexOf(","); if(idx < 0) return false; ww=(short) Long.parseLong(ati.substring(0,idx)); ati=ati.substring(idx+1); idx=ati.indexOf(","); if(idx < 0) return false; hh=(short) Long.parseLong(ati.substring(0,idx)); ati=ati.substring(idx+1); idx=ati.indexOf(","); if(idx < 0) return false; xx=(short) Long.parseLong(ati.substring(0,idx)); ati=ati.substring(idx+1); yy=(short) Long.parseLong(ati); return true && super.recall(item);} public Okno show(Stop op,String id) { Slip slip=Enter3D.instance().slipstream().get(id); if(slip !=null) recall(slip); if(frr==null) { this.name=id; plane.regCOkno(this,wndd=new SandboxC(frr=new CFrame(id,plane),op,this)); wndd.reshape(xx,yy,ww,hh); wndd.show(); new Thread(this).start();} else { wndd.reshape(xx,yy,ww,hh); wndd.show();} return this;} public Okno hide() { if(frr !=null) wndd.hide(); return this;} public Slip finish() { if(frr !=null) { wndd.hide(); frr.dispose(); frr=null; kkadr=null;} return memo();} public Okno delay(short ms) { this.mss=ms; super.delay(ms); return this;} public boolean lit(int x,int y) { if(x >= xx && x < xx+ww) if(y >= yy && y < yy+hh) return true; return false;} public boolean checkWndId(String wndId) { return name.equals(wndId);}} class CFrame extends Window { String id; Internal3DPlane internalPlane; public CFrame(String id,Internal3DPlane internalPlane) { super(new Frame("")); this.id=id; this.internalPlane=internalPlane;} public void dispose() {} public Image createImage(short i,short e) { return internalPlane.createImage(i,e);}} class SandboxC { Stop op; CMove in; CShift hi; Shorty rt; CFrame fre; private boolean needRepaint; public SandboxC(CFrame fre,Stop op,CMove in) { super(); this.fre=fre; this.op=op; this.in=in; this.rt=Enter.instance().shorty();} public void hide() {} public Graphics getGraphics() { return null;} public void show() {} public void reshape(short xx,short yy,short ww,short hh) { needRepaint=true;} public boolean mouseMove(Event evt,int x,int y) { return false;} public boolean mouseDrag(Event evt,int x,int y) { if(evt.metaDown() && in !=null) { if(hi==null) { hi=new CShift(rt.ext(0,x),rt.ext(0,y));} else { in.in(new CShift(rt.rev(hi.dx,x),rt.rev(hi.dy,y))); hi=new CShift(rt.ext(x,0),rt.ext(y,0));}} return false;} public boolean mouseUp(Event evt,int x,int y) { if(in !=null) { in.out(); this.hi=null;} if(evt.shiftDown() && evt.controlDown() && evt.metaDown() && op !=null) op.ka(); return false;} public boolean mouseDown(Event evt,int x,int y) { return false;} public boolean mouseEnter(Event evt,int x,int y) { return false;} public boolean mouseExit(Event evt,int x,int y) { return false;} public boolean peekRepaint() { if(needRepaint) { needRepaint=false; return true;} return false;}}