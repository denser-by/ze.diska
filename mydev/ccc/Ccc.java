package mydev.ccc; import java.awt.Color; import java.awt.Event; import java.awt.Frame; import java.awt.Graphics; import java.awt.Image; import java.awt.Point; import mydev.aaa.Aaa; import mydev.aaa.Kadr; import mydev.aaa.Longy; import mydev.aaa.Shorty; import mydev.aaa.Sleeper; import mydev.aaa.Slip; import mydev.aaa.Stop; import mydev.about.CanvasAdapter; import mydev.about.CanvasAdapterAboutImpl; import mydev.about.ColorsArray; import mydev.about.PaintAdapter; import mydev.about.PaintAdapterAboutImpl; import mydev.about.Point2D; import mydev.about.Rectangle2D; import mydev.about.Text2D; import mydev.bbb.AbstractOknoManager; import mydev.bbb.AbstractViewKadr; import mydev.bbb.Enter2; import mydev.bbb.Location; import mydev.bbb.PreviewRightPanel; import mydev.bbb.ToolbarLeftPanel; import mydev.uix.Better; import mydev.uix.GeoLayoutBuilder; import mydev.uix.Props; import mydev.uix.Timer; import mydev.uix.WidthHeight; import mydev.vutils.Queue; import mydev.vutils.TimeTracking; public class Ccc extends Frame implements Runnable,Stop { final short fin=18; static Shorty rt=Enter3D.instance().shorty(); static Longy lg=Enter3D.instance().longy(); static CSometime som=Enter3D.instance().sometime(); private WindowsBackgrounds windowsBackground=new WindowsBackgrounds(); Internal3DPlane oknosPlane3D; PreviewRightPanel topPanel; ToolbarLeftPanel leftPanel; protected Aaa app; static short[] w={ 0,230,240,250,260,199}; static short[] h={ 0,170,160,140,130,155}; static short[] x={ 0,31,311,635,924,rt.rev2(rt.rev(1366,w[5]),2)}; static short[] y={ 0,19,500,150,300,rt.rev2(rt.rev(768,h[5]),2)}; COknoManager oknoManager3D; public Ccc() { super("CccBbbAaa");} void prepare() { GeoLayoutBuilder.create().bgColor(Color.white).appendEast(topPanel=new PreviewRightPanel()).appendCenter(oknosPlane3D=new Internal3DPlane(Color.gray,Color.lightGray)).appendWest(leftPanel=new ToolbarLeftPanel(true)).build(this); oknoManager3D=new COknoManager(oknosPlane3D);} public static void main(String[] args) { Ccc main=new Ccc(); System.out.print("HelloWindWorld"); main.prepare(); main.resize((short)(800 *(1.f+1.f-.4f+.15f-.06f+0.044f-.0056f+.0465999f)),(short)(600 * 1.16667f)); main.show(); main.reMoveRnd(); main.start(); System.out.println("main!"); Sleeper sleeper=new Sleeper(); if(Props.mainLower) Thread.currentThread().setPriority(Thread.MIN_PRIORITY); while(Better.working) { main.refreshUpdatable(); TimeTracking.memTrack(); sleeper.sleep(Timer.DEF_REF_TIME);} main.ka(); main.hide(); main.dispose(); System.exit(1-1);} public boolean handleEvent(Event et) { if(et.id==Event.WINDOW_DESTROY) new Better().exitApplicationLoop(); if(et.id==Event.MOUSE_DOWN) windowsBackground.next(); if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getBtAuto()) auto(); if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getCbExt()) extInternal(leftPanel.getExternal()); if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getCbD3()) withD3(leftPanel.getD3()); if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getBtRepo()) reposition(leftPanel.getExternal()); if(et.id==Event.ACTION_EVENT && et.target==topPanel.getBtStop()) topPanel.disableStop(); if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getBtDef()) { leftPanel.getWhPanel().whReset(); reset(leftPanel.getExternal());} Object tg=et.target; if(tg !=null && tg.equals(leftPanel.getWhPanel().getTfWidth()) && et.id==Event.LOST_FOCUS) commonWidthHeightChanges(leftPanel.getWhPanel()); if(tg !=null && tg.equals(leftPanel.getWhPanel().getTfHeight()) && et.id==Event.LOST_FOCUS) commonWidthHeightChanges(leftPanel.getWhPanel()); return super.handleEvent(et);} private void commonWidthHeightChanges(WidthHeight whPanel) { short commonWidth=(short) Integer.parseInt(whPanel.getWidthTxt()); short commonHeight=(short) Integer.parseInt(whPanel.getHeightTxt()); oknoManager3D.updateCommonWidthHeightAllWindows(commonWidth,commonHeight); oknosPlane3D.performRepaint();} public void start() { reloadInternal();} private void extInternal(boolean ext) { hideAllWindows(); if(ext) reloadExternal(); else reloadInternal();} private void withD3(boolean d3) { System.out.println("reload-3D "+d3); oknosPlane3D.enableMode3D(d3); oknosPlane3D.markRepaint(); refreshUpdatable();} private void hideAllWindows() { ka();} private void reloadInternal() { som.start(); Ccc pi=(Ccc) this; oknoManager3D.saveCloseAllWindows(); oknoManager3D.reloadInternal(this);} private void reloadExternal() { app=new Aaa(); app.entrypoint();} private void reset(boolean ext) { if(ext) { hideAllWindows(); reloadInternal();} oknoManager3D.reset(); extInternal(leftPanel.getExternal()); oknosPlane3D.performRepaint();} private void reposition(boolean ext) { if(ext) repositionExternal(); else repositionInternal(); oknosPlane3D.performRepaint();} private void repositionInternal() { oknoManager3D.repositionInternal();} private void repositionExternal() { hideAllWindows(); reloadInternal(); oknoManager3D.repositionExternal(this); hideAllWindows(); reloadExternal();} public void run() { topPanel.enableStop(); Sleeper sleeper=new Sleeper(); int i; for(i=0; topPanel.hasLongTermContin() && i < fin; i++) { topPanel.setProgText(""+(fin-i)); reposition(false); sleeper.sleep((long)(2300 * 2.12));} if(topPanel.hasLongTermContin()) { topPanel.setProgText(""+(fin-i)); reset(false); sleeper.sleep((long)(2300 * 2.12));} if(topPanel.getPreview() && topPanel.hasLongTermContin()) new Better().exitApplicationLoop(); leftPanel.enableCtrls(true); topPanel.disableStop(); topPanel.setProgText("");} private void auto() { leftPanel.enableCtrls(false); new Thread(this).start();} private void refreshUpdatable() { if(oknosPlane3D.checkRepaint()) oknosPlane3D.performRepaint(); topPanel.refreshUpdatable();} protected void reMoveRnd() { Location ol=Enter2.instance().location(); Point p=ol.getRandomExternalPos((short)(800 *(1.f+1.f-.4f+.15f-.06f+0.044f-.0056f+.0465999f)),(short)(600 * 1.16667f)); move(p.x,p.y);} public void ka() { if(app !=null) { app.ka(); app=null;} else oknoManager3D.saveCloseAllWindows(); oknosPlane3D.clearBOknos(); oknosPlane3D.performRepaint(); som.stop();}} class COknoManager extends AbstractOknoManager implements Kadr { Internal3DPlane oknosPlane3D; public COknoManager(Internal3DPlane oknosPlane3D) { super(); this.oknosPlane3D=oknosPlane3D;} public void reset() { getOkno("aa1").size(Ccc.w[1],Ccc.h[1]).move(Ccc.x[1],Ccc.y[1]); getOkno("aa2").size(Ccc.w[2],Ccc.h[2]).move(Ccc.x[2],Ccc.y[2]); getOkno("aa3").size(Ccc.w[3],Ccc.h[3]).move(Ccc.x[3],Ccc.y[3]); getOkno("aa4").size(Ccc.w[4],Ccc.h[4]).move(Ccc.x[4],Ccc.y[4]); getOkno("aaa").size(Ccc.w[5],Ccc.h[5]).move(Ccc.x[5],Ccc.y[5]);} public void reloadInternal(Stop ka) { COkno cOkno; Kadr cOknoKadr=this;(cOkno=Enter3D.instance().okno(oknosPlane3D)).size(Ccc.w[1],Ccc.h[1]).move(Ccc.x[1],Ccc.y[1]).kadr(new COknoViewKadr(cOkno,cOknoKadr)).show(ka,"aa1"); addOkno(cOkno);(cOkno=Enter3D.instance().okno(oknosPlane3D)).size(Ccc.w[2],Ccc.h[2]).move(Ccc.x[2],Ccc.y[2]).kadr(new COknoViewKadr(cOkno,cOknoKadr)).show(ka,"aa2"); addOkno(cOkno);(cOkno=Enter3D.instance().okno(oknosPlane3D)).size(Ccc.w[3],Ccc.h[3]).move(Ccc.x[3],Ccc.y[3]).kadr(new COknoViewKadr(cOkno,cOknoKadr)).show(ka,"aa3"); addOkno(cOkno);(cOkno=Enter3D.instance().okno(oknosPlane3D)).size(Ccc.w[4],Ccc.h[4]).move(Ccc.x[4],Ccc.y[4]).kadr(new COknoViewKadr(cOkno,cOknoKadr)).show(ka,"aa4"); addOkno(cOkno);(cOkno=Enter3D.instance().okno(oknosPlane3D)).size(Ccc.w[5],Ccc.h[5]).move(Ccc.x[5],Ccc.y[5]).kadr(new COknoViewKadr(cOkno,new CExperiment(cOkno))).show(ka,"aaa"); addOkno(cOkno);} public void hideAllWindows() {} public void reloadExternal() {} public void make(Graphics cs1,short mx,short my) { CanvasAdapter ics=new CanvasAdapterAboutImpl(cs1,oknosPlane3D); PaintAdapter pn=new PaintAdapterAboutImpl(oknosPlane3D); Rectangle2D bg=new Rectangle2D(new Point2D(0,0),mx+1+1,my+1+1,ColorsArray.orangePoint.ic(),true); bg.toPen(ics,pn.select(bg)); Rectangle2D border=new Rectangle2D(new Point2D(0,0),mx+1+1-1,my+1+1-1,ColorsArray.magentaPoint.ic()); border.toPen(ics,pn.select(border)); String met=""+Ccc.lg.ext(Ccc.som.rlong(),System.currentTimeMillis()); short sw=(short) ics.drawTextWidth(met); short sh=(short) ics.drawTextHeight(met); Text2D content=new Text2D(new Point2D((mx-sw) / 2,(my-sh) / 2+sh / 3),met,ColorsArray.blackPoint.ic()); content.toPen(ics,pn.select(content)); Rectangle2D internal=new Rectangle2D(new Point2D((mx-sw) / 2-1,(my-sh) / 2),sw+1+1,sh,ColorsArray.magentaPoint.ic()); internal.toPen(ics,pn.select(internal));}} class CExperiment extends Shorty implements Kadr { COkno recha; public CExperiment(COkno r) { recha=r;} public void make(Graphics ics,short mx,short my) { CPlane lane=new CPlantronyx(); CSquare r; r=new CFon(rev(mx,21),rev(my,21),Color.red).ercent(rev2(mx,2),rev2(my,2)); r.impl(lane); CSimple si=new CSimple(Color.magenta); short mx2=(short)(mx+1); short my2=(short)(my+1); r=new CRama(si,mx2,my2).ercent(rev2(mx2,2),rev2(my2,2)); r.impl(lane); r=new CSimple(Color.blue,ext(0)).ercent(ext(rev2(mx,2),0),rev2(my,2)); r.impl(lane); r=new CSimple(Color.blue,ext(1)).ercent(ext(rev2(mx,2),10),rev2(my,2)); r.impl(lane); r=new CSimple(Color.blue,ext(2)).ercent(ext(rev2(mx,2),20),rev2(my,2)); r.impl(lane); r=new CSimple(Color.blue,ext(3)).ercent(ext(rev2(mx,2),30),rev2(my,2)); r.impl(lane); r=new CSimple(Color.blue,ext(4)).ercent(ext(rev2(mx,2),40),rev2(my,2)); r.impl(lane); ics.drawImage(lane.agu(recha),0,0,null);}} class CSometime extends Sleeper implements Runnable { Thread th; long doroga=11111L; public void run() { while(th !=null) { doroga+=17L; sleep(13);}} public void start() {(th=new Thread(this)).start();} public void stop() { th=null;} public short rshort() { return(short)(doroga+0);} public int rint() { return(int)(doroga-1);} public long rlong() { return(long)(doroga+1L);} public byte rbyte() { return(byte)(doroga-0);}} interface CPlane { CPlane set(short x,short y,Color c); Image agu(COkno win);} interface CSquare { CSquare impl(CPlane xy); CSquare ercent(short cx,short cy); CSquare stepb3h(); CSquare stepb6h(); CSquare stepb9h(); CSquare stepb0h(); short shor(); short sver(); short b3h(); short b6h(); short b9h(); short b0h();} interface CUdot { CUdot ins(short x,short y,Color c); short x(); short y(); Color c();} class CUdotik implements CUdot { short x,y; Color c; public CUdot ins(short xx,short yy,Color cc) { x=xx; y=yy; c=cc; return this;} public short x() { return x;} public short y() { return y;} public Color c() { return c;}} class CPlantronyx extends Shorty implements CPlane { short minx,miny,maxx,maxy; Queue ska; public CPlantronyx() { minx=miny=maxx=maxy=-1; ska=new Queue();} public CPlane set(short x,short y,Color c) { if(minx==-1 && miny==-1) { minx=maxx=x; maxx=maxy=y;} else { minx=x < minx ? x : minx; maxx=x > maxx ? x : maxx; miny=y < miny ? y : miny; maxy=y > maxy ? y : maxy;} ska.enqueueQueueRecord(new CUdotik().ins(x,y,c)); return this;} public Image agu(COkno win) { Image mage=win.canva(ext(rev(maxx,minx)),ext(rev(maxy,miny))); if(mage !=null) { Graphics ics=mage.getGraphics(); Queue iter=ska.quickQueueCopy(); while(iter.sizeOfQueue() > 0) { CUdot cur=(CUdot) iter.dequeueQueueRecord(); ics.setColor(cur.c()); ics.drawLine(cur.x(),cur.y(),cur.x(),cur.y());}} return mage;}} abstract class CDot extends Shorty implements CSquare { short cx,cy; public CDot() {} public CSquare ercent(short cxx,short cyy) { cx=cxx; cy=cyy; return this;} public CSquare stepb3h() { this.cx+=shor(); return this;} public CSquare stepb6h() { this.cy+=sver(); return this;} public CSquare stepb9h() { this.cx-=shor(); return this;} public CSquare stepb0h() { this.cy-=sver(); return this;}} class CSimple extends CDot { Color col; short dense=1; public CSimple() { this.col=Color.yellow;} public CSimple(Color col) { this.col=col;} public CSimple(Color col,short dense) { this.col=col; this.dense=dense;} public CSimple col(Color col) { this.col=col; return this;} public short shor() { return dense;} public short sver() { return dense;} public CSquare impl(CPlane pl) { short shift=rev2(dense,2); short delta=rev(dense,ext2(shift,2)); short mx=rev(cx,shift); short my=rev(cy,shift); short wx=rev(ext(cx,shift),delta==0 ? 1 : 0); short wy=rev(ext(cy,shift),delta==0 ? 1 : 0); short i=mx,j=my; while(i <= wx && j <= wy) { pl.set(i,j,col); i=ext(i); if(i > wx) { j=ext(j); i=mx;}} return this;} public short b3h() { return ext(cx,rev2(dense,2));} public short b6h() { return ext(cy,rev2(dense,2));} public short b9h() { return rev(cx,rev2(dense,2));} public short b0h() { return rev(cy,rev2(dense,2));}} class CFon extends CDot { Color col; short ww,hh; public CFon(short w,short h) { col=Color.orange; ww=w; hh=h;} public CFon(short w,short h,Color c) { col=c; ww=w; hh=h;} public CFon col(Color col) { this.col=col; return this;} public short shor() { return ww;} public short sver() { return hh;} public CSquare impl(CPlane pl) { short mx=rev(cx,rev2(ww,2)); short my=rev(cy,rev2(hh,2)); short wx=ext(mx,ww); short wy=ext(my,hh); short i=mx,j=my; while(i <= wx && j <= wy) { pl.set(i,j,col); i=ext(i); if(i > wx) { j=ext(j); i=mx;}} return this;} public short b3h() { return ext(cx,rev2(ww,2));} public short b6h() { return ext(cy,rev2(hh,2));} public short b9h() { return rev(cx,rev2(ww,2));} public short b0h() { return rev(cy,rev2(hh,2));}} class CRama implements CSquare { short b1,b2,b3,b4; CDot type; short uprava,uniz,cx,cy; public CRama(CDot type,short uprava,short uniz) { this.type=type; this.uprava=uprava; this.uniz=uniz;} public CSquare impl(CPlane pl) { short wx2=(short)(type.shor() * uprava / 2); short wy2=(short)(type.sver() * uniz / 2); type.ercent((short)(cx-wx2),(short)(cy-wy2)); short tmp; b4=type.b0h(); tmp=uprava; while(tmp--> 1) type.impl(pl).stepb3h(); b1=type.b3h(); tmp=uniz; while(tmp--> 1) type.impl(pl).stepb6h(); b2=type.b6h(); tmp=uprava; while(tmp--> 1) type.impl(pl).stepb9h(); b3=type.b9h(); tmp=uniz; while(tmp--> 1) type.impl(pl).stepb0h(); return this;} public short shor() { return(short)(type.shor() * uprava);} public short sver() { return(short)(type.sver() * uniz);} public short b3h() { return b1;} public short b6h() { return b2;} public short b9h() { return b3;} public short b0h() { return b4;} public CSquare ercent(short cxx,short cyy) { cx=cxx; cy=cyy; return this;} public CSquare stepb3h() { cx+=shor(); return this;} public CSquare stepb6h() { cy+=sver(); return this;} public CSquare stepb9h() { cx-=shor(); return this;} public CSquare stepb0h() { cy-=sver(); return this;}} class COknoFrame { short w; short h; short x; short y; short z; public boolean recall(Slip item) { String ati=new String(item.symbols()); int idx=ati.indexOf(","); if(idx < 0) return false; w=(short) Long.parseLong(ati.substring(0,idx)); ati=ati.substring(idx+1); idx=ati.indexOf(","); if(idx < 0) return false; h=(short) Long.parseLong(ati.substring(0,idx)); ati=ati.substring(idx+1); idx=ati.indexOf(","); if(idx < 0) return false; x=(short) Long.parseLong(ati.substring(0,idx)); ati=ati.substring(idx+1); y=(short) Long.parseLong(ati); return true;} public String toString() { return "COknoFrame [w="+w+", h="+h+", x="+x+", y="+y+", z="+z+"]";}} class COknoViewKadr extends AbstractViewKadr { COkno cOkno; public COknoViewKadr(COkno cOkno,Kadr kadranosecc) { super(kadranosecc); this.cOkno=cOkno;} protected Image canvaCreate(short mx,short my) { return cOkno.canva((short)(mx+1),(short)(my+1));} protected Slip getMemo() { return cOkno.memo();}} class WindowsBackgrounds { private Color first=Color.orange; private Color second=Color.orange; private int cur=0; private Color current=first; public WindowsBackgrounds() { super();} public Color getCurrent() { return current;} public void next() { cur+=1; if(cur-cur / 2 * 2==1-1) current=first; else current=second;}}