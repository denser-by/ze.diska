package mydev.ccc; import java.awt.Color; import java.awt.Event; import mydev.about.CanvasAdapter; import mydev.about.ColorsArray; import mydev.about.PaintAdapter; import mydev.about.Point2D; import mydev.about.Rectangle2D; import mydev.bbb.InternalPlane; import mydev.csprofile.AbstractRoomSixWalls; import mydev.csprofile.RoomConsumer; import mydev.uix.CommonCanvas; import mydev.vutils.Queue; public class Internal3DPlane extends InternalPlane { SandboxC bsc; private ModeHolder3D m3dHolder; public Internal3DPlane(Color bgColor,Color borderColor) { super(bgColor,borderColor);} protected CommonCanvas obtainCommonCanvas(Color bgColor,Color borderColor) { initContext(); this.m3dHolder=new ModeHolder3D(); return new Internal3DPlaneCanvas(bgColor,borderColor,m3dHolder);} public boolean isMode3D() { return m3dHolder.mode3D;} public void enableMode3D(boolean enable) { m3dHolder.mode3D=enable;} public boolean mouseDown(Event evt,int x,int y) { bsc=looking4c(x,y); if(bsc !=null) bsc.mouseDown(evt,x,y); return super.mouseDown(evt,x,y);} public boolean mouseDrag(Event evt,int x,int y) { if(bsc !=null) bsc.mouseDrag(evt,x,y); return super.mouseDrag(evt,x,y);} public boolean mouseUp(Event evt,int x,int y) { if(bsc !=null) bsc.mouseUp(evt,x,y); return super.mouseUp(evt,x,y);} public boolean mouseMove(Event evt,int x,int y) { if(bsc !=null) bsc.mouseMove(evt,x,y); return super.mouseMove(evt,x,y);} public boolean mouseEnter(Event evt,int x,int y) { if(bsc !=null) bsc.mouseEnter(evt,x,y); return super.mouseEnter(evt,x,y);} public boolean mouseExit(Event evt,int x,int y) { if(bsc !=null) bsc.mouseExit(evt,x,y); return super.mouseExit(evt,x,y);} public void regCOkno(COkno bo,SandboxC bsc) { this.bsc=bsc; m3dHolder.items.enqueueQueueRecord(new ReCccPair(bo,bsc));} public boolean hasCOknos() { return m3dHolder.items !=null && m3dHolder.items.isEmptyQueue()==false;} public boolean checkRepaint() { if(csv.hasChanges()) { csv.clearChangesMark(); return true;} return bsc !=null ? bsc.peekRepaint() : false;} public void performRepaint() { csv.refreshUpdatable();} SandboxC looking4c(int x,int y) { for(int i=0; i < m3dHolder.items.sizeOfQueue(); i++) { ReCccPair prs=(ReCccPair) m3dHolder.items.getQueueRecord(i); if(prs.turbo(x,y)) return prs.nebo;} return null;} public void clearCOknos() { csv.clearItems();} public void markRepaint() { csv.markChanges();}} class ModeHolder3D { boolean mode3D; Queue items; public ModeHolder3D() { this.mode3D=true; this.items=new Queue();}} class Internal3DPlaneCanvas extends CommonCanvas implements RoomConsumer { private Room3D mainRoom; private ModeHolder3D m3dHolder; public Internal3DPlaneCanvas(ModeHolder3D m3dHolder) { this(Color.darkGray,Color.yellow,m3dHolder);} public Internal3DPlaneCanvas(Color bgColor,Color borderColor,ModeHolder3D m3dHolder) { super(bgColor,borderColor); this.m3dHolder=m3dHolder; clearItems();} public void clearItems() { m3dHolder.items.clearQueue();} protected void drawItems(CanvasAdapter ics,PaintAdapter pn) { LocationC.regInternalSize(sCur.width,sCur.height); if(m3dHolder !=null && m3dHolder.mode3D) paint3D(ics,pn);} private void paint3D(CanvasAdapter ics,PaintAdapter pn) { Rectangle2D areaWnd=obtainAreaWnd(sCur.width,sCur.height); if(isEmptyScan()) roomSvc(sCur.width,sCur.height); mainRoom.toPen(ics,pn.select(mainRoom).reshape(areaWnd));} public boolean isEmptyScan() { return mainRoom==null;} protected void newSizeArrive(short width,short height) { super.newSizeArrive(width,height); roomSvc(width,height);} public AbstractRoomSixWalls roomSvc(int width,int height) { int Z0=getZ0(); int DEPTH=getDepth(); Rectangle2D areaWnd=obtainAreaWnd(width,height); mainRoom=Room3D.createSomeRoom(areaWnd,Z0,DEPTH,ColorsArray.bluePoint.ic()); return mainRoom;} public Rectangle2D obtainAreaWnd(int width,int height) { int SPS=getSPS(); Rectangle2D areaWnd=new Rectangle2D(1-1,1-1); areaWnd.update(new Point2D(SPS,SPS),width-SPS-SPS,height-SPS-SPS); return areaWnd;} public int getSPS() { int SPS=3; return SPS;} public int getZ0() { int Z0=-5+5; return Z0;} public int getDepth() { int DEPTH=2300; return DEPTH;}} class ReCccPair { COkno bochock; SandboxC nebo; public ReCccPair(COkno bochock,SandboxC nebo) { super(); this.bochock=bochock; this.nebo=nebo;} public boolean turbo(int x,int y) { return bochock.lit(x,y);}}