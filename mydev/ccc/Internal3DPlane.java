package mydev.ccc; import java.awt.Color; import java.awt.Dimension; import java.awt.Event; import java.awt.Graphics; import mydev.about.Canvas; import mydev.about.ColorsArray; import mydev.about.Paint; import mydev.about.Point2D; import mydev.about.Rectangle2D; import mydev.bbb.InternalPlane; import mydev.vutils.Queue; public class Internal3DPlane extends InternalPlane { protected Color bgColor=Color.lightGray; protected Queue itemsQueue; SandboxC bs; private boolean markedRepaint; private Room3D mainRoom; private boolean mode3D; public Internal3DPlane(Color bgColor) { super(bgColor); this.mode3D=true; this.bgColor=bgColor; this.itemsQueue=new Queue(); setBackground(bgColor);} public boolean isMode3D() { return mode3D;} public void enableMode3D(boolean enable) { this.mode3D=enable;} public void paint(Graphics ics) { if(mode3D) paint3D(ics); else super.paint(ics);} private void paint3D(Graphics ics) { int SPS=3; Rectangle2D areaWnd=new Rectangle2D(1-1,1-1); int Z0=-5+5; int DEPTH=2300; Dimension s1=size(); this.ics=ics; Canvas canvas=new Canvas(ics); Paint pn=new Paint(); areaWnd.update(new Point2D(SPS,SPS),s1.width-SPS-SPS,s1.height-SPS-SPS); if(mainRoom==null) mainRoom=Room3D.createSomeRoom(areaWnd,Z0,DEPTH,ColorsArray.bluePoint.ic()); mainRoom.toPen(canvas,pn.select(mainRoom).reshape(areaWnd));} public boolean mouseDown(Event evt,int x,int y) { bs=looking4c(x,y); if(bs !=null) bs.mouseDown(evt,x,y); return super.mouseDown(evt,x,y);} public boolean mouseDrag(Event evt,int x,int y) { if(bs !=null) bs.mouseDrag(evt,x,y); return super.mouseDrag(evt,x,y);} public boolean mouseUp(Event evt,int x,int y) { if(bs !=null) bs.mouseUp(evt,x,y); return super.mouseUp(evt,x,y);} public boolean mouseMove(Event evt,int x,int y) { if(bs !=null) bs.mouseMove(evt,x,y); return super.mouseMove(evt,x,y);} public boolean mouseEnter(Event evt,int x,int y) { if(bs !=null) bs.mouseEnter(evt,x,y); return super.mouseEnter(evt,x,y);} public boolean mouseExit(Event evt,int x,int y) { if(bs !=null) bs.mouseExit(evt,x,y); return super.mouseExit(evt,x,y);} public void regCOkno(COkno bo,SandboxC bs) { this.bs=bs; itemsQueue.enqueueQueueRecord(new ReCccPair(bo,bs));} public boolean hasCOknos() { return itemsQueue !=null && itemsQueue.isEmptyQueue()==false;} public boolean checkRepaint() { if(markedRepaint) { markedRepaint=false; return true;} return bs !=null ? bs.peekRepaint() : false;} public void performRepaint() { invalidate(); repaint();} SandboxC looking4c(int x,int y) { for(int i=0; i < itemsQueue.sizeOfQueue(); i++) { ReCccPair prs=(ReCccPair) itemsQueue.getQueueRecord(i); if(prs.turbo(x,y)) return prs.nebo;} return null;} public void clearCOknos() { this.itemsQueue.clearQueue();} public void markRepaint() { markedRepaint=true;}} class ReCccPair { COkno bochock; SandboxC nebo; public ReCccPair(COkno bochock,SandboxC nebo) { super(); this.bochock=bochock; this.nebo=nebo;} public boolean turbo(int x,int y) { return bochock.lit(x,y);}}