package mydev.za; import java.awt.BorderLayout; import java.awt.Button; import java.awt.Choice; import java.awt.Color; import java.awt.Component; import java.awt.Event; import java.awt.FlowLayout; import java.awt.Frame; import java.awt.GridLayout; import java.awt.Label; import java.awt.LayoutManager; import java.awt.Panel; import java.awt.Point; import java.awt.TextArea; import java.awt.TextField; import java.io.File; import java.io.IOException; import java.util.StringTokenizer; import mydev.aaa.Enter; import mydev.aaa.Sleeper; import mydev.anim.ColorsLogo; import mydev.bbb.Enter2; import mydev.bbb.Location; import mydev.uix.AbstractApproach; import mydev.uix.AbstractApproachProvider; import mydev.uix.AbstractParallelPanel; import mydev.uix.AmountPanel; import mydev.uix.AveragePanel; import mydev.uix.Better; import mydev.uix.ChoiceFactory; import mydev.uix.CommonDataArrayPanel; import mydev.uix.CommonLogPanel; import mydev.uix.CommonLogo; import mydev.uix.CommonSouthPanel; import mydev.uix.ControlsPanel; import mydev.uix.HeaderPathPanel; import mydev.uix.LabeledEditPair; import mydev.uix.LabeledPanel; import mydev.uix.ListPanel; import mydev.uix.LoggingVkusnjashki; import mydev.uix.LongTermCtrl; import mydev.uix.MultyButtonTiersBuilder; import mydev.uix.PagesPanel; import mydev.uix.Params; import mydev.uix.PieChartPanel; import mydev.uix.ProgressBar; import mydev.uix.ProgressMultiTasking; import mydev.uix.PropertySetPanel; import mydev.uix.Props; import mydev.uix.SidePanelFactory; import mydev.uix.SizePanel; import mydev.uix.Timer; import mydev.uix.ToogleMultyButton; import mydev.uix.YellowAutoButton; import mydev.vutils.AverageRec; import mydev.vutils.Data; import mydev.vutils.Ester; import mydev.vutils.ExpectHere; import mydev.vutils.Files; import mydev.vutils.Filter; import mydev.vutils.Karta; import mydev.vutils.Metr; import mydev.vutils.Order; import mydev.vutils.Queue; import mydev.vutils.ReadyFree; import mydev.vutils.Stack; import mydev.vutils.Time; import mydev.vutils.TimeTracking; import mydev.zetup.ZetUp; public class Mutil extends Frame implements Runnable { static final boolean firstPreview=1+1+1-1 > 1+1; MutilPathPanel pathPanel; LeftZetupkaPanel leftPanel; TextParallelPanel quadePanel; MutilSouthPanel southPanel; MutilLogPanel logPanel; String pathParam; String leftPanelParam; ZetupkaProcessor spCurrent; private boolean multyPathMode; public Mutil(String title) { super(title); setLayout(new BorderLayout()); setBackground(Color.gray);} public static void main(String[] args) throws IOException { Mutil main=new Mutil("Leaves Days Delivery"); if(args.length > 0) { String param=args[0]; String line=ZaInfoPanel.line(param); main.setPathParam(param); System.out.println(line); return;} else { System.out.println("Please specify source file as a parameter.");} main.show(); main.start(); main.pack(); main.reMoveRnd(); main.resize(Enter2.instance().getMainWindowsWidth(),Enter2.instance().getMainWindowsHeight()); Sleeper sleeper=new Sleeper(); if(Props.mainLower) Thread.currentThread().setPriority(Thread.MIN_PRIORITY); while(Better.working) { main.refreshUpdatable(); TimeTracking.memTrack(); sleeper.sleep(Timer.DEF_REF_TIME);} main.hide(); main.dispose(); System.exit(1-1);} public void setPathParam(String path) { this.pathParam=path; File file=new File(path); String fullPath=file.getAbsolutePath(); if(file.isDirectory()) updateInfo(null,true); else { String item=file.getName(); leftPanelParam=item; leftPanel.addItem(item,fullPath);}} protected void reMoveRnd() { Location ol=Enter2.instance().location(); Point p=ol.getRandomExternalPos((short) Location.MAIN_WINDOWS_WIDTH,(short) Location.MAIN_WINDOWS_HEIGHT); move(p.x,p.y);} public boolean hasLongTermContin() { return pathPanel.hasLongTermContin();} public boolean handleEvent(Event et) { if(et.id==Event.WINDOW_DESTROY) new Better().exitApplicationLoop(); if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getBtScan()) { leftPanel.clearAvgPanel(); updateInfo(null,true); quadePanel.clearAverage();} if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getBtStop()) pathPanel.disableStop(); if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getAaoChoice()) processAaoChoice(); if(spCurrent !=null && et.target==spCurrent.getPieChartPanel().getPieChartVertScroll()) spCurrent.getPieChartPanel().refreshUpdatableLegend(); if(spCurrent !=null) { if(et.id==Event.ACTION_EVENT && et.target==spCurrent.getPieChartPanel().getPieChartChoiceGroup()) spCurrent.getPieChartPanel().changePieChartType(); if(et.id==Event.ACTION_EVENT && et.target==spCurrent.getPieChartPanel().getPieChartChoiceDispl()) spCurrent.getPieChartPanel().changePieChartType(); if(et.id==Event.ACTION_EVENT && et.target==spCurrent.getPieChartPanel().getPieChartChoiceSort()) spCurrent.getPieChartPanel().changePieChartType();} if(et.id==Event.LIST_SELECT && leftPanel.isItemsCtrl(et.target)) { quadePanel.initSource(); if(spCurrent !=null && multyPathMode==false) spCurrent.clearSelectedItems(); spCurrent=leftSelected(); leftPanel.enableNormBtn(true); leftPanel.enableAaoChoice(true); leftPanel.enableSaveBtn(false); leftPanel.enableZetUpBtn(spCurrent.readyFork(leftPanel.getSelectedPath()));} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getNormBtn()) { spCurrent.process(false,false); leftPanel.enableNormBtn(!true); leftPanel.enableAaoChoice(true); leftPanel.enableSaveBtn(true);} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getSaveBtn()) { spCurrent.saveSourceLine(); leftPanel.enableNormBtn(false); leftPanel.enableAaoChoice(true); leftPanel.enableSaveBtn(false);} if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getChPreview()) { if(pathPanel.getPreview()) pathPanel.setPath("C:\\Users\\dzianis\\workspace\\"); else pathPanel.setPath("C:\\Users\\dzianis\\workspace\\");} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getZetUpBtn()) { String path=leftPanel.getSelectedPath(); spCurrent.burnPlan(path); leftPanel.enableNormBtn(false); leftPanel.enableSaveBtn(false); leftPanel.enableZetUpBtn(false);} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getAutoBtn()) { if(spCurrent !=null) spCurrent.clearSelectedItems(); autoLines();} return super.handleEvent(et);} private void processAaoChoice() { ZaInfoPanel.modeAllAtOnce=leftPanel.getAao();} public void run() { logPanel.prognoseTasks(1+1+(pathPanel.getPreview() ?(1+(firstPreview ? 1 : 0)) : 0)); ExpectHere eh=new ExpectHere(); updateInfo(eh,false); eh.stopUntilExpected(); ZetupkaProcessor sp; LongTermCtrl ltc=pathPanel; Sleeper sleeper=new Sleeper(); Time t=new Time(); t.start(); int size1=leftPanel.itemsNum(); if(size1 > 0) { setMultyPathMode(true); if(firstPreview && pathPanel.getPreview()) preview(sleeper,size1,ltc); processItems(ltc,sleeper,size1); while(quadePanel.hasInProgress()) { sleeper.sleep(166); System.out.print("SLEEP_2");} System.out.println(""); if(pathPanel.getPreview()) { preview(sleeper,size1,ltc); pathPanel.setPreview(false); sleeper.sleep(166 * 2); new Better().exitApplicationLoop();} setMultyPathMode(!true);} t.trust(); logPanel.addLogComplete("Average records("+quadePanel.getAverageRec().getRecordsNum()+") processing time is "+quadePanel.getAverageRec().getAverageTime()+"s also min time is "+quadePanel.getAverageRec().getMinTime()+"s and max time is "+quadePanel.getAverageRec().getMaxTime()+"s"); logPanel.addLogComplete("Auto OneLine transform complete "+t.ess()); pathPanel.getBtScan().enable(true); pathPanel.enablePreview(true); pathPanel.disableStop(); leftPanel.enableAaoChoice(true); leftPanel.enableAutoBtn(true); leftPanel.enableCtrls(true); leftSelected();} private void setMultyPathMode(boolean enable) { multyPathMode=enable;} private void processItems(LongTermCtrl ltc,Sleeper sleeper,int size1) { MutilProcTask previewTask=new MutilProcTask(leftPanel,quadePanel,logPanel,sleeper,size1,ltc,multyPathMode); logPanel.regTreckableTask(previewTask); previewTask.run(); spCurrent=previewTask.getProcessor();} private void preview(Sleeper sleeper,int size1,LongTermCtrl ltc) { MutilPreviewTask previewTask=new MutilPreviewTask(leftPanel,quadePanel,logPanel,sleeper,size1,ltc,multyPathMode); logPanel.regTreckableTask(previewTask); previewTask.run();} protected void autoLines() { leftPanel.getControlsPanel().getNormSavePanel().enableCtrls(false); pathPanel.getBtScan().enable(false); pathPanel.enablePreview(false); pathPanel.enableStop(); leftPanel.enableAaoChoice(false); leftPanel.enableCtrls(false); new Thread(this).start();} protected void start() { this.southPanel=new MutilSouthPanel(); this.logPanel=southPanel.getLogPanel(); this.pathPanel=new MutilPathPanel(pathParam); add("North",pathPanel.getWrapPanel()); add("West",leftPanel=new LeftZetupkaPanel()); cRemake(); add("South",southPanel); if(leftPanelParam !=null) { leftPanel.selectItem(0); leftPanel.setAmount("1"); leftPanel.setSize(""+new File(pathParam).length()); spCurrent=(ZaInfoPanel) quadePanel.getFirst(); spCurrent.readSource(leftPanelParam,pathParam,"","",0); spCurrent.process(false,true); leftPanel.enableSaveBtn(true);}} void cRemake() { if(quadePanel !=null) remove(quadePanel); add("Center",quadePanel=TextParallelPanel.create(false,logPanel));} protected void refreshUpdatable() { leftPanel.updateOnUiThread(quadePanel.getAverageRec()); southPanel.refreshUpdatable(); leftPanel.enableZetUpBtn(); pathPanel.refreshUpdatable();} protected void updateInfo(ExpectHere eh,boolean opSingle) { String path=pathPanel.getPath(); pathPanel.enableStop(); leftPanel.clearItems(); quadePanel.initSource(); leftPanel.setPosition(""); leftPanel.dropBtnSkipPosition(); if(spCurrent !=null) { spCurrent.getPieChartPanel().clearItems(); spCurrent.clearSelectedItems();} ScanZetupkaLeftTask scanZetupkaLeft=new ScanZetupkaLeftTask(leftPanel,path,logPanel,eh,opSingle,pathPanel); logPanel.regTreckableTask(scanZetupkaLeft); new Thread(scanZetupkaLeft).start();} protected ZetupkaProcessor leftSelected() { ZetupkaProcessor sp=leftPanel.leftSelected(logPanel,quadePanel); return sp;}} class MutilSouthPanel extends CommonSouthPanel { MutilLogPanel logPanel; ColorsLogo logoPanel; public MutilSouthPanel() { super();} protected CommonLogo obtainLogo() { logoPanel=new ColorsLogo(); return logoPanel;} protected CommonLogPanel obtainLogPanel() { logPanel=new MutilLogPanel(); return logPanel;} public MutilLogPanel getLogPanel() { return logPanel;}} class MutilLogPanel extends CommonLogPanel implements LoggingVkusnjashki { public MutilLogPanel() { super(false);} protected ProgressBar obtainProgressBarCurrent() { ProgressBar progressBar=new ProgressBar(ProgressBar.DEF_HEIGHT,Props.borderProgressColor,Props.bgProgressColor,Props.mainProgressColor,true); return progressBar;} protected ProgressBar obtainProgressBarTotal() { return new ProgressBar(ProgressBar.DEF_HEIGHT,Props.borderProgressTotalColor,Props.bgProgressTotalColor,Props.mainProgressTotalColor,true);} public Color getPanelBgColor() { return Props.bgLogPanelColor;} public LayoutManager getPanelLayout() { return new BorderLayout();} public LoggingVkusnjashki getLogging() { return(LoggingVkusnjashki)(this);}} class MutilPathPanel extends HeaderPathPanel implements LongTermCtrl { private String pathParam; public MutilPathPanel(String pathParam) { super("Leaves Days Delivery",true,false,LabeledPanel.DEF_MIN_SIZE,Props.northBgColor,Props.northBorderColor,Props.northTextColor); this.pathParam=pathParam;} public boolean hasLongTermContin() { return longTermOp;} protected ToogleMultyButton obtainMultyButton() { return null;} protected Label obtainLbPath() { Label lbPath=new Label("Source location:"); lbPath.setForeground(Color.black); return lbPath;} protected TextField obtainTfPath() { TextField tfPath=new TextField("",50+20+10+5-30-20+5); tfPath.setText("C:\\Users\\dzianis\\workspace\\Architecho\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\"); tfPath.setText("C:\\Users\\dzianis\\workspace2\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\"); if(pathParam !=null) tfPath.setText(pathParam); return tfPath;} protected void buildPanel() { buildPath();} public Color getPanelBgColor() { return Props.bgTopColor;}} class ZetupkaPagesPanel extends PagesPanel { public ZetupkaPagesPanel() { super(MutilProps.listPanelPageSize);} public Color getPanelBgColor() { return MutilProps.bgPagesPanelColor;}} class LeftZetupkaPanel extends CommonDataArrayPanel { ListPanel listPanel; LeftZaControlsPanel controlsPanel; SizePanel sizePanel; AveragePanel avgPanel; private Queue leftItemsQueue=new Queue(); public LeftZetupkaPanel() { super();} public Choice getAaoChoice() { return controlsPanel.getAaoChoice();} public boolean getAao() { return controlsPanel.getAao();} public Color getPanelBgColor() { return Props.bgSideColor;} protected Color getWrapPanelColor() { return Props.bgStatPanelColor;} public LeftZaControlsPanel getControlsPanel() { return controlsPanel;} protected Panel obtainControlsPanel() { this.controlsPanel=new LeftZaControlsPanel(); return controlsPanel;} protected SizePanel obtainSizePanel() { this.sizePanel=SidePanelFactory.createTotalSizePanel(); return sizePanel;} protected AveragePanel obtainAveragePanel() { this.avgPanel=SidePanelFactory.createUsualAveragePanel(); return avgPanel;} protected ListPanel obtainListPanel() { this.listPanel=new ListPanel(new StatZetupkaPanel(),new ZetupkaPagesPanel()); return listPanel;} public ZetupkaProcessor leftSelected(LoggingVkusnjashki logPanel,TextParallelPanel quadePanel) { int idxSel=getSelectedIdx(); String curSel=getItemSelected(); String path=getSelectedPath(); logPanel.addLog("Selected item "+path); ZetupkaProcessor sp=(ZaInfoPanel) quadePanel.assignSource(curSel,path,"","",idxSel); setPosition(""+(idxSel+1)); return sp;} public void dropBtnSkipPosition() { controlsPanel.dropBtnSkipPosition();} public Button getAutoBtn() { return controlsPanel.getNormSavePanel().getBtAuto();} public Button getZetUpBtn() { return controlsPanel.getNormSavePanel().getBtZetUp();} public Button getSaveBtn() { return controlsPanel.getNormSavePanel().getBtSave();} public Button getNormBtn() { return controlsPanel.getNormSavePanel().getBtNorm();} public void enableZetUpBtn(boolean enable) { controlsPanel.getNormSavePanel().getBtZetUp().enable(enable);} public void enableAaoChoice(boolean enable) { controlsPanel.getAaoChoice().enable(enable);} public void enableZetUpBtn() { boolean enable=itemsNum() > 0 && getSelectedIdx() >-1; controlsPanel.getNormSavePanel().getBtZetUp().enable(enable);} public void enableSaveBtn(boolean enable) { controlsPanel.getNormSavePanel().getBtSave().enable(enable);} public void enableNormBtn(boolean enable) { controlsPanel.getNormSavePanel().getBtNorm().enable(enable);} public void enableCtrls(boolean enable) { listPanel.listEnable(enable);} public String getItemSelected() { String fullPath=getSelectedPath(); return new Ester(fullPath).sub(1+(new Ester(fullPath).indexX('/') > new Ester(fullPath).indexX('\\') ? new Ester(fullPath).indexX('/') : new Ester(fullPath).indexX('\\'))).toString();} public String getSelectedPath() { int idxSel=listPanel.getSelectedIndex(); String path=(String) leftItemsQueue.getQueueRecord(idxSel); return path;} public void clearItems() { listPanel.clearItems(); leftItemsQueue.clearQueue();} public void updateOnUiThread(AverageRec mar) { avgPanel.updateMinMaxAvg(mar);} public void addItem(String item,String fullPath) { listPanel.addItem(item); leftItemsQueue.enqueueQueueRecord(fullPath);} public void enableAutoBtn(boolean enable) { controlsPanel.getNormSavePanel().getBtAuto().enable(enable);}} class BurnRequestPanel extends PropertySetPanel { public BurnRequestPanel(Color bgColor,LabeledEditPair[] pairs) { super(bgColor,pairs);} public static Panel create(ChoiceFactory choiceFact) { LabeledEditPair[] pairs=new LabeledEditPair[1]; pairs[1-1]=new LabeledEditPair("Burn request",choiceFact.getChCases()); BurnRequestPanel psp=new BurnRequestPanel(MutilProps.bgCtrlPanelColor,pairs); return psp.createPanelColorfullWrap(psp.cookingLabels(MutilProps.bgSizePanelColor,MutilProps.textChartPanelColor,MutilProps.bgChartPanelColor),MutilProps.bgCtrlPanelColor);} Panel createPanelColorfullWrap(Component comp,Color wrapColor) { LabeledPanel ignorePanelWrap=new LabeledPanel("",comp,LabeledPanel.DEF_WRAP_SIZE,wrapColor,wrapColor,wrapColor,false,true,true,true); return ignorePanelWrap;}} class MutilProps extends Props { final static String ALL_AT_ONCE="All-at-Once"; final static String CHOSEN="Chosen";} class LeftZaControlsPanel extends Panel { ChoiceFactory aaoChoiceFactory; LeftNormSaveBtnPanel normSavePanel; Panel setsPanel; public LeftZaControlsPanel() { super(); String[] variants=new String[1+1]; variants[1-1]=MutilProps.ALL_AT_ONCE; variants[1]=MutilProps.CHOSEN; aaoChoiceFactory=new ChoiceFactory(variants,1-1); MultyButtonTiersBuilder.create().appendPanel(setsPanel=BurnRequestPanel.create(aaoChoiceFactory)).appendControlsPanel(normSavePanel=new LeftNormSaveBtnPanel()).build(this);} public Panel getSetsPanel() { return setsPanel;} public Choice getAaoChoice() { return aaoChoiceFactory.getChCases();} public boolean getAao() { return aaoChoiceFactory.isSelected(MutilProps.ALL_AT_ONCE);} public void dropBtnSkipPosition() { getAaoChoice().enable(false); normSavePanel.dropBtnSkipPosition();} public LeftNormSaveBtnPanel getNormSavePanel() { return normSavePanel;}} class LeftNormSaveBtnPanel extends ControlsPanel { final static String BT_NORM="btNorm"; final static String BT_SAVE="btSave"; final static String BT_BURN="btZetUp"; public LeftNormSaveBtnPanel() { super();} public LayoutManager getPanelLayout() { return new FlowLayout(FlowLayout.CENTER,1+1,1+1);} public Button getBtNorm() { return(Button) getCtrl(BT_NORM);} public Button getBtSave() { return(Button) getCtrl(BT_SAVE);} public Button getBtZetUp() { return(Button) getCtrl(BT_BURN);} public Button getBtAuto() { return getAutoBtn().getBtAuto();} public Color getPanelBgColor() { return Props.bgCtrlPanelColor;} protected void buildPanel() { append(BT_NORM,new Button("Norm")); append(BT_SAVE,new Button("Save")); append("checkAutoConf",new CheckAutoConf()); append(BT_BURN,new Button("Burn"));} public void enableCtrls(boolean enable) {((Button) getCtrl(BT_NORM)).enable(enable);((Button) getCtrl(BT_SAVE)).enable(enable); getAutoBtn().enableCtrl(enable);((Button) getCtrl(BT_BURN)).enable(enable);}} class CheckAutoConf extends YellowAutoButton { public CheckAutoConf() { super();}} class StatZetupkaPanel extends AmountPanel { public StatZetupkaPanel() { super("zetupka","item(s)");} public Color getPanelBgColor() { return Props.bgAmountPanelColor;} protected int getPosWidth() { return super.getPosWidth()-1-1;} protected int getAmountWidth() { return super.getAmountWidth()-1-1;}} class ScanZetupkaLeftTask extends ProgressMultiTasking { LeftZetupkaPanel leftPanel; MutilLogPanel logPanel; MutilPathPanel pathPanel; private String path; private Metr amount=new Metr(); private Metr size=new Metr(); private ExpectHere expectHere; private boolean opSingle; public ScanZetupkaLeftTask(LeftZetupkaPanel leftPanel,String path,MutilLogPanel logPanel,ExpectHere eh,boolean opSingle,MutilPathPanel pathPanel) { super(); this.leftPanel=leftPanel; this.path=path; this.logPanel=logPanel; this.expectHere=eh; this.opSingle=opSingle; this.pathPanel=pathPanel;} public LeftZetupkaPanel getLeftPanel() { return leftPanel;} public MutilLogPanel getLogPanel() { return logPanel;} public String getPath() { return path;} public Metr getAmount() { return amount;} public Metr getSize() { return size;} void displayAmount(Metr m) { Ester repr=m.repr(' '); leftPanel.setAmount(new Ester("0").eq(repr) ? "" : repr.toString());} void displaySize(Metr m) { Ester repr=m.repr(','); leftPanel.setSize(new Ester("0").eq(repr) ? "" : repr.toString());} protected void performTask() { Time t=new Time(); t.start(); updateStat(); scanItems(path,"zetupka"); t.trust(); logPanel.addLogComplete("Source scan complete "+t.ess()); leftPanel.enableAaoChoice(true==opSingle); leftPanel.enableAutoBtn(true==opSingle); if(opSingle) pathPanel.disableStop(); if(expectHere !=null) expectHere.markAsReached();} protected void updateStat() { Metr m=new Metr(0); m.inc(amount); displayAmount(m); m=new Metr(0); m.inc(size); displaySize(m);} protected void scanItems(String path,String ext) { Ester[] start=new Files().tree(new Ester(path)); Ester[] select=new Filter().endsWithIncensitive(start,new Ester(ext)); Ester[] selectNames=new Filter().cutStart(select,new Ester(path)); for(int i=0; i < select.length && pathPanel.hasLongTermContin(); i++) { leftPanel.addItem(selectNames[i].toString(),select[i].toString()); amount.inc(1); size.inc(new File(select[i].toString()).length()); updateStat(); recountComplete(i+1,select.length);}}} class ZaCommand { public final static int ID_READY=1; public final static int ID_INIT=1+1; public final static int ID_READ_SOURCE=1+1+1; public final static int ID_ONELINE=1+1+1+1; public final static int ID_SAVE_SOURCE=1+1+1+1+1; private int id; protected boolean complete; ZaCommand(int id) { super(); this.id=id; this.complete=false;} public static ZaCommand create(int cmdId) { ZaCommand cmd=null; switch(cmdId) { case ID_READY : case ID_INIT : cmd=new ZaCommand(cmdId); break;} return cmd;} public int getId() { return id;} public boolean isComplete() { return complete;}} class ReadZaCommand extends ZaCommand { private String name; private String path; public ReadZaCommand(String name,String path) { super(ID_READ_SOURCE); this.name=name; this.path=path;} public String getName() { return name;} public String getPath() { return path;}} class ProcessZaCommand extends ZaCommand { private boolean needSave; private boolean needClear; private ReadyFree readyFree; public ProcessZaCommand(boolean needSave,ReadyFree readyFree,boolean needClear) { super(ID_ONELINE); this.needSave=needSave; this.readyFree=readyFree; this.needClear=needClear;} public ReadyFree getReadyFree() { return readyFree;} public boolean isNeedSave() { return needSave;} public boolean isNeedClear() { return needClear;}} class SaveZaCommand extends ZaCommand { private ReadyFree readyFree; public SaveZaCommand(ReadyFree readyFree) { super(ID_SAVE_SOURCE); this.readyFree=readyFree;} public ReadyFree getReadyFree() { return readyFree;}} interface ZetupkaProcessor { boolean isReadyFree(); PieChartPanel getPieChartPanel(); void clearSelectedItems(); void sortSelectedItems(); void readSource(String name,String path,String looking,String relPath,int idxSel); void process(boolean needSave,boolean needClear); void saveSourceLine(); void burnPlan(String incomingPath); boolean readyFork(String incomingPath);} class CommandQueue { private Queue itemsQueue=new Queue(); public CommandQueue() { super();} public void push(ZaCommand cmd) { itemsQueue.enqueueQueueRecord(cmd);} public boolean hasSomeWork() { return itemsQueue.isEmptyQueue()==false;} public ZaCommand nextCurrent() { ZaCommand cmd=(ZaCommand) itemsQueue.dequeueQueueRecord(); return cmd;}} class SourceNamePanel extends Panel { TextField tfSrcName; TextField tfRelPath; public SourceNamePanel() { super(); setLayout(new BorderLayout()); setBackground(Color.lightGray); add2("West",tfSrcName=new TextField(12-1-1-1-1-1-1-1+5+5+5+5-5-5-5-5)); add("Center",tfRelPath=new TextField()); tfSrcName.setEditable(false); tfRelPath.setEditable(false);} private void add2(String location,TextField field) {} public TextField getTfSrcName() { return tfSrcName;} public TextField getTfRelPath() { return tfRelPath;} public void setSrcName(String txt) { tfSrcName.setText(txt);} public void setRelPath(String txt) { tfRelPath.setText(txt);}} class ZetupkaPanel extends Panel { LabeledEditPair leMezto; LabeledEditPair leFiles; public ZetupkaPanel() { super(); setBackground(Props.bgStatPanelColor); setLayout(new GridLayout(1,1+1+1-1)); add(leMezto=cookingLabel(new LabeledEditPair("mezto=","",false,20 / 5,false))); add(leFiles=cookingLabel(new LabeledEditPair("files=","",false,5 * 5,false)));} protected LabeledEditPair cookingLabel(LabeledEditPair labeledEditPair) { labeledEditPair.setPanelBgColor(Props.bgStatPanelColor); labeledEditPair.getLbName().setBackground(Color.white); return labeledEditPair;} public LabeledEditPair getLeMezto() { return leMezto;} public LabeledEditPair getLeFiles() { return leFiles;} public MeztoFiles setZetupka(String content,String zetupkaPath,FilePathAcceptor acceptor) { if(content==null) content=""; Zetupka zt=new Zetupka().loadLines(content); MeztoFiles mf=new MeztoFiles(); ZetupkaLine[] meztoLines=zt.getLines(LineType.TypeMezto); mf.setMezto(meztoLines.length); leMezto.setText(mf.meztoText()); mf.setFiles(0); ZetupkaLine[] zl0=zt.getLines(LineType.TypeFiles); for(int i=0; i < zl0.length; i++) { String meztoPath=extractMeztoPath(meztoLines,i); String filesRecord=zl0[i].getContent().toString().trim(); String line=new Data().replace(new Ester(filesRecord),new Ester("files= "),new Ester("")).toString(); if(line.length() > 0) mf.filesIncrement(); Ester curFile=new Ester(""); for(int j=0; j < line.length(); j++) { char ch=line.charAt(j); if(ch==' ') { mf.filesIncrement(); mf.regName(zetupkaPath,curFile.toString(),meztoPath,acceptor); curFile=new Ester("");} else curFile.append(ch);} if(curFile.length() > 0) mf.regName(zetupkaPath,curFile.toString(),meztoPath,acceptor);} leFiles.setText(mf.filesText()); return mf;} private String extractMeztoPath(ZetupkaLine[] meztoLines,int i) { String meztoPath=meztoLines[i].getContent().toString().trim(); meztoPath=new Data().replace(new Ester(meztoPath),new Ester("mezto= "),new Ester("")).toString(); return meztoPath;}} class MeztoFiles { private int iMezto; private int iFiles; private Queue filesQueue; private Karta exts; public MeztoFiles() { this.filesQueue=new Queue(); this.exts=new Karta();} public void regName(String zetupkaPath,String name,String meztoPath,FilePathAcceptor acceptor) { filesQueue.enqueueQueueRecord(name); String fExt=getExt(name); MeztoFilesRec has=(MeztoFilesRec) exts.get(fExt); if(has==null) exts.put(fExt,has=new MeztoFilesRec(fExt,1)); else exts.put(fExt,has.amountIncr()); has.totalSizeIncr(getSize(zetupkaPath,name,meztoPath,acceptor));} private long getSize(String zetupkaPath,String name,String meztoPath,FilePathAcceptor acceptor) { String filePath=new Data().replace(new Ester(zetupkaPath),new Ester("zetupka"),new Ester("")).toString()+name; long size1=new File(filePath).length(); acceptor.acceptPath(filePath,size1,meztoPath+name); return size1;} private String getExt(String name) { String result; Ester parse=new Ester(name); long last=parse.indexX('.'); if(last >= 0) result=parse.sub(last).toString(); else result=parse.toString(); return result;} public String meztoText() { return iMezto > 0 ? ""+iMezto : "";} public String filesText() { return iFiles > 0 ? ""+iFiles : "";} public void setMezto(int iMezto) { this.iMezto=iMezto;} public void setFiles(int iFiles) { this.iFiles=iFiles;} public int filesIncrement() { return++iFiles;} public void appendItems(PieChartPanel pieChartPanel) { String[] extNames=exts.keys(); if(extNames !=null && extNames.length > 0) { for(int i=0; i < extNames.length; i++) { String name=extNames[i]; if(name !=null) { MeztoFilesRec rec=(MeztoFilesRec) exts.get(name); pieChartPanel.appendItem(name,rec.getAmount(),rec.getTotalSize());}}}}} interface FilePathAcceptor { void acceptPath(String srcPath,long size1,String meztoPath); void clearItems(); void sortItems();} class MeztoFilesRec { private String recName; private int amount; private long totalSize; public MeztoFilesRec(String recName,int amount) { this.amount=amount;} public MeztoFilesRec totalSizeIncr(long size1) { totalSize+=size1; return this;} public MeztoFilesRec amountIncr() { amount+=1; return this;} public String getRecName() { return recName;} public int getAmount() { return amount;} public long getTotalSize() { return totalSize;}} class ZetupkaInfoPanel extends Panel { SourceNamePanel sourceNamePanel; TextArea taSource; ZetupkaPanel zp; public ZetupkaInfoPanel() { setLayout(new BorderLayout()); setBackground(Color.lightGray); add("North",sourceNamePanel=new SourceNamePanel()); add("Center",taSource=new TextArea()); add("South",zp=new ZetupkaPanel()); taSource.setEditable(false);} public SourceNamePanel getSourceNamePanel() { return sourceNamePanel;} public ZetupkaPanel getZp() { return zp;} public TextArea getTaSource() { return taSource;}} class ZaItemsFooterPanel extends Panel { LabeledEditPair leAmount; LabeledEditPair leSize; public ZaItemsFooterPanel() { setLayout(new FlowLayout(FlowLayout.CENTER,1-1,1-1)); setBackground(Color.lightGray); leAmount=new LabeledEditPair("Num.:","0",false,5-1,false); add(leAmount); leSize=new LabeledEditPair("Size:","0",false,5+5,false); add(leSize);} public void setAmount(int amount) { leAmount.setText(new Metr(amount).repr(' ').toString());} public void setTotalSize(long totalSize) { leSize.setText(new Metr(totalSize).repr(',').toString());}} class ZaItemsBurnPanel extends Panel implements FilePathAcceptor { public static final String SORTING="Sorting..."; TextArea taItems; ZaItemsFooterPanel footer; private Ester curRecord; private int amount; private long totalSize; private Karta pathRegistry; private Stack pstack; public ZaItemsBurnPanel() { super(); setLayout(new BorderLayout()); setBackground(Color.darkGray); add("Center",taItems=new TextArea(32,32)); taItems.setEditable(false); add("South",footer=new ZaItemsFooterPanel()); clearItems();} public void acceptPath(String srcPath,long size1,String meztoPath) { if(pathRegistry.get(meztoPath)==null) { pathRegistry.put(meztoPath,""+size1); pstack.push(meztoPath); curRecord=new Ester(meztoPath).append('\n').append(curRecord); taItems.setText(curRecord.toString()); amount+=1; totalSize+=size1; footer.setAmount(amount); footer.setTotalSize(totalSize);} else pathRegistry.put(meztoPath,""+size1);} public TextArea getTaItems() { return taItems;} public void clearItems() { taItems.setText(""); curRecord=new Ester(""); amount=0; totalSize=0; pathRegistry=new Karta(); pstack=new Stack(); footer.setAmount(amount); footer.setTotalSize(totalSize);} public void sortItems() { taItems.setText(SORTING); new Sleeper().sleep(2000); Object[] stackRecordsArray=pstack.getStackRecordsArray(); String[] asc=new String[stackRecordsArray.length]; for(int i=0; i < asc.length; i++) asc[i]=(String) stackRecordsArray[i]; new Order().order(asc); curRecord=new Ester(""); for(int i=0; i < asc.length; i++) { curRecord=new Ester(asc[asc.length-1-i]).append('\n').append(curRecord); taItems.setText(curRecord.toString());}}} class ZaCommonBurnPanel extends Panel { PieChartPanel pieChartPanel; ZaItemsBurnPanel itemsBurnPanel; public ZaCommonBurnPanel() { super(); setLayout(new BorderLayout()); setBackground(Props.bgStatPanelColor); add("Center",createPanelColorfullWrap(pieChartPanel=new PieChartPanel(),Props.bgStatPanelColor,true)); add("East",createPanelColorfullWrap(itemsBurnPanel=new ZaItemsBurnPanel(),Props.bgStatPanelColor,!true));} private Panel createPanelColorfullWrap(Component comp,Color wrapColor,boolean f2) { LabeledPanel ignorePanelWrap=new LabeledPanel("",comp,LabeledPanel.DEF_WRAP_SIZE,wrapColor,wrapColor,wrapColor,f2,!true,true,true); return ignorePanelWrap;} public PieChartPanel getPieChartPanel() { return pieChartPanel;} public ZaItemsBurnPanel getItemsBurnPanel() { return itemsBurnPanel;}} class ZaInfoPanel extends AbstractApproach implements ZetupkaProcessor { ZetupkaInfoPanel infoPanel; ZaCommonBurnPanel commonBurnPanel; LoggingVkusnjashki logPanel; private String name; private String path; private ReadyFree readyFree; private CommandQueue cq=new CommandQueue(); static boolean modeAllAtOnce=true; public ZaInfoPanel(LoggingVkusnjashki logPanel) { super(); setLayout(new BorderLayout()); setBackground(Color.lightGray); this.logPanel=logPanel; add("North",infoPanel=new ZetupkaInfoPanel()); add("Center",commonBurnPanel=new ZaCommonBurnPanel()); this.readyFree=new ReadyFree();} public ZetupkaInfoPanel getInfoPanel() { return infoPanel;} public PieChartPanel getPieChartPanel() { return commonBurnPanel.getPieChartPanel();} public void clearSelectedItems() { commonBurnPanel.getItemsBurnPanel().clearItems();} public void sortSelectedItems() { commonBurnPanel.getItemsBurnPanel().sortItems();} public String getName() { return name;} public String getPath() { return path;} public LoggingVkusnjashki getLogPanel() { return logPanel;} public boolean isReadyFree() { return readyFree.isFree();} public void doIt(Params params) { if(params !=null) { if(params.areYou(TextParallelPanel.CMD_READ_SRC)) readSource(params.getParam("name"),params.getParam("path"),params.getParam("looking"),params.getParam("relPath"),params.getParamInteger("idxSel").intValue());}} public void clearPanel() {} public void readSource(String name,String path,String looking,String relPath,int idxSel) { ZaCommand cmd=new ReadZaCommand(name,path); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} public void process(boolean needSave,boolean needClear) { readyFree.setBusy(); ZaCommand cmd=new ProcessZaCommand(needSave,readyFree,needClear); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} public void saveSourceLine() { ZaCommand cmd=new SaveZaCommand(readyFree); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} public boolean readyFork(String incomingPath) { String content=""; try { content=loadSource(incomingPath);} catch(IOException e) { e.printStackTrace();} return new Zetupka().loadLines(content).isReadyFork();} public void burnPlan(String incomingPath) { ExpectHere eh=new ExpectHere(5 / 4); new ZetUpBurner(incomingPath,eh,logPanel).burn();} public static String line(String path) throws IOException { String content=loadSource(path); return new Zetupka().ambu(content);} public static String loadSource(String path) throws IOException { return new Ester("").append(Enter.instance().io().read(path)).toString();} private void interpret(ZaCommand cmd) { switch(cmd.getId()) { case ZaCommand.ID_READY : break; case ZaCommand.ID_INIT : break; case ZaCommand.ID_READ_SOURCE : readSource((ReadZaCommand) cmd); break; case ZaCommand.ID_ONELINE : oneLineTansform((ProcessZaCommand) cmd); break; case ZaCommand.ID_SAVE_SOURCE : oneLineSave(((SaveZaCommand) cmd).getReadyFree()); break;}} private void readSource(ReadZaCommand cmd) { name=cmd.getName(); infoPanel.getSourceNamePanel().setSrcName(name); path=cmd.getPath(); infoPanel.getSourceNamePanel().setRelPath(path); String source=""; if(path !=null && path.length() > 0) try { source=loadSource(path);} catch(IOException ex) { System.out.println("Can't read "+path+" . "+ex.getMessage()); ex.printStackTrace(); logPanel.addLog("Can't read "+path+" . "+ex.getMessage());} infoPanel.getTaSource().setText(source); MeztoFiles mf=infoPanel.getZp().setZetupka(source,path,commonBurnPanel.getItemsBurnPanel()); commonBurnPanel.getPieChartPanel().clearItems(); mf.appendItems(commonBurnPanel.getPieChartPanel()); commonBurnPanel.getPieChartPanel().changePieChartType();} private void oneLineTansform(ProcessZaCommand cmd) { ar.start(); logPanel.addLog("Starting "+path); try { String source=line(path); infoPanel.getTaSource().setText(source); infoPanel.getZp().setZetupka(source,path,commonBurnPanel.getItemsBurnPanel()); logPanel.addLog("zetupka transformation complete "+name); if(cmd.isNeedSave()) oneLineSave(cmd.getReadyFree()); else cmd.getReadyFree().setFree(); if(cmd.isNeedClear()) { infoPanel.getTaSource().setText(""); infoPanel.getZp().setZetupka("",path,commonBurnPanel.getItemsBurnPanel()); infoPanel.getSourceNamePanel().setSrcName(""); infoPanel.getSourceNamePanel().setRelPath("");}} catch(IOException ex) { System.out.println("Can't transform "+path+" . "+ex.getMessage()); ex.printStackTrace(); logPanel.addLog("Can't transform "+path+" . "+ex.getMessage());} ar.trust();} private void oneLineSave(ReadyFree readyFree) { String content=infoPanel.getTaSource().getText(); logPanel.addLog("Save line with "+new Metr(content.length()).repr(',')+" byte(s) to "+path); try { new Data().write(path,new Ester(content)); logPanel.addLog(""+name+" complete"); readyFree.setFree();} catch(IOException ex) { System.out.println("Can't write "+path+" . "+ex.getMessage()); ex.printStackTrace(); logPanel.addLog("Can't write "+path+" . "+ex.getMessage());}} public void run() { while(Better.working) { if(cq.hasSomeWork()) { ZaCommand cmd=cq.nextCurrent(); interpret(cmd);} sleeper.sleep(5 * 5);}}} class TextApproachProvider implements AbstractApproachProvider { LoggingVkusnjashki logging; public TextApproachProvider(LoggingVkusnjashki logging) { super(); this.logging=logging;} public AbstractApproach provideApproach() { return new ZaInfoPanel(logging);}} class TextParallelPanel extends AbstractParallelPanel { static final String CMD_INIT_SRC="initSource"; static final String CMD_READ_SRC="readSource"; static LoggingVkusnjashki logging; TextParallelPanel(int nWidth,int nHeight) { super(nWidth,nHeight);} public void initSource() { Params params=new Params(CMD_INIT_SRC); params.addParam("name",""); params.addParam("path",""); doAllQuick(params);} public ZaInfoPanel assignSource(String name,String path,String looking,String relPath,int idxSel) { Params params=new Params(CMD_READ_SRC); params.addParam("name",name); params.addParam("path",path); params.addParam("looking",looking); params.addParam("relPath",relPath); params.addParam("idxSel",new Integer(idxSel)); AbstractApproach abstractApproach=doFirstAvail(params); return(ZaInfoPanel) abstractApproach;} public static TextParallelPanel create(boolean quade,LoggingVkusnjashki logPanel) { if(logPanel !=null) TextParallelPanel.logging=logPanel; return quade ? new TextParallelPanel(2,1) : new TextParallelPanel(1,1);} protected AbstractApproachProvider obtainProvider() { return new TextApproachProvider(logging);}} class ZetUpBurner extends ZetUp implements Runnable { String incomingPath; ExpectHere eh; String copyFileReq; LoggingVkusnjashki logPanel; public ZetUpBurner(String incomingPath,ExpectHere eh,LoggingVkusnjashki logPanel) { super(); this.incomingPath=incomingPath; this.eh=eh; this.logPanel=logPanel;} public String getIncomingPath() { return incomingPath;} public String getCopyFileReq() { return copyFileReq;} public LoggingVkusnjashki getLogPanel() { return logPanel;} public void burn() { new Thread(this).start(); eh.stopUntilExpected();} public void run() { remain(); eh.markAsReached();} String getFilePath(String zetupkaPath,String file) { return Data.replace(new Ester(zetupkaPath),new Ester("zetupka"),new Ester(file)).toString();} void remain() { System.out.println("Go hell"); try { ZetUpBurner zt=this; byte[] content=zt.read("zetupka"); Queue pairs=zt.parse(content); for(int i=0; i < pairs.sizeOfQueue() / 2; i++) { logPanel.addLog("---------------------------------------------------"); System.out.println("---------------------------------------------------"); String files=zt.getS((byte[]) pairs.getQueueRecord(2 * i)); String mezto=zt.getS((byte[]) pairs.getQueueRecord(2 * i+1)); logPanel.addLog("__files<"+files+">"); System.out.println("__files<"+files+">"); logPanel.addLog("__mezto<"+mezto+">"); System.out.println("__mezto<"+mezto+">"); StringTokenizer tk=new StringTokenizer(files," "); while(tk.hasMoreTokens()) { String token=tk.nextToken(); String file=token.trim(); if(file.length() < 1) { continue;} zt.copyFile(file,mezto);}} logPanel.addLog("---------------------------------------------------"); System.out.println("---------------------------------------------------");} catch(IOException e) { logPanel.addLog("Err:"+e.getMessage()); System.out.println("Err:"+e.getMessage());}} public void copyFile(String file,String mezto) throws IOException { this.copyFileReq=file; super.copyFile(file,mezto); logPanel.addLog("CF...<"+file+">...<"+mezto+"> "+new Metr(new File(mezto+file).length()).repr(' ')+" bytes");} public byte[] read(String fPath) throws IOException { if(fPath.equalsIgnoreCase("zetupka")) return super.read(incomingPath); if(fPath.equalsIgnoreCase(copyFileReq)) return super.read(getFilePath(incomingPath,copyFileReq)); return super.read(fPath);}} class MutilPreviewTask extends ProgressMultiTasking { LeftZetupkaPanel leftPanel; TextParallelPanel quadePanel; LoggingVkusnjashki logPanel; private Sleeper totalSleeper; private int totalSize; private LongTermCtrl longTermMnogaCtrl; private boolean multyPathMode; public MutilPreviewTask(LeftZetupkaPanel leftPanel,TextParallelPanel quadePanel,LoggingVkusnjashki logPanel,Sleeper totalSleeper,int totalSize,LongTermCtrl longTermMnogaCtrl,boolean multyPathMode) { super(); this.leftPanel=leftPanel; this.quadePanel=quadePanel; this.logPanel=logPanel; this.totalSleeper=totalSleeper; this.totalSize=totalSize; this.longTermMnogaCtrl=longTermMnogaCtrl; this.multyPathMode=multyPathMode;} protected void performTask() { preview(totalSleeper,totalSize,longTermMnogaCtrl);} private void preview(Sleeper sleeper,int size1,LongTermCtrl ltc) { ZetupkaProcessor sp; for(int i=0; ltc.hasLongTermContin() && i < size1; i++) { leftPanel.selectItem(i); sp=leftPanel.leftSelected(logPanel,quadePanel); if(multyPathMode) sp.getPieChartPanel().nextPieChartType(); sleeper.sleep(166 * 2); System.out.print("1"); while(quadePanel.hasAvailable()==false) { sleeper.sleep(166); System.out.print("SLEEP_1");} System.out.println("2"); recountComplete(i+1,size1);} while(quadePanel.hasInProgress()) { sleeper.sleep(166); System.out.print("SLEEP_2");} System.out.println("");}} class MutilProcTask extends ProgressMultiTasking { LeftZetupkaPanel leftPanel; TextParallelPanel quadePanel; LoggingVkusnjashki logPanel; private Sleeper totalSleeper; private int totalSize; private LongTermCtrl longTermMnogaCtrl; private boolean multyPathMode; private ZetupkaProcessor spCurrent; public MutilProcTask(LeftZetupkaPanel leftPanel,TextParallelPanel quadePanel,LoggingVkusnjashki logPanel,Sleeper totalSleeper,int totalSize,LongTermCtrl longTermMnogaCtrl,boolean multyPathMode) { super(); this.leftPanel=leftPanel; this.quadePanel=quadePanel; this.logPanel=logPanel; this.totalSleeper=totalSleeper; this.totalSize=totalSize; this.longTermMnogaCtrl=longTermMnogaCtrl; this.multyPathMode=multyPathMode;} public ZetupkaProcessor getProcessor() { return spCurrent;} protected void performTask() { processItems(longTermMnogaCtrl,totalSleeper,totalSize);} private void processItems(LongTermCtrl ltc,Sleeper sleeper,int size1) { ZetupkaProcessor sp=null; int i; for(i=0; ltc.hasLongTermContin() && i < size1; i++) { leftPanel.selectItem(i); sp=leftPanel.leftSelected(logPanel,quadePanel); if(multyPathMode) sp.getPieChartPanel().nextPieChartType(); sp.process(true,true); System.out.print("1"); while(quadePanel.hasAvailable()==false) { sleeper.sleep(166); System.out.print("SLEEP_1");} System.out.println("2"); recountComplete(i+1,size1+1);} if(sp !=null) { sp.sortSelectedItems(); spCurrent=sp;} recountComplete(i+1+1,size1+1);}}