package mydev.wb1; import java.awt.Color; import java.awt.Event; import java.net.Socket; import java.awt.FlowLayout; import java.awt.Graphics; import java.awt.Panel; import java.awt.Rectangle; import java.awt.TextField; public class WebStart extends java.awt.Frame implements Runnable { boolean stop; private boolean threadStop; private long rqBytes; private long rspBytes; ControlsPanel cp; MyCnv cnv; StatsPanel sp; char prevCh; int sum1; java.net.ServerSocket srvSct; public WebStart() { super("Web starts"); this.stop=false; this.srvSct=null; this.rqBytes=0; this.rspBytes=0; this.prevCh=' '; this.sum1=0;} public static void main(String[] args) { WebStart fr=new WebStart(); fr.prepare1(); fr.show(); while(!fr.stopped()) { fr.timeout(); try { fr.doSomething();} catch(Throwable e) { e.getMessage();}} fr.destroy();} private void destroy() { hide(); dispose(); System.exit(1-1);} private boolean stopped() { return stop;} private void prepare1() { setLayout(new java.awt.BorderLayout()); add("North",cp=new ControlsPanel()); add("Center",cnv=new MyCnv()); add("South",sp=new StatsPanel()); pack();} private int getSrvPort() { int port=0; try { port=Integer.parseInt(cp.srvPortFld.getText());} catch(Exception e) { e.getMessage();} return port;} private void doSomething() { sp.incmFld.setText(""+rqBytes); sp.outgFld.setText(""+rspBytes);} private void processClientConnection(Socket s1) { java.io.InputStream is1=null; java.io.OutputStream os1=null; String rq=""; byte[] b1=new byte[1]; int count; boolean ready=false; appendIncoming('\n'); try { is1=s1.getInputStream(); do { b1[0]=0; count=is1.read(b1); if(count > 0) { char ch=(char) b1[0]; if(ch !='\r') { ready=appendIncoming(ch); rq+=ch;} rqBytes+=1; if(ready) { cnv.updateOutput(); String rs1=processRequest(rq); try { os1=s1.getOutputStream(); for(int i=0; i < rs1.length(); i++) { b1[0]=(byte) rs1.charAt(i); os1.write(b1); appendOutgoing((char) b1[0]); rspBytes+=1;} cnv.updateOutput();} catch(Exception e) { e.getMessage();} if(os1 !=null) { try { os1.flush();} catch(java.io.IOException e) { e.getMessage();} try { os1.close();} catch(java.io.IOException e) { e.getMessage();}} if(is1 !=null) try { is1.close();} catch(java.io.IOException e) { e.getMessage();} if(s1 !=null) try { s1.close();} catch(java.io.IOException e) { e.getMessage();} count=-1;}}} while(count > 0);} catch(Exception e) { e.getMessage();}} private String processRequest(String rq) { int i1=rq.indexOf("GET"); int i2=rq.indexOf("HTTP/"); if(rq.length() >= i2 && i1 >= 0 && i2 >= 0) { String a=rq.substring(i1+"GET".length(),i2); a=a.replace('/',' ').trim(); try { sum1+=Integer.valueOf(a).intValue();} catch(Throwable th) { th.getMessage();}} StringBuffer rbs=new StringBuffer(); rbs.setLength(0); rbs.append("<html>").append("\n").append("<head>").append("\n").append("<title>").append("Computation of Number").append("</title>").append("\n").append("</head>").append("\n").append("<body>").append("\n").append("<p><h5>").append("Could you choose some numbers for computation:").append("</h5><p>").append("<table border=1>").append("\n"); for(int i=1; i <= 10; i++) { rbs.append("<tr>"); for(int j=1; j <= 10; j++) { rbs.append("<td><a href="); rbs.append((i-1) * 10+j); rbs.append(">"); rbs.append((i-1) * 10+j); rbs.append("</a></td>");} rbs.append("</tr>\n");} rbs.append("<tr><td colspan=4>Summary :</td><td colspan=3>"+sum1+" "+"</td><td colspan=3>"+toHex(sum1)+"</td></tr>\n"); rbs.append("\n").append("</table>").append("\n").append("</body>").append("\n").append("</html>"); String content=rbs.toString(); rbs.setLength(0); rbs.append("HTTP/1.1 200 OK").append("\n").append("Pragma: no-cache").append("\n").append("Content-Length: "+content.length()).append("\n").append("Date: "+new java.util.Date().toGMTString()).append("\n").append("Connection: close").append("\n").append("\n").append(content); return rbs.toString();} private String toHex(int arg) { String v1=Integer.toHexString(arg).toUpperCase(); return v1.length()-v1.length() / 2 * 2 !=0 ? "0"+v1 : v1;} private boolean appendIncoming(char ch) { boolean res=false; if(ch=='\n' && prevCh=='\n') res=true; cnv.updateIncoming(ch); prevCh=ch; return res;} private void appendOutgoing(char ch) { cnv.updateOutgoing(ch);} private long workTimeout() { return 95;} public boolean handleEvent(Event et) { if(et.id==Event.WINDOW_DESTROY) { serverStop(); stop=true; timeout();} if(et.id==Event.ACTION_EVENT && et.target==cp.bStart) serverStart(); if(et.id==Event.ACTION_EVENT && et.target==cp.bStop) serverStop(); return super.handleEvent(et);} private void timeout() { try { Thread.sleep(workTimeout());} catch(Throwable e) { e.getMessage();}} void serverStart() { if(cp.statusFld.getText().compareTo(Predef.OFLRC)==0) { new Thread(this).start(); cp.statusFld.setText(Predef.ONL); cp.bStart.enable(false); cp.bStop.enable(true); cnv.update("expect connections\n");}} private void serverStop() { if(cp.statusFld.getText().compareTo(Predef.ONL)==0) { threadStop=true; cp.statusFld.setText(Predef.OFLRC); cp.bStart.enable(true); cp.bStop.enable(false); cnv.update("server stops\n");}} public void run() { threadStop=false; try { srvSct=new java.net.ServerSocket(getSrvPort());} catch(java.io.IOException e) { e.getMessage(); srvSct=null;} while(!threadStop) { Socket clnCnt=null; try { clnCnt=srvSct.accept();} catch(java.io.IOException e) { e.getMessage();} if(clnCnt !=null) processClientConnection(clnCnt);} java.net.ServerSocket s1=srvSct; srvSct=null; try { s1.close();} catch(Exception e) { e.getMessage();}}} class ControlsPanel extends Panel { TextField srvPortFld; java.awt.Button bStart; java.awt.Button bStop; java.awt.Label statusFld; public ControlsPanel() { setLayout(new FlowLayout()); add(new java.awt.Label("Server Port:")); add(srvPortFld=new TextField(5)); add(bStart=new java.awt.Button("Start")); add(bStop=new java.awt.Button("Stop")); add(statusFld=new java.awt.Label(Predef.OFLRC)); srvPortFld.setText(""+Predef.DEF_PORT); bStop.enable(false);}} class MyCnv extends java.awt.Canvas { Rectangle r1; StringBuffer buf; int downShift; int mx; int my; boolean oldSel; public MyCnv() { buf=new StringBuffer(); buf.setLength(0); resize(400,300); this.downShift=0; this.oldSel=false;} public void updateOutgoing(char ch) { buf.append(ch);} public void updateIncoming(char ch) { buf.append(ch);} public void updateOutput() { repaint();} public void checkState() { boolean ns=false; if(r1==null) return; if(mx >= r1.width-18 && mx <= r1.width && my >= 1 && my <= r1.height / 2) ns=true; if(mx >= r1.width-18 && mx <= r1.width && my >= r1.height / 2 && my <= r1.height) ns=true; if(oldSel !=ns) { oldSel=ns; repaint();}} public void update(String str1) { buf.append(str1); repaint();} public void clear() { downShift=0;} public boolean mouseDown(Event et,int x1,int y1) { if(mx >= r1.width-18 && mx <= r1.width && my >= 1 && my <= r1.height / 2) { downShift++; repaint();} if(mx >= r1.width-18 && mx <= r1.width && my >= r1.height / 2 && my <= r1.height) { downShift--; repaint();} return super.mouseDown(et,x1,y1);} public boolean mouseMove(Event et,int x1,int y1) { mx=x1; my=y1; checkState(); return super.mouseMove(et,x1,y1);} public void paint(Graphics cs) { super.paint(cs); if(r1==null) r1=bounds(); cs.setColor(Color.black); cs.drawRect(0,0,r1.width-1,r1.height-1); java.awt.FontMetrics f1=cs.getFontMetrics(); int x=1; int y=f1.getHeight(); boolean stop=false; String bc=""; int totalHeight=0; int cur=0+downShift; while(!stop) { String s1=getLine(cur,r1); int h1=estimateHeight(s1,f1,r1); if(totalHeight+h1 < r1.height-1) { bc=s1+bc; totalHeight+=h1;} else stop=true; cur+=1;} if(totalHeight > r1.height-1-1) y-=totalHeight-r1.height+1+1; for(int i=0; i < bc.length(); i++) { char ch=bc.charAt(i); String str=""+ch; if(ch !='\n') { if(x < r1.width-1-20) { if(y < r1.height-1) cs.drawString(str,x,y); x+=f1.stringWidth(str);} else { x=1+20; y+=f1.getAscent()+f1.getDescent()+f1.getLeading(); if(y < r1.height-1) cs.drawString(str,x,y); x+=f1.stringWidth(str);}} else { y+=f1.getAscent()+f1.getDescent()+f1.getLeading(); x=1;}} drawUp(cs,f1);} private void drawUp(Graphics cs,java.awt.FontMetrics f1) { cs.setColor(Color.magenta); if(mx >= r1.width-18 && mx <= r1.width && my >= 1 && my <= r1.height / 2) cs.fillRect(r1.width-18,1+1,15,r1.height / 2-1-1-1); else cs.drawRect(r1.width-18,1+1,15,r1.height / 2-1-1-1); cs.drawString("U",r1.width-15,r1.height / 5); cs.drawString("P",r1.width-15,r1.height / 5+2 * f1.getHeight()); cs.drawLine(r1.width-15-1,r1.height / 12,r1.width-10-1,r1.height / 12-7); cs.drawLine(r1.width-10-1,r1.height / 12-7,r1.width-4-1,r1.height / 12); cs.drawLine(r1.width-15-1,r1.height / 12-2,r1.width-10-1,r1.height / 12-7-2); cs.drawLine(r1.width-10-1,r1.height / 12-7-2,r1.width-4-1,r1.height / 12-2); if(mx >= r1.width-18 && mx <= r1.width && my >= r1.height / 2 && my <= r1.height) cs.fillRect(r1.width-18,r1.height / 2,15,r1.height / 2-1-1-1); else cs.drawRect(r1.width-18,r1.height / 2,15,r1.height / 2-1-1-1); cs.drawString("D",r1.width-15,3 * r1.height / 5); cs.drawString("O",r1.width-15,3 * r1.height / 5+2 * f1.getHeight()); cs.drawString("W",r1.width-15,3 * r1.height / 5+4 * f1.getHeight()); cs.drawString("N",r1.width-15,3 * r1.height / 5+6 * f1.getHeight()); cs.drawLine(r1.width-15-1,11 * r1.height / 12,r1.width-10-1,11 * r1.height / 12+7); cs.drawLine(r1.width-10-1,11 * r1.height / 12+7,r1.width-4-1,11 * r1.height / 12); cs.drawLine(r1.width-15-1,11 * r1.height / 12-2,r1.width-10-1,11 * r1.height / 12+7-2); cs.drawLine(r1.width-10-1,11 * r1.height / 12+7-2,r1.width-4-1,11 * r1.height / 12-2);} private int estimateHeight(String s1,java.awt.FontMetrics f1,Rectangle r1) { int x=1; int height=f1.getAscent()+f1.getDescent()+f1.getLeading(); for(int i=0; i < s1.length(); i++) { char ch=s1.charAt(i); String str=""+ch; if(ch !='\n') { if(x < r1.width-1-20) { x+=f1.stringWidth(str);} else { x=1+20; height+=f1.getAscent()+f1.getDescent()+f1.getLeading(); x+=f1.stringWidth(str);}}} return height;} private String getLine(int strIdx,Rectangle r1) { StringBuffer b1=new StringBuffer(); boolean stop=false; b1.setLength(0); int cur1=0; for(int i=buf.length()-1; !stop && i >= 0; i--) { char ch=buf.charAt(i); if(ch=='\n') { cur1++; if(b1.length() > 0 && cur1 !=strIdx) stop=true;} else if(cur1==strIdx) b1.append(ch);} String s1=b1.toString(); b1.setLength(0); for(int j=s1.length()-1; j >= 0; j--) b1.append(s1.charAt(j)); return b1.toString()+"\n";}} class StatsPanel extends Panel { java.awt.Label incmFld; java.awt.Label outgFld; public StatsPanel() { setLayout(new FlowLayout()); add(incmFld=new java.awt.Label("Incoming: 0")); add(outgFld=new java.awt.Label("Outgoing: 0"));}} class Predef { static int DEF_PORT=80; static String OFLRC="Offline"; static String ONL="Online";}
