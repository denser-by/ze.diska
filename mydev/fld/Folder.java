package mydev.fld; import java.awt.*; import java.io.*; public class Folder extends Frame implements Runnable { final int LEFT=1; final int RIGHT=2; final int UP=3; final int DOWN=4; final int ENTER=UP-RIGHT-LEFT; static Event copy; boolean first; List c1; List c2; int leftActive; int rightActive; String leftFolder; String rightFolder; boolean firstf1,firstf2,nfirstf1,nfirstf2; boolean ready; int readyItem; public Folder(String title) { super(title); this.first=true; leftActive=0; rightActive=0; ready=true; readyItem=-1; leftFolder="./"; rightFolder="./";} public void run() { setActive(); if(readyItem==ENTER) changFolder(); ready=true;} void construct() { c1=new List(15,false); add(c1); String[] items=new File(leftFolder).list(); c1.addItem("./../"); for(int i=0; i < items.length; i++) { String current="./"+items[i]; c1.addItem(current+(new File(current).isDirectory() ? "/" : ""));} c2=new List(15,false); add(c2); items=new File(rightFolder).list(); c2.addItem("./../"); for(int i=0; i < items.length; i++) { String current="./"+items[i]; c2.addItem(current+(new File(current).isDirectory() ? "/" : ""));} requestFocus(); nextFocus(); c1.requestFocus(); c1.nextFocus(); c1.enable(); setActive();} void prepare() { Dimension dd=c1.size(); c1.resize(dd.width+100,dd.height); setResizable(false);} void changFolder() { String item; if(first) { item=c1.getItem(c1.getSelectedIndex()); if(new File(leftFolder+item).isDirectory()) { leftFolder=leftFolder+item; c1.clear(); c1.addItem("./../"); String[] items=new File(leftFolder).list(); for(int i=0; i < items.length; i++) { String current="./"+items[i]; c1.addItem(current+(new File(leftFolder+current).isDirectory() ? "/" : ""));} c1.select(0); leftActive=0;}} else { item=c2.getItem(c2.getSelectedIndex()); if(new File(rightFolder+item).isDirectory()) { rightFolder=rightFolder+item; c2.clear(); c2.addItem("./../"); String[] items=new File(rightFolder).list(); for(int i=0; i < items.length; i++) { String current="./"+items[i]; c2.addItem(current+(new File(rightFolder+current).isDirectory() ? "/" : ""));} c2.select(0); rightActive=0;}}} void setActive() { int dc; dc=c2.getSelectedIndex(); if(dc >= 0) c2.deselect(dc); dc=c1.getSelectedIndex(); if(dc >= 0) c1.deselect(dc); if(first) { if(readyItem==UP) leftActive=leftActive > 0 ? leftActive-1 : 0; if(readyItem==DOWN) leftActive=leftActive < c1.countItems()-1 ? leftActive+1 : c1.countItems()-1; c1.select(leftActive); c1.requestFocus(); c1.nextFocus(); c1.enable();} else { if(readyItem==UP) rightActive=rightActive > 0 ? rightActive-1 : 0; if(readyItem==DOWN) rightActive=rightActive < c2.countItems()-1 ? rightActive+1 : c2.countItems()-1; c2.select(rightActive); c2.requestFocus(); c2.nextFocus(); c2.enable();} requestFocus(); nextFocus();} public boolean handleEvent(Event evt) { boolean result; if(copy !=null && copy.equals(evt)) { result=false;} else { copy=evt; result=((Frame) this).handleEvent(evt);} if(ready && first) { readyItem=RIGHT; if(evt.id==401 && evt.key==9) firstf1=true; if(evt.id==402 && evt.key==9) firstf2=true; if(firstf1 && firstf2) { first=first ? false : true; firstf1=false; firstf2=false; ready=false; new Thread(this).start();} nfirstf1=false; nfirstf2=false;} else if(ready) { readyItem=LEFT; if(evt.id==401 && evt.key==9) nfirstf1=true; if(evt.id==402 && evt.key==9) nfirstf2=true; if(nfirstf1 && nfirstf2) { first=first ? false : true; nfirstf1=false; nfirstf2=false; ready=false; new Thread(this).start();} firstf1=false; firstf2=false;} if(ready && evt.id==404 && evt.key==1004) { ready=false; readyItem=UP; new Thread(this).start();} if(ready && evt.id==404 && evt.key==1005) { ready=false; readyItem=DOWN; new Thread(this).start();} if(ready && evt.id==402 && evt.key==10) { ready=false; readyItem=ENTER; new Thread(this).start();} if(evt.id==Event.WINDOW_DESTROY) { hide(); dispose(); System.exit(1-1);} return result;} public static void main(String[] args) { Folder f1=new Folder("Folder"); f1.setLayout(new FlowLayout()); f1.construct(); f1.pack(); f1.show(); f1.prepare();}}
