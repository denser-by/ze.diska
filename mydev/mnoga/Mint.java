package mydev.mnoga; import java.awt.BorderLayout; import java.awt.Button; import java.awt.Color; import java.awt.Component; import java.awt.Event; import java.awt.FlowLayout; import java.awt.Frame; import java.awt.GridLayout; import java.awt.Label; import java.awt.LayoutManager; import java.awt.Panel; import java.awt.Point; import java.awt.TextArea; import java.awt.TextField; import java.io.File; import java.io.IOException; import mydev.aaa.Sleeper; import mydev.anim.ColorsLogo; import mydev.bbb.Enter2; import mydev.bbb.Location; import mydev.extension.Extensions; import mydev.uix.AbstractApproach; import mydev.uix.AbstractApproachProvider; import mydev.uix.AbstractParallelPanel; import mydev.uix.AmountPanel; import mydev.uix.AveragePanel; import mydev.uix.Better; import mydev.uix.CommonDataArrayPanel; import mydev.uix.CommonLogPanel; import mydev.uix.CommonLogo; import mydev.uix.CommonSouthPanel; import mydev.uix.ControlsPanel; import mydev.uix.HeaderPathPanel; import mydev.uix.LabeledEditPair; import mydev.uix.LabeledPanel; import mydev.uix.ListPanel; import mydev.uix.LoggingVkusnjashki; import mydev.uix.LongTermCtrl; import mydev.uix.PagesPanel; import mydev.uix.Params; import mydev.uix.PieChartPanel; import mydev.uix.ProgressBar; import mydev.uix.ProgressMultiTasking; import mydev.uix.Props; import mydev.uix.SidePanelFactory; import mydev.uix.SizePanel; import mydev.uix.Timer; import mydev.uix.ToogleMultyButton; import mydev.uix.YellowAutoButton; import mydev.vutils.Ask; import mydev.vutils.AverageRec; import mydev.vutils.Data; import mydev.vutils.Ester; import mydev.vutils.ExpectHere; import mydev.vutils.Files; import mydev.vutils.Filter; import mydev.vutils.Metr; import mydev.vutils.Order; import mydev.vutils.Queue; import mydev.vutils.ReadyFree; import mydev.vutils.Time; import mydev.vutils.TimeTracking; public class Mint extends Frame implements Runnable,LongTermCtrl { MintPathPanel pathPanel; LeftMintPanel leftPanel; RightMintPanel rightPanel; ProjParallelPanel quadePanel; MintSouthPanel southPanel; MintLogPanel logPanel; String pathParam; String leftPanelParam; ProjProcessor spCurrent; public Mint(String title) { super(title); setLayout(new BorderLayout()); setBackground(Color.gray);} public boolean hasLongTermContin() { return pathPanel.hasLongTermContin();} public static void main(String[] args) throws IOException { Mint main=new Mint("Leaves Days Account"); if(args.length > 0) { String param=args[0]; String line=MintInfoPanel.line(param); main.setPathParam(param); System.out.println(line); return;} else { System.out.println("Please specify source file as a parameter.");} main.show(); main.start(); main.pack(); main.reMoveRnd(); main.resize(Enter2.instance().getMainWindowsWidth(),Enter2.instance().getMainWindowsHeight()); Sleeper sleeper=new Sleeper(); if(Props.mainLower) Thread.currentThread().setPriority(Thread.MIN_PRIORITY); while(Better.working) { main.refreshUpdatable(); TimeTracking.memTrack(); sleeper.sleep(Timer.DEF_REF_TIME);} main.hide(); main.dispose(); System.exit(1-1);} public void setPathParam(String path) { this.pathParam=path; File file=new File(path); String fullPath=file.getAbsolutePath(); if(file.isDirectory()) updateInfo(null,true); else { String item=file.getName(); leftPanelParam=item; long cps=new MintProjEstimation().countProjectSize(fullPath); leftPanel.addItem(item,fullPath,cps);}} protected void reMoveRnd() { Location ol=Enter2.instance().location(); Point p=ol.getRandomExternalPos((short) Location.MAIN_WINDOWS_WIDTH,(short) Location.MAIN_WINDOWS_HEIGHT); move(p.x,p.y);} public boolean handleEvent(Event et) { if(et.id==Event.WINDOW_DESTROY) new Better().exitApplicationLoop(); if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getBtScan()) { logPanel.prognoseTasks(1); leftPanel.clearAvgPanel(); updateInfo(null,true); quadePanel.clearAverage();} if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getBtStop()) pathPanel.disableStop(); if(et.id==Event.LIST_SELECT && leftPanel.isItemsCtrl(et.target)) { quadePanel.initSource(); rightPanel.selectNothing(); spCurrent=leftSelected(); leftPanel.enablePackBtn(true);} if(spCurrent !=null && et.target==spCurrent.getPieChartPanel().getPieChartVertScroll()) spCurrent.getPieChartPanel().refreshUpdatableLegend(); if(spCurrent !=null) { if(et.id==Event.ACTION_EVENT && et.target==spCurrent.getPieChartPanel().getPieChartChoiceGroup()) spCurrent.getPieChartPanel().changePieChartType(); if(et.id==Event.ACTION_EVENT && et.target==spCurrent.getPieChartPanel().getPieChartChoiceDispl()) spCurrent.getPieChartPanel().changePieChartType(); if(et.id==Event.ACTION_EVENT && et.target==spCurrent.getPieChartPanel().getPieChartChoiceSort()) spCurrent.getPieChartPanel().changePieChartType();} if(et.id==Event.LIST_SELECT && rightPanel.isItemsCtrl(et.target)) { quadePanel.initBackup(); leftPanel.selectNothing(); spCurrent=rightSelected(); rightPanel.enableUnpackBtn(true);} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getPackBtn()) { spCurrent.packItem(); leftPanel.enablePackBtn(false);} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getPackAllBtn()) { leftPanel.selectItem(0); quadePanel.initSource(); rightPanel.selectNothing(); spCurrent=leftSelected(); String[] items=leftPanel.getItems(); spCurrent.packAllItems(items,pathPanel.getPathText(),pathPanel.getPath2Text()); leftPanel.enablePackBtn(false); leftPanel.enablePackAllBtn(false);} if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getUnpackBtn()) { spCurrent.unpackItem();} if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getChPreview()) { if(pathPanel.getPreview()) pathPanel.setPath("C:\\Users\\dzianis\\workspace\\"); else pathPanel.setPath("C:\\Users\\dzianis\\workspace\\");} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getAutoBtn()) autoPacks(); return super.handleEvent(et);} public void run() { logPanel.prognoseTasks(1+1+1+1+1+1); ProjProcessor sp; LongTermCtrl ltc=pathPanel; Sleeper sleeper=new Sleeper(); Time t=new Time(); t.start(); leftPanel.clearItems(); rightPanel.clearItems(); quadePanel.initSource(); leftPanel.setPosition(""); leftPanel.dropBtnSkipPosition(); ScanProjLeftTask scanProjLeft=new ScanProjLeftTask(leftPanel,pathPanel.getPathText(),logPanel,null,false,pathPanel); logPanel.regTreckableTask(scanProjLeft); scanProjLeft.run(); ScanProjRightTask scanProjRight=new ScanProjRightTask(rightPanel,pathPanel.getPath2Text(),logPanel,null,pathPanel); logPanel.regTreckableTask(scanProjRight); scanProjRight.run(); leftPanel.enableAutoBtn(false); int size1=leftPanel.itemsNum(); if(size1 > 0) { if(pathPanel.getPreview()) preview(sleeper,size1,ltc); packAllItemsAtOnce(); packItems(ltc,sleeper,size1); while(quadePanel.hasInProgress()) { sleeper.sleep(166); System.out.print("SLEEP_2");} System.out.println(""); if(pathPanel.getPreview()) { leftPanel.selectNothing(); int size2=rightPanel.itemsNum(); previewRightBackups(sleeper,size2,ltc); pathPanel.setPreview(false); sleeper.sleep(166 * 2); new Better().exitApplicationLoop();}} t.trust(); logPanel.addLogComplete("Average records("+quadePanel.getAverageRec().getRecordsNum()+") processing time is "+quadePanel.getAverageRec().getAverageTime()+"s also min time is "+quadePanel.getAverageRec().getMinTime()+"s and max time is "+quadePanel.getAverageRec().getMaxTime()+"s"); logPanel.addLogComplete("Auto OneLine transform complete "+t.ess()); pathPanel.getBtScan().enable(true); pathPanel.enablePreview(true); pathPanel.disableStop(); leftPanel.enableAutoBtn(true); leftPanel.enableCtrls(true);} private void packAllItemsAtOnce() { MintPackAllAtOnceTask packAllTask=new MintPackAllAtOnceTask(leftPanel,quadePanel,logPanel,pathPanel); logPanel.regTreckableTask(packAllTask); packAllTask.run();} private void packItems(LongTermCtrl ltc,Sleeper sleeper,int size1) { MintPackAllTask packTask=new MintPackAllTask(leftPanel,quadePanel,logPanel,sleeper,size1,ltc); logPanel.regTreckableTask(packTask); packTask.run();} private void preview(Sleeper sleeper,int size1,LongTermCtrl ltc) { MintPreviewTask previewTask=new MintPreviewTask(leftPanel,quadePanel,logPanel,sleeper,size1,ltc); logPanel.regTreckableTask(previewTask); previewTask.run();} private void previewRightBackups(Sleeper sleeper,int size1,LongTermCtrl ltc) { MintPreviewRightBackupsTask previewRightBackupsTask=new MintPreviewRightBackupsTask(rightPanel,quadePanel,logPanel,sleeper,size1,ltc); logPanel.regTreckableTask(previewRightBackupsTask); previewRightBackupsTask.run();} protected void autoPacks() { leftPanel.enableAutoBtn(false); leftPanel.getPackPanel().enableCtrls(false); pathPanel.getBtScan().enable(false); pathPanel.enablePreview(false); pathPanel.enableStop(); leftPanel.enableCtrls(false); new Thread(this).start();} protected void start() { this.southPanel=new MintSouthPanel(); this.logPanel=southPanel.getLogPanel(); this.pathPanel=new MintPathPanel(pathParam); add("North",pathPanel.getWrapPanel()); add("West",leftPanel=new LeftMintPanel(this)); add("East",rightPanel=new RightMintPanel()); cRemake(); add("South",southPanel); if(leftPanelParam !=null) { leftPanel.selectItem(0); leftPanel.setAmount("1"); leftPanel.setSize(""+new File(pathParam).length()); spCurrent=(MintInfoPanel) quadePanel.getFirst(); spCurrent.readSource(leftPanelParam,pathParam,"","",0); spCurrent.packItem();}} void cRemake() { if(quadePanel !=null) remove(quadePanel); add("Center",quadePanel=ProjParallelPanel.create(false,new PanelAg(pathPanel,rightPanel,leftPanel,logPanel)));} protected void refreshUpdatable() { leftPanel.updateOnUiThread(quadePanel.getAverageRec()); southPanel.refreshUpdatable(); pathPanel.refreshUpdatable();} protected void updateInfo(ExpectHere eh,boolean opSingle) { String path=pathPanel.getPathText(); String path2=pathPanel.getPath2Text(); pathPanel.enableStop(); leftPanel.clearItems(); rightPanel.clearItems(); quadePanel.initSource(); if(spCurrent==null) spCurrent=(MintInfoPanel) quadePanel.getFirst(); spCurrent.getPieChartPanel().clearItems(); leftPanel.setPosition(""); leftPanel.dropBtnSkipPosition(); ScanProjLeftTask leftScanTask=new ScanProjLeftTask(leftPanel,path,logPanel,eh,opSingle,pathPanel); logPanel.regTreckableTask(leftScanTask); new Thread(leftScanTask).start(); new Thread(new ScanProjRightTask(rightPanel,path2,logPanel,eh,pathPanel)).start();} protected ProjProcessor rightSelected() { return rightPanel.rightSelected(logPanel,quadePanel);} protected ProjProcessor leftSelected() { return leftPanel.leftSelected(logPanel,quadePanel);}} class ProgressMintBar extends ProgressBar { public ProgressMintBar() { super(DEF_HEIGHT,Props.borderProgressColor,Props.bgProgressColor,Props.mainProgressColor);} public ProgressMintBar(int minSize,Color borderColor,Color bgColor,Color progressColor) { super(minSize,borderColor,bgColor,progressColor);}} class MintSouthPanel extends CommonSouthPanel { MintLogPanel logPanel; ColorsLogo logoPanel; public MintSouthPanel() { super();} protected CommonLogo obtainLogo() { logoPanel=new ColorsLogo(); return logoPanel;} protected CommonLogPanel obtainLogPanel() { logPanel=new MintLogPanel(); return logPanel;} public MintLogPanel getLogPanel() { return logPanel;}} class MintLogPanel extends CommonLogPanel implements LoggingVkusnjashki { public MintLogPanel() { super(false);} protected ProgressBar obtainProgressBarCurrent() { return new ProgressMintBar();} protected ProgressBar obtainProgressBarTotal() { return new ProgressMintBar(ProgressMintBar.DEF_HEIGHT,Props.borderProgressTotalColor,Props.bgProgressTotalColor,Props.mainProgressTotalColor);} public Color getPanelBgColor() { return Props.bgLogPanelColor;} public LayoutManager getPanelLayout() { return new BorderLayout();} public LoggingVkusnjashki getLogging() { return(LoggingVkusnjashki)(this);}} class MintPathPanel extends HeaderPathPanel implements LongTermCtrl { final static String NAME_SRC="Source:"; final static String TF_PATH2_WRAP="tfPath2Wrap"; private String pathParam; public MintPathPanel(String pathParam) { super("Leaves Days Account",true,false,LabeledPanel.DEF_MIN_SIZE,Props.northBgColor,Props.northBorderColor,Props.northTextColor); this.pathParam=pathParam;} public String getPath2Text() { return((LabeledEditPair) getCtrl(TF_PATH2_WRAP)).getText();} public String getPathText() { return getTfPath().getText();} public boolean hasLongTermContin() { return longTermOp;} public void enableCtrls(boolean enable) { super.enableCtrls(enable); if(getCtrl(TF_PATH2_WRAP) !=null)((LabeledEditPair) getCtrl(TF_PATH2_WRAP)).enableCtrls(enable);} protected ToogleMultyButton obtainMultyButton() { return null;} protected Label obtainLbPath() { Label lbPath=new Label(NAME_SRC); lbPath.setForeground(Color.black); return lbPath;} protected TextField obtainTfPath() { TextField tfPath=new TextField("",50+20+10+5-30-20+5-20+5+5); tfPath.setText("C:\\Users\\dzianis\\workspace\\"); if(pathParam !=null) tfPath.setText(pathParam); return tfPath;} protected void buildPanel() { buildPath(); LabeledEditPair dstPath=new LabeledEditPair("Dark forest:","C:\\Users\\dzianis\\Desktop\\Leaves Days\\Backups\\",50+20+10+5-30-20+5-20+5+5+5+1+1); dstPath.setPanelBgColor(Props.bgTopColor); append(TF_PATH2_WRAP,dstPath);} public Color getPanelBgColor() { return Props.bgTopColor;}} class MintPagesPanel extends PagesPanel { public MintPagesPanel() { super(Props.listPanelPageSize);} public Color getPanelBgColor() { return Props.bgPagesPanelColor;}} class RightMintPanel extends CommonDataArrayPanel { ListPanel listPanel; RightUnpackBtnPanel unpackPanel; SizeMintPanel sizePanel; private Queue rightItems=new Queue(); public RightMintPanel() { super();} protected Panel obtainControlsPanel() { this.unpackPanel=new RightUnpackBtnPanel(); return unpackPanel;} protected SizePanel obtainSizePanel() { this.sizePanel=new SizeMintPanel(); return sizePanel;} protected ListPanel obtainListPanel() { this.listPanel=new ListPanel(new StatMintPanel("files.tree",""),new MintPagesPanel()); return listPanel;} public Color getPanelBgColor() { return Props.bgSizePanelColor;} protected Color getWrapPanelColor() { return Props.bgStatPanelColor;} ProjProcessor rightSelected(LoggingVkusnjashki logPanel,ProjParallelPanel quadePanel) { int idxSel=getSelectedIdx(); String curSel=getSelectedName(); String path=getSelectedPath(); long size=getSelectedSize(); logPanel.addLog("Selected item "+path); ProjProcessor sp=(MintInfoPanel) quadePanel.assignBackup(curSel,path); setPosition(""+(idxSel+1)); setItemSize(""+new Metr(size).repr(',')); return sp;} public Button getUnpackBtn() { return unpackPanel.getBtUnpack();} public void enableUnpackBtn(boolean enable) { unpackPanel.getBtUnpack().enable(enable);} public void clearItems() { listPanel.clearItems(); rightItems=new Queue();} public long getSelectedSize() { return new File(getSelectedPath()).length();} public String getSelectedPath() { int idxSel=listPanel.getSelectedIndex(); String path=(String) rightItems.getQueueRecord(idxSel); return path;} public String getSelectedName() { return listPanel.getItemSelected();} public void selectNothing() { super.selectNothing(); enableUnpackBtn(false);} public void addItem(String item,String fullPath) { listPanel.addItem(item); rightItems.enqueueQueueRecord(fullPath);}} class LeftMintPanel extends CommonDataArrayPanel { ListPanel listPanel; LeftPackBtnPanel packPanel; SizeMintPanel sizePanel; AveragePanel avgPanel; private LongTermCtrl longTermCtrl; private Queue leftItems=new Queue(); public LeftMintPanel(LongTermCtrl longTermCtrl) { super(); this.longTermCtrl=longTermCtrl;} public LeftPackBtnPanel getPackPanel() { return packPanel;} protected Panel obtainControlsPanel() { this.packPanel=new LeftPackBtnPanel(); return packPanel;} protected SizePanel obtainSizePanel() { this.sizePanel=new SizeMintPanel(); return sizePanel;} protected AveragePanel obtainAveragePanel() { this.avgPanel=SidePanelFactory.createUsualAveragePanel(); return avgPanel;} protected ListPanel obtainListPanel() { this.listPanel=new ListPanel(new StatMintPanel("project"),new MintPagesPanel()); return listPanel;} public Color getPanelBgColor() { return Props.bgSizePanelColor;} protected Color getWrapPanelColor() { return Props.bgStatPanelColor;} ProjProcessor leftSelected(LoggingVkusnjashki logPanel,ProjParallelPanel quadePanel) { int idxSel=getSelectedIdx(); String curSel=getSelectedName(); String path=getSelectedPath(); long size=getSelectedSize(); logPanel.addLog("Selected item "+path); ProjProcessor sp=(MintInfoPanel) quadePanel.assignSource(curSel,path,"","",idxSel); setPosition(""+(idxSel+1)); setItemSize(""+new Metr(size).repr(',')); return sp;} public Button getPackBtn() { return packPanel.getBtPack();} public Button getPackAllBtn() { return packPanel.getBtPackAll();} public void enablePackAllBtn(boolean enable) { packPanel.getBtPackAll().enable(enable);} public Button getAutoBtn() { return packPanel.getBtAuto();} public void dropBtnSkipPosition() { packPanel.dropBtnSkipPosition();} public String[] getItems() { int ln=listPanel.itemsNum(); String[] result=new String[ln]; for(int i=0; i < ln; i++) result[i]=listPanel.getItem(i); return result;} public void enableCtrls(boolean enable) { listPanel.listEnable(enable);} public String getSelectedName() { int idxSel=listPanel.getSelectedIndex(); String fullPath=((MintProjItem) leftItems.getQueueRecord(idxSel)).fullPath; return new Ester(fullPath).sub(1+(new Ester(fullPath).indexX('/') > new Ester(fullPath).indexX('\\') ? new Ester(fullPath).indexX('/') : new Ester(fullPath).indexX('\\'))).toString();} public void selectNothing() { super.selectNothing(); enablePackBtn(false);} public void enablePackBtn(boolean enable) { packPanel.getBtPack().enable(enable);} public String getSelectedPath() { int idxSel=listPanel.getSelectedIndex(); String path=((MintProjItem) leftItems.getQueueRecord(idxSel)).fullPath; return path;} public long getSelectedSize() { int idxSel=listPanel.getSelectedIndex(); long size=((MintProjItem) leftItems.getQueueRecord(idxSel)).size; return size;} public void clearItems() { listPanel.clearItems(); leftItems=new Queue();} public void updateOnUiThread(AverageRec mar) { updateMinMaxAvg(mar); enablePackAllBtn(listPanel.itemsNum() > 0 && !longTermCtrl.hasLongTermContin());} public void addItem(String item,String fullPath,long cps) { listPanel.addItem(item); leftItems.enqueueQueueRecord(new MintProjItem(fullPath,cps));} public void enableAutoBtn(boolean enable) { packPanel.getBtAuto().enable(enable);}} class MintProjItem { String fullPath; long size; public MintProjItem(String fullPath,long size) { super(); this.fullPath=fullPath; this.size=size;}} class RightUnpackBtnPanel extends ControlsPanel { final static String BT_UNPACK="btUnpack"; public RightUnpackBtnPanel() { super();} public Button getBtUnpack() { return(Button) getCtrl(BT_UNPACK);} public Color getPanelBgColor() { return Props.bgCtrlPanelColor;} protected void buildPanel() { append(BT_UNPACK,new Button("Unpack"));} public void enableCtrls(boolean enable) {((Button) getCtrl(BT_UNPACK)).enable(enable);}} class LeftPackBtnPanel extends ControlsPanel { final static String BT_PACK="btPack"; final static String BT_PACK_ALL="btPackAll"; public LeftPackBtnPanel() { super();} public Color getPanelBgColor() { return Props.bgCtrlPanelColor;} public LayoutManager getPanelLayout() { return new FlowLayout(FlowLayout.CENTER,1+1,1+1);} public Button getBtPack() { return(Button) getCtrl(BT_PACK);} public Button getBtPackAll() { return(Button) getCtrl(BT_PACK_ALL);} public Button getBtAuto() { return getAutoBtn().getBtAuto();} protected void buildPanel() { append(BT_PACK,new Button("Pack")); append(BT_PACK_ALL,new Button("Pack All")); append("mintAutoConf",new MintAutoConf());} public void enableCtrls(boolean enable) {((Button) getCtrl(BT_PACK)).enable(enable);((Button) getCtrl(BT_PACK_ALL)).enable(enable); getAutoBtn().enableCtrl(enable);}} class MintAutoConf extends YellowAutoButton { public MintAutoConf() { super();}} class StatMintPanel extends AmountPanel { public StatMintPanel(String criteriaName) { super(criteriaName,"item(s)");} public StatMintPanel(String criteriaName,String itemsName) { super(criteriaName,itemsName);} protected int getPosWidth() { return super.getPosWidth()-1-1-1;} protected int getAmountWidth() { return super.getAmountWidth()-1-1-1;} public Color getPanelBgColor() { return Props.bgAmountPanelColor;}} class SizeMintPanel extends SizePanel { public SizeMintPanel() { super("byte(s)",true);} public Color getPanelBgColor() { return Props.bgSizePanelColor;} protected int getItemSizeWidth() { return 5+5;} protected int getTotalSizeWidth() { return 5+5;}} class ScanProjRightTask extends ProgressMultiTasking { RightMintPanel rightPanel; MintLogPanel logPanel; MintPathPanel pathPanel; private String path; private Metr amount=new Metr(); private Metr size=new Metr(); private AverageRec ar=new AverageRec(); private ExpectHere expectHere; public ScanProjRightTask(RightMintPanel rightPanel,String path,MintLogPanel logPanel,ExpectHere eh,MintPathPanel pathPanel) { super(); this.rightPanel=rightPanel; this.path=path; this.logPanel=logPanel; this.expectHere=eh; this.pathPanel=pathPanel;} public String getPath() { return path;} public Metr getAmount() { return amount;} public Metr getSize() { return size;} public AverageRec getAr() { return ar;} public RightMintPanel getRightPanel() { return rightPanel;} public MintLogPanel getLogPanel() { return logPanel;} protected void performTask() { Time t=new Time(); t.start(); updateStat(); scanItems(path,LoadSave.DEREVO); t.trust(); logPanel.addLogComplete("Backups scan complete "+t.ess()); if(expectHere !=null) expectHere.markAsReached();} protected void scanItems(String path,String ext) { Ester[] start=new Files().tree(new Ester(path)); Ester[] select=new Filter().endsWithIncensitive(start,new Ester(ext)); Ester[] selectNames=new Filter().cutStart(select,new Ester(path)); if(select.length > 0) for(int i=0; i < select.length && pathPanel.hasLongTermContin(); i++) { rightPanel.addItem(selectNames[i].toString(),select[i].toString()); amount.inc(1); size.inc(new File(select[i].toString()).length()); updateStat(); recountComplete(i+1,select.length);} else { recountComplete(1,1+1); new Sleeper().sleep(166); recountComplete(1+1,1+1);}} protected void updateStat() { Metr m=new Metr(0); m.inc(amount); displayAmount(m); m=new Metr(0); m.inc(size); displaySize(m);} void displayAmount(Metr m) { Ester repr=m.repr(' '); rightPanel.setAmount(new Ester("0").eq(repr) ? "" : repr.toString());} void displaySize(Metr m) { Ester repr=m.repr(','); rightPanel.setSize(new Ester("0").eq(repr) ? "" : repr.toString());}} class ScanProjLeftTask extends ProgressMultiTasking { LeftMintPanel leftPanel; MintLogPanel logPanel; MintPathPanel pathPanel; private String path; Metr amount=new Metr(); Metr size=new Metr(); AverageRec ar=new AverageRec(); private ExpectHere expectHere; private boolean opSingle; public ScanProjLeftTask(LeftMintPanel leftPanel,String path,MintLogPanel logPanel,ExpectHere eh,boolean opSingle,MintPathPanel pathPanel) { super(); this.leftPanel=leftPanel; this.path=path; this.logPanel=logPanel; this.expectHere=eh; this.opSingle=opSingle; this.pathPanel=pathPanel;} public LeftMintPanel getLeftPanel() { return leftPanel;} public MintLogPanel getLogPanel() { return logPanel;} public String getPath() { return path;} public Metr getAmount() { return amount;} public Metr getSize() { return size;} public AverageRec getAr() { return ar;} void displayAmount(Metr m) { Ester repr=m.repr(' '); leftPanel.setAmount(new Ester("0").eq(repr) ? "" : repr.toString());} void displaySize(Metr m) { Ester repr=m.repr(','); leftPanel.setSize(new Ester("0").eq(repr) ? "" : repr.toString());} protected void performTask() { Time t=new Time(); t.start(); updateStat(); scanItems(path,""); t.trust(); logPanel.addLogComplete("Source scan complete "+t.ess()); leftPanel.enableAutoBtn(true==opSingle); if(opSingle) pathPanel.disableStop(); if(expectHere !=null) expectHere.markAsReached();} protected void updateStat() { Metr m=new Metr(0); m.inc(amount); displayAmount(m); m=new Metr(0); m.inc(size); displaySize(m); displayAvg();} protected void displayAvg() {} protected void scanItems(String path,String ext) { MintProjEstimation mpe=new MintProjEstimation(); String[] items=new File(path).list(); if(items !=null && items.length > 0) for(int i=0; i < items.length && pathPanel.hasLongTermContin(); i++) { String item=items[i]; if(item.charAt(0)=='.') continue; File it=new File(path+item); if(it.isDirectory()) { ar.start(); long cps=mpe.countProjectSize(it.getAbsolutePath()); leftPanel.addItem(it.getName(),it.getAbsolutePath(),cps); logPanel.addLog("Registered item "+item); amount.inc(1); size.inc(cps); ar.trust(); updateStat();} recountComplete(i+1,items.length);} else { recountComplete(1,1+1); new Sleeper().sleep(166); recountComplete(1+1,1+1);}}} class MnogaCommand { public final static int ID_READY=1; public final static int ID_INIT=1+1; public final static int ID_READ_SOURCE=1+1+1; public final static int ID_BACKUP=1+1+1+1; public final static int ID_READ_BACKUP=1+1+1+1+1; public final static int ID_RESTORE=1+1+1+1+1+1; public final static int ID_MULTY_BACKUP=1+1+1+1+1+1+1; private int id; protected boolean complete; MnogaCommand(int id) { super(); this.id=id; this.complete=false;} public static MnogaCommand create(int cmdId) { MnogaCommand cmd=null; switch(cmdId) { case ID_READY : case ID_INIT : cmd=new MnogaCommand(cmdId); break;} return cmd;} public int getId() { return id;} public boolean isComplete() { return complete;}} class ReadBackupMnogaCommand extends MnogaCommand { private String name; private String path; public ReadBackupMnogaCommand(String name,String path) { super(ID_READ_BACKUP); this.name=name; this.path=path;} public String getName() { return name;} public String getPath() { return path;}} class ReadMnogaCommand extends MnogaCommand { private String name; private String path; public ReadMnogaCommand(String name,String path) { super(ID_READ_SOURCE); this.name=name; this.path=path;} public String getName() { return name;} public String getPath() { return path;}} class UnpackMnogaCommand extends MnogaCommand { private boolean needSave; private boolean needClear; private ReadyFree readyFree; public UnpackMnogaCommand(boolean needSave,ReadyFree readyFree,boolean needClear) { super(ID_RESTORE); this.needSave=needSave; this.readyFree=readyFree; this.needClear=needClear;} public ReadyFree getReadyFree() { return readyFree;} public boolean isNeedSave() { return needSave;} public boolean isNeedClear() { return needClear;}} class PackAllMnogaCommand extends MnogaCommand { private boolean needSave; private boolean needClear; private ReadyFree readyFree; private String[] items; private String srcPath; private String dstPath; public PackAllMnogaCommand(boolean needSave,ReadyFree readyFree,boolean needClear,String[] items,String srcPath,String dstPath) { super(ID_MULTY_BACKUP); this.needSave=needSave; this.readyFree=readyFree; this.needClear=needClear; this.items=items; this.srcPath=srcPath; this.dstPath=dstPath;} public ReadyFree getReadyFree() { return readyFree;} public boolean isNeedSave() { return needSave;} public boolean isNeedClear() { return needClear;} public String[] getItems() { return items;} public String getSrcPath() { return srcPath;} public String getDstPath() { return dstPath;}} class PackMnogaCommand extends MnogaCommand { private boolean needSave; private boolean needClear; private ReadyFree readyFree; public PackMnogaCommand(boolean needSave,ReadyFree readyFree,boolean needClear) { super(ID_BACKUP); this.needSave=needSave; this.readyFree=readyFree; this.needClear=needClear;} public ReadyFree getReadyFree() { return readyFree;} public boolean isNeedSave() { return needSave;} public boolean isNeedClear() { return needClear;}} interface ProjProcessor { boolean isReadyFree(); PieChartPanel getPieChartPanel(); void readSource(String name,String path,String looking,String relPath,int idxSel); void packItem(); void packAllItems(String[] items,String srcPath,String dstPath); void unpackItem(); void readBackup(String name,String path);} class MintCommandQueue { private Queue itemsQueue=new Queue(); public MintCommandQueue() { super();} public void push(MnogaCommand cmd) { itemsQueue.enqueueQueueRecord(cmd);} public boolean hasSomeWork() { return itemsQueue.isEmptyQueue()==false;} public MnogaCommand nextCurrent() { MnogaCommand cmd=(MnogaCommand) itemsQueue.dequeueQueueRecord(); return cmd;}} class AcceptRejectPanel extends Panel { Button btAccept; Button btReject; String question; public AcceptRejectPanel() { super(); setLayout(new FlowLayout(FlowLayout.RIGHT)); setBackground(Color.white); add("West",btAccept=new Button("Accept")); add("East",btReject=new Button("Reject")); btAccept.enable(false); btReject.enable(false);} public Button getBtAccept() { return btAccept;} public Button getBtReject() { return btReject;} public void setQuestion(String question) { this.question=question;} public void displayQuestion() {} public void enableBtns() {}} class DeleteAsk extends Ask implements Runnable { AcceptRejectPanel askPanel; public DeleteAsk(String question,AcceptRejectPanel askPanel) { super(question); this.askPanel=askPanel; askPanel.setQuestion(question);} public void run() {} public boolean areYouSure() { askPanel.displayQuestion(); askPanel.enableBtns(); return super.areYouSure();} public AcceptRejectPanel getAskPanel() { return askPanel;}} class ProjNamePanel extends Panel { TextField tfSrcName; TextField tfPath; TextField tfBackupPath; public ProjNamePanel() { super(); setLayout(new BorderLayout()); setBackground(Color.lightGray); add("West",tfSrcName=new TextField(12-1-1-1-1-1-1-1+5+5+5+5-5-5-5-5+1+1)); add("Center",tfPath=new TextField()); add("South",tfBackupPath=new TextField()); tfSrcName.setEditable(false); tfPath.setEditable(false); tfBackupPath.setEditable(false);} public TextField getTfSrcName() { return tfSrcName;} public TextField getTfPath() { return tfPath;} public TextField getTfBackupPath() { return tfBackupPath;} public void setPath(String name,String path,String bcPath) { tfPath.setText(path); if(name !=null && name.length() > 0) tfBackupPath.setText(bcPath+name+LoadSave.BSL+LoadSave.DEREVO);} public void setPath2(String name,String path,String bcPath) { tfPath.setText(path); if(name !=null && name.length() > 0) tfBackupPath.setText(bcPath+name);} public void setSrcName(String txt) { tfSrcName.setText(txt);} public void setBackupPath(String txt) { tfBackupPath.setText(txt);} public String getPath() { return tfPath.getText();} public void setPathText(String txt) { tfPath.setText(txt);} public String getBackupPath() { return tfBackupPath.getText();} public String getSrcName() { return tfSrcName.getText();}} class MoorFeePteachErr { private int ln; private Ester curLine=new Ester(""); private Ester total=new Ester(""); public MoorFeePteachErr(int ln) { super(); this.ln=ln;} public void pushItem(String name) { if(name !=null && name.length() > 0) { name+=" "; for(int i=0; i < name.length(); i++) { if(curLine.length() < ln) curLine.append(name.charAt(i)); else { total.append(curLine).append('\n'); curLine=new Ester(""); curLine.append(name.charAt(i));}}}} public String getNames() { total.append(curLine); curLine=new Ester(""); return total.toString();}} class ReportMintZone extends Panel { TextArea taSource; PieChartPanel pieChartPanel; public ReportMintZone() { super(); setBackground(Props.bgSizePanelColor); setLayout(new GridLayout(1+1,1,getBorderSpace()+1,getBorderSpace())); add(taSource=new TextArea()); taSource.setEditable(false); add(createPanelColorfullWrap(pieChartPanel=new PieChartPanel(true,true),Props.bgStatPanelColor,true));} private Panel createPanelColorfullWrap(Component comp,Color wrapColor,boolean f2) { LabeledPanel ignorePanelWrap=new LabeledPanel("",comp,LabeledPanel.DEF_WRAP_SIZE,wrapColor,wrapColor,wrapColor,f2,!true,true,true); return ignorePanelWrap;} public int getBorderSpace() { return 1+1;} public void setSource(String src) { taSource.setText(src);} public TextArea getTaSource() { return taSource;} public PieChartPanel getPieChartPanel() { return pieChartPanel;} public void setText(String source) { taSource.setText(source); if(source !=null && new Ester("backup").eq(new Ester(source))) { pieChartPanel.clearItems(); pieChartPanel.refreshUpdatableChart(); pieChartPanel.refreshUpdatableLegend();}} public void setOniSource(OniSource oniSrc) { setText(oniSrc.getSource()); pieChartPanel.clearItems(); Ester[] oni=oniSrc.getOni(); for(int i=0; i < oni.length; i++) { if(oni[i] !=null && oni[i].contains(new Ester("__Total_"))) continue; MintSplitter lineSplit=new MintSplitter(oni[i]).split(); pieChartPanel.appendItem(lineSplit.getRecordName(),lineSplit.getCountInt(),lineSplit.getTotalSizeLong());} pieChartPanel.changePieChartType();}} class OniSource { private String source; private Ester[] oni; public OniSource(String source,Ester[] oni) { super(); this.source=source; this.oni=oni;} public String getSource() { return source;} public Ester[] getOni() { return oni;}} class MintInfoPanel extends AbstractApproach implements ProjProcessor { ProjNamePanel sourceNamePanel; AcceptRejectPanel askPanel; ReportMintZone repZone; private String name; private String path; PanelAg panelAg; private ReadyFree readyFree; private MintCommandQueue cq=new MintCommandQueue(); public MintInfoPanel(PanelAg panelAg) { super(); setLayout(new BorderLayout()); setBackground(Color.lightGray); this.panelAg=panelAg; add("North",sourceNamePanel=new ProjNamePanel()); add("Center",repZone=new ReportMintZone()); add2("South",askPanel=new AcceptRejectPanel()); this.readyFree=new ReadyFree();} public ProjNamePanel getSourceNamePanel() { return sourceNamePanel;} public AcceptRejectPanel getAskPanel() { return askPanel;} public String getName() { return name;} public String getPath() { return path;} void add2(String loc,Component comp) {} public static String line(String param) throws IOException { return null;} public boolean isReadyFree() { return readyFree.isFree();} public PieChartPanel getPieChartPanel() { return repZone.getPieChartPanel();} public void doIt(Params params) { if(params !=null) { if(params.areYou(ProjParallelPanel.CMD_READ_BCK)) readBackup(params.getParam("name"),params.getParam("path")); else if(params.areYou(ProjParallelPanel.CMD_READ_SRC)) readSource(params.getParam("name"),params.getParam("path"),params.getParam("looking"),params.getParam("relPath"),params.getParamInteger("idxSel").intValue());}} public void clearPanel() {} public void readBackup(String name,String path) { MnogaCommand cmd=new ReadBackupMnogaCommand(name,path); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} public void readSource(String name,String path,String looking,String relPath,int idxSel) { MnogaCommand cmd=new ReadMnogaCommand(name,path); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} public void unpackItem() { readyFree.setBusy(); MnogaCommand cmd=new UnpackMnogaCommand(true,readyFree,true); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} public void packAllItems(String[] items,String srcPath,String dstPath) { readyFree.setBusy(); MnogaCommand cmd=new PackAllMnogaCommand(true,readyFree,true,items,srcPath,dstPath); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} public void packItem() { readyFree.setBusy(); MnogaCommand cmd=new PackMnogaCommand(true,readyFree,true); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} public static OniSource loadSource(String path) throws IOException { Extensions extensions=new Extensions(); boolean asta=false; Ester[] oni=extensions.assort(new Ester(path),asta); Ester result=new Ester(""); delim(result,110); result.append('\n'); for(int i=0; i < oni.length; i++) result.append(oni[i]).append('\n'); delim(result,110); result.append('\n'); Ester[] items=new MintProjEstimation().getContentItems(path); if(MintProjEstimation.needSort) new Order().order(items); MoorFeePteachErr fs=new MoorFeePteachErr(110-20-20-10+5+1); for(int i=0; i < items.length; i++) { String name=new File(items[i].toString()).getName(); fs.pushItem(name);} result.append(fs.getNames()); result.append('\n'); delim(result,110); return new OniSource(result.toString(),oni);} private static void delim(Ester result,int ln) { for(int i=0; i < ln; i++) result.append('-');} private void interpret(MnogaCommand cmd) { switch(cmd.getId()) { case MnogaCommand.ID_READY : break; case MnogaCommand.ID_INIT : break; case MnogaCommand.ID_READ_SOURCE : readSource((ReadMnogaCommand) cmd); break; case MnogaCommand.ID_BACKUP : backupTansform((PackMnogaCommand) cmd); break; case MnogaCommand.ID_READ_BACKUP : readBackup((ReadBackupMnogaCommand) cmd); break; case MnogaCommand.ID_RESTORE : restoreTansform((UnpackMnogaCommand) cmd); break; case MnogaCommand.ID_MULTY_BACKUP : backupAllTansform((PackAllMnogaCommand) cmd); break;}} private void readSource(ReadMnogaCommand cmd) { name=cmd.getName(); sourceNamePanel.setSrcName(name); path=cmd.getPath(); sourceNamePanel.setPath(name,path,panelAg.getPathPanel().getPath2Text()); OniSource oniSrc=null; if(path !=null && path.length() > 0) try { oniSrc=loadSource(path);} catch(IOException ex) { System.out.println("Can't read "+path+" . "+ex.getMessage()); ex.printStackTrace(); panelAg.getLogPanel().addLog("Can't read "+path+" . "+ex.getMessage());} repZone.setOniSource(oniSrc);} private void readBackup(ReadBackupMnogaCommand cmd) { name=cmd.getName(); boolean skip=false; if(name !=null && new Ester(name).eq(new Ester(LoadSave.DEREVO))) { sourceNamePanel.setSrcName("All"); skip=true;} else sourceNamePanel.setSrcName(capitalize(extractName(name).toString())); path=cmd.getPath(); String projPath=panelAg.getPathPanel().getPathText()+(!skip ? sourceNamePanel.getSrcName() : ""); sourceNamePanel.setPath2(name,projPath,panelAg.getPathPanel().getPath2Text()); String source=""; if(path !=null && path.length() > 0) try { source=loadBackup(path);} catch(IOException ex) { System.out.println("Can't read "+path+" . "+ex.getMessage()); ex.printStackTrace(); panelAg.getLogPanel().addLog("Can't read "+path+" . "+ex.getMessage());} repZone.setText(source);} private String capitalize(String str) { if(str !=null && str.length() > 0) { char ch=str.charAt(0); return(""+ch).toUpperCase()+new Ester(str).sub(1).toString();} return "";} private Ester extractName(String name) { Data dt=new Data(); return dt.replace(dt.replace(dt.replace(new Ester(name),new Ester(LoadSave.DEREVO),new Ester("")),new Ester(LoadSave.SL),new Ester("")),new Ester(LoadSave.BSL),new Ester(""));} private String loadBackup(String path2) throws IOException { return "backup";} private void restoreTansform(UnpackMnogaCommand cmd) { ar.start(); try { String srcPath=sourceNamePanel.getTfPath().getText(); String bcPath=sourceNamePanel.getTfBackupPath().getText(); panelAg.getLogPanel().addLog("Starting restore "+srcPath+" to "+bcPath); boolean result=new LoadSave().load(bcPath,srcPath); panelAg.getLeftPanel().clearItems(); new ScanProjLeftTask(panelAg.getLeftPanel(),panelAg.getPathPanel().getPathText(),panelAg.getLogPanel(),null,false,panelAg.getPathPanel()).run(); panelAg.getLogPanel().addLog("Loading "+bcPath+" "+(result ? "SUCCES" : "FAIL")); readyFree.setFree();} catch(IOException ex) { System.out.println("Can't transform "+path+" . "+ex.getMessage()); ex.printStackTrace(); panelAg.getLogPanel().addLog("Can't transform "+path+" . "+ex.getMessage());} ar.trust();} private void backupAllTansform(PackAllMnogaCommand cmd) { ar.start(); try { String[] backupItems=cmd.getItems(); String srcPath=cmd.getSrcPath(); String bcPath=cmd.getDstPath(); sourceNamePanel.setSrcName("All"); bcPath+=LoadSave.DEREVO; sourceNamePanel.setBackupPath(bcPath); panelAg.getLogPanel().addLog("Starting backup "+srcPath+" to "+bcPath); sourceNamePanel.setPathText(srcPath); boolean result=new LoadSave().saveMultyFiltered(srcPath,backupItems,bcPath); panelAg.getRightPanel().clearItems(); new ScanProjRightTask(panelAg.getRightPanel(),panelAg.getPathPanel().getPath2Text(),panelAg.getLogPanel(),null,panelAg.getPathPanel()).run(); panelAg.getLogPanel().addLog("Saving "+bcPath+" "+(result ? "SUCCES" : "FAIL")); readyFree.setFree();} catch(IOException ex) { System.out.println("Can't transform "+path+" . "+ex.getMessage()); ex.printStackTrace(); panelAg.getLogPanel().addLog("Can't transform "+path+" . "+ex.getMessage());} ar.trust();} private void backupTansform(PackMnogaCommand cmd) { ar.start(); try { String srcPath=sourceNamePanel.getPath(); String bcPath=sourceNamePanel.getBackupPath(); panelAg.getLogPanel().addLog("Starting backup "+srcPath+" to "+bcPath); boolean result=new LoadSave().save(srcPath,bcPath); panelAg.getRightPanel().clearItems(); new ScanProjRightTask(panelAg.getRightPanel(),panelAg.getPathPanel().getPath2Text(),panelAg.getLogPanel(),null,panelAg.getPathPanel()).run(); panelAg.getLogPanel().addLog("Saving "+bcPath+" "+(result ? "SUCCES" : "FAIL")); readyFree.setFree();} catch(IOException ex) { System.out.println("Can't transform "+path+" . "+ex.getMessage()); ex.printStackTrace(); panelAg.getLogPanel().addLog("Can't transform "+path+" . "+ex.getMessage());} ar.trust();} public void run() { while(Better.working) { if(cq.hasSomeWork()) { MnogaCommand cmd=cq.nextCurrent(); interpret(cmd);} sleeper.sleep(5 * 5);}}} class PanelAg { private MintPathPanel pathPanel; private RightMintPanel rightPanel; private LeftMintPanel leftPanel; private MintLogPanel logPanel; public PanelAg(MintPathPanel pathPanel,RightMintPanel rightPanel,LeftMintPanel leftPanel,MintLogPanel logPanel) { super(); this.pathPanel=pathPanel; this.rightPanel=rightPanel; this.leftPanel=leftPanel; this.logPanel=logPanel;} public MintPathPanel getPathPanel() { return pathPanel;} public RightMintPanel getRightPanel() { return rightPanel;} public LeftMintPanel getLeftPanel() { return leftPanel;} public MintLogPanel getLogPanel() { return logPanel;}} class ProjApproachProvider implements AbstractApproachProvider { PanelAg panelAg; public ProjApproachProvider(PanelAg panelAg) { super(); this.panelAg=panelAg;} public AbstractApproach provideApproach() { return new MintInfoPanel(panelAg);}} class ProjParallelPanel extends AbstractParallelPanel { static final String CMD_INIT_SRC="initSource"; static final String CMD_READ_SRC="readSource"; static final String CMD_INIT_BCK="initBackup"; static final String CMD_READ_BCK="readBackup"; static PanelAg ag; ProjParallelPanel(int nWidth,int nHeight) { super(nWidth,nHeight);} public MintInfoPanel assignBackup(String name,String path) { Params params=new Params(CMD_READ_BCK); params.addParam("name",name); params.addParam("path",path); AbstractApproach abstractApproach=doFirstAvail(params); return(MintInfoPanel) abstractApproach;} public void initBackup() { Params params=new Params(CMD_INIT_BCK); params.addParam("name",""); params.addParam("path",""); doAllQuick(params);} public void initSource() { Params params=new Params(CMD_INIT_SRC); params.addParam("name",""); params.addParam("path",""); doAllQuick(params);} public MintInfoPanel assignSource(String name,String path,String looking,String relPath,int idxSel) { Params params=new Params(CMD_READ_SRC); params.addParam("name",name); params.addParam("path",path); params.addParam("looking",looking); params.addParam("relPath",relPath); params.addParam("idxSel",new Integer(idxSel)); AbstractApproach abstractApproach=doFirstAvail(params); return(MintInfoPanel) abstractApproach;} public static ProjParallelPanel create(boolean quade,PanelAg panelAg) { if(panelAg !=null) ProjParallelPanel.ag=panelAg; return quade ? new ProjParallelPanel(2,1) : new ProjParallelPanel(1,1);} protected AbstractApproachProvider obtainProvider() { return new ProjApproachProvider(ag);}} class MintProjEstimation { public static boolean needSort=1+1 > 1+1; public long countProjectSize(String absolutePath) { long size=0L; Ester[] start=new Files().tree(new Ester(absolutePath)); for(int i=0; i < start.length; i++) size+=new File(start[i].toString()).length(); return size;} public Ester[] getContentItems(String absolutePath) { Ester[] start=new Files().tree(new Ester(absolutePath)); return start;}} class MintPackAllAtOnceTask extends ProgressMultiTasking { LeftMintPanel leftPanel; ProjParallelPanel quadePanel; LoggingVkusnjashki logPanel; MintPathPanel pathPanel; public MintPackAllAtOnceTask(LeftMintPanel leftPanel,ProjParallelPanel quadePanel,LoggingVkusnjashki logPanel,MintPathPanel pathPanel) { super(); this.leftPanel=leftPanel; this.quadePanel=quadePanel; this.logPanel=logPanel; this.pathPanel=pathPanel;} protected void performTask() { packAllItemsAtOnce();} private void packAllItemsAtOnce() { ProjProcessor sp; leftPanel.selectItem(0); sp=leftPanel.leftSelected(logPanel,quadePanel); sp.packAllItems(leftPanel.getItems(),pathPanel.getPathText(),pathPanel.getPath2Text()); recountComplete(1,1);}} class MintPackAllTask extends ProgressMultiTasking { LeftMintPanel leftPanel; ProjParallelPanel quadePanel; LoggingVkusnjashki logPanel; Sleeper totalSleeper; int totalSize; LongTermCtrl LongTermCtrl; public MintPackAllTask(LeftMintPanel leftPanel,ProjParallelPanel quadePanel,LoggingVkusnjashki logPanel,Sleeper totalSleeper,int totalSize,LongTermCtrl LongTermCtrl) { super(); this.leftPanel=leftPanel; this.quadePanel=quadePanel; this.logPanel=logPanel; this.totalSleeper=totalSleeper; this.totalSize=totalSize; this.LongTermCtrl=LongTermCtrl;} protected void performTask() { packItems(LongTermCtrl,totalSleeper,totalSize);} private void packItems(LongTermCtrl ltc,Sleeper sleeper,int size1) { ProjProcessor sp; System.out.print("1"); while(quadePanel.hasAvailable()==false) { sleeper.sleep(166); System.out.print("SLEEP_1");} for(int i=0; ltc.hasLongTermContin() && i < size1; i++) { leftPanel.selectItem(i); sp=leftPanel.leftSelected(logPanel,quadePanel); sp.packItem(); System.out.print("1"); while(quadePanel.hasAvailable()==false) { sleeper.sleep(166); System.out.print("SLEEP_1");} System.out.println("2"); recountComplete(i+1,size1);}}} class MintPreviewRightBackupsTask extends ProgressMultiTasking { RightMintPanel rightPanel; ProjParallelPanel quadePanel; LoggingVkusnjashki logPanel; Sleeper totalSleeper; int totalSize; LongTermCtrl LongTermCtrl; public MintPreviewRightBackupsTask(RightMintPanel rightPanel,ProjParallelPanel quadePanel,LoggingVkusnjashki logPanel,Sleeper totalSleeper,int totalSize,LongTermCtrl LongTermCtrl) { super(); this.rightPanel=rightPanel; this.quadePanel=quadePanel; this.logPanel=logPanel; this.totalSleeper=totalSleeper; this.totalSize=totalSize; this.LongTermCtrl=LongTermCtrl;} protected void performTask() { preview(totalSleeper,totalSize,LongTermCtrl);} private void preview(Sleeper sleeper,int size1,LongTermCtrl ltc) { ProjProcessor sp; for(int i=0; ltc.hasLongTermContin() && i < size1; i++) { rightPanel.selectItem(i); sp=rightPanel.rightSelected(logPanel,quadePanel); sleeper.sleep(166 * 2); System.out.print("1"); while(quadePanel.hasAvailable()==false) { sleeper.sleep(166); System.out.print("SLEEP_1");} System.out.println("2"); recountComplete(i+1,size1);} while(quadePanel.hasInProgress()) { sleeper.sleep(166); System.out.print("SLEEP_2");} System.out.println("");}} class MintPreviewTask extends ProgressMultiTasking { LeftMintPanel leftPanel; ProjParallelPanel quadePanel; LoggingVkusnjashki logPanel; Sleeper totalSleeper; int totalSize; LongTermCtrl LongTermCtrl; public MintPreviewTask(LeftMintPanel leftPanel,ProjParallelPanel quadePanel,LoggingVkusnjashki logPanel,Sleeper totalSleeper,int totalSize,LongTermCtrl LongTermCtrl) { super(); this.leftPanel=leftPanel; this.quadePanel=quadePanel; this.logPanel=logPanel; this.totalSleeper=totalSleeper; this.totalSize=totalSize; this.LongTermCtrl=LongTermCtrl;} protected void performTask() { preview(totalSleeper,totalSize,LongTermCtrl);} private void preview(Sleeper sleeper,int size1,LongTermCtrl ltc) { ProjProcessor sp; for(int i=0; ltc.hasLongTermContin() && i < size1; i++) { leftPanel.selectItem(i); sp=leftPanel.leftSelected(logPanel,quadePanel); if(i !=0) sp.getPieChartPanel().nextPieChartType(); sleeper.sleep(166 * 2); System.out.print("1"); while(quadePanel.hasAvailable()==false) { sleeper.sleep(166); System.out.print("SLEEP_1");} System.out.println("2"); recountComplete(i+1,size1);} while(quadePanel.hasInProgress()) { sleeper.sleep(166); System.out.print("SLEEP_2");} System.out.println("");}} class MintSplitter { Ester line; Ester currentDigit; Ester currentSpace; Ester currentWord; Queue readyParts=new Queue(); public MintSplitter(Ester line) { super(); this.line=line;} public long getTotalSizeLong() { return Long.parseLong(new Data().replace(new Ester(getTotalSize()),new Ester(","),new Ester("")).toString());} public String getTotalSize() { Ester shtukensPart=(Ester) readyParts.getQueueRecord(5); if(shtukensPart.eq(new Ester("shtukens"))) return((Ester) readyParts.getQueueRecord(7)).toString(); return((Ester) readyParts.getQueueRecord(5)).toString();} public int getCountInt() { return Integer.parseInt(getCount());} public String getCount() { Ester shtukensPart=(Ester) readyParts.getQueueRecord(5); if(shtukensPart !=null && shtukensPart.eq(new Ester("shtukens"))) return((Ester) readyParts.getQueueRecord(3)).toString(); Ester countPart=(Ester) readyParts.getQueueRecord(1); return countPart !=null ? countPart.toString() : "0";} public String getRecordName() { Ester shtukensPart=(Ester) readyParts.getQueueRecord(5); if(shtukensPart !=null && shtukensPart.eq(new Ester("shtukens"))) return((Ester) readyParts.getQueueRecord(1)).toString(); return "";} public MintSplitter split() { if(line !=null) for(int i=0; i < line.length(); i++) { char ch=line.at(i); push(ch);} return this;} private void push(char ch) { switch(ch) { case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : case ',' : if(currentSpace !=null) { readyParts.enqueueQueueRecord(currentSpace); currentSpace=null;} if(currentWord !=null) { currentWord.append(ch);} else { if(currentDigit==null) currentDigit=new Ester(""); currentDigit.append(ch);} break; case ' ' : case '\t' : if(currentSpace==null) currentSpace=new Ester(""); currentSpace.append(ch); if(currentWord !=null) { readyParts.enqueueQueueRecord(currentWord); currentWord=null;} if(currentDigit !=null) { readyParts.enqueueQueueRecord(currentDigit); currentDigit=null;} break; default : if(currentWord==null) currentWord=new Ester(""); currentWord.append(ch); if(currentSpace !=null) { readyParts.enqueueQueueRecord(currentSpace); currentSpace=null;} if(currentDigit !=null) { readyParts.enqueueQueueRecord(currentDigit); currentDigit=null;} break;}}}