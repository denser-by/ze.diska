package mydev.mnoga; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.util.Hashtable; public class Load implements IntBytes,StrBytes,MyNote { public Load() { super(); } public byte[] str2bytes(String str) { return new byte[0];} public String bytes2str(byte[] bb) { int zeroPos=0; while(zeroPos < bb.length && bb[zeroPos++] > 0x0A) {} char[] buf=new char[zeroPos]; zeroPos=0; while(zeroPos < bb.length && bb[zeroPos++] > 0x0A) { buf[zeroPos-1]=(char) bb[zeroPos-1];} String str=new String(buf); return str;} public byte[] encode(int num) { return new byte[0];} public int decode(byte[] rep) { int value=rep[0]+rep[1] * BASE+rep[2] * BASE * BASE+rep[3] * BASE * BASE * BASE; return value;} public static void main(String[] args) { if(args !=null && args.length > 0) { String param=args[0]; Load obj=new Load(); String save_location=obj.getSavePath(); System.out.println("   load_location="+save_location); try { obj.read_start(save_location); byte[] zBytes=obj.read_bytes(4); byte[] nBytes=obj.read_bytes(4); int Z=obj.decode(zBytes); int N=obj.decode(nBytes); System.out.println("   Z="+Z+"   N="+N); boolean yesterday=true; while(yesterday) { byte[] idNameBytes=obj.read_bytes(N); String idName=obj.bytes2str(idNameBytes); System.out.println(" "+idName); byte[] lengthBytes=obj.read_bytes(4); int length=obj.decode(lengthBytes); System.out.println("   "+length); byte[] content=obj.read_bytes(length); String outPath=param+SL+idName; System.out.println("     "+outPath); if(!outPath.equals(obj.os_path)) obj.write_start(outPath); obj.write(content);}} catch(IOException ex) { ex.printStackTrace();} finally { try { obj.write_finish();} catch(IOException ex) { ex.printStackTrace();} try { obj.read_finish();} catch(IOException ex) { ex.printStackTrace();}} System.out.println("   load_location="+save_location);} else { System.out.println("Target path is required as a parameter...");}} FileInputStream fos=null; public void read_start(String fPath) throws IOException { fos=new FileInputStream(new File(fPath));} public void read_finish() throws IOException { fos.close();} public byte[] read_bytes(int bytesCount) throws IOException { byte[] res=new byte[bytesCount]; int count=fos.read(res); if(count !=bytesCount) throw new IOException("BytesOf ne hvataet!"); return res;} public byte[] read(String fPath) throws IOException { File fOpen=new File(fPath); FileInputStream fos=new FileInputStream(fOpen); Hashtable ht=new Hashtable(); int htKey=0; int vPower=0; int count; byte[] buf=new byte[4096]; do { count=fos.read(buf); if(count > 0) vPower+=count; if(count < 1) continue; if(count <= 4096) { byte[] zzz=new byte[count]; System.arraycopy(buf,0,zzz,0,count); ht.put((Object) new Integer(htKey++),(Object) zzz);}} while(count > 0); fos.close(); byte[] total=new byte[vPower]; int totalIdx=0; for(int i=0; i < htKey; i++) { byte[] cur=(byte[]) ht.get((Object) new Integer(i)); int curLen=cur.length; System.arraycopy(cur,0,total,totalIdx,curLen); totalIdx+=curLen;} return total;} FileOutputStream os=null; String os_path=null; public synchronized void write_start(String fPath) throws IOException { write_finish(); if(os==null) { int idx=fPath.lastIndexOf(SL); int idx2=fPath.lastIndexOf(BSL); int max=idx2 > idx ? idx2 : idx; String dir=fPath.substring(0,max); new File(dir).mkdirs(); os=new FileOutputStream(new File(fPath));}} public synchronized void write(byte[] bCont) throws IOException { if(os !=null) { os.write(bCont); os.flush();}} public synchronized void write_finish() throws IOException { if(os !=null) { os.close(); os=null; os_path=null;}} String getSavePath() { File file=new File(DIRCUR); String path=file.getAbsolutePath(); path=path.substring(0,path.length()-1); return path+DEREVO;}}
