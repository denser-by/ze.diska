package mydev.ram; import java.awt.BorderLayout; import java.awt.Button; import java.awt.Canvas; import java.awt.Color; import java.awt.Event; import java.awt.FlowLayout; import java.awt.Frame; import java.awt.Graphics; import java.awt.Label; import java.awt.List; import java.awt.Panel; import java.awt.Point; import java.awt.Rectangle; import java.awt.TextArea; import java.awt.TextField; import java.util.Vector; public class Dohod extends Frame { public Dohod() { super("Dohod");} public static void main(String[] args) { Dohod main=new Dohod(); main.show(); main.make();} public void make() { CursorChanger cs=new CursorChanger(this); LeftPanel lp; NorthPanel np; setLayout(new BorderLayout()); ListNotifier lnot=new ListNotifier(); add("North",np=new NorthPanel(lnot)); add("West",lp=new LeftPanel(lnot)); add("Center",lnot.setArea(new Area(cs,new ObjectReporter(lp,np)))); pack(); resize(800,600); invalidate(); repaint();} public boolean handleEvent(Event evt) { if(evt.id==Event.WINDOW_DESTROY) { hide(); dispose();} return super.handleEvent(evt);}} class NorthPanel extends Panel { Button destroyObj; TextField editName; Button updateName; TextField editField; Button addField; Button remField; TextField editMethod; Button showMethod; Button hideMethod; ListNotifier lnot; public NorthPanel(ListNotifier lnot) { super(); this.lnot=lnot; setLayout(new FlowLayout()); add(destroyObj=new Button("Destroy")); add(new Label("Name:")); add(editName=new TextField(8)); add(updateName=new Button("Update")); add(new Label("Field:")); add(editField=new TextField(8)); add(addField=new Button("Add")); add(remField=new Button("Remove")); add(new Label("Method:")); add(editMethod=new TextField(8)); add(showMethod=new Button("Attach")); add(hideMethod=new Button("Detach")); setBackground(Color.gray); deactivate();} public boolean handleEvent(Event evt) { if(evt.id==Event.ACTION_EVENT && evt.target==destroyObj) destroyPressed(); if(evt.id==Event.ACTION_EVENT && evt.target==updateName) updatePressed(); if(evt.id==Event.ACTION_EVENT && evt.target==addField) addFieldPressed(); if(evt.id==Event.ACTION_EVENT && evt.target==remField) removeFieldPressed(); if(evt.id==Event.ACTION_EVENT && evt.target==showMethod) addMethodPressed(); if(evt.id==Event.ACTION_EVENT && evt.target==hideMethod) removeMethodPressed(); return super.handleEvent(evt);} private void removeMethodPressed() { lnot.removeMethodPressed(editMethod.getText());} private void addMethodPressed() { lnot.addMethodPressed(editMethod.getText());} private void removeFieldPressed() { lnot.removeFieldPressed(editField.getText());} private void addFieldPressed() { lnot.addFieldPressed(editField.getText());} void updatePressed() { lnot.updatePressed(editName.getText());} void destroyPressed() { lnot.destroyPressed();} public void deactivate() { boolean t=false; destroyObj.enable(t); editName.enable(t); updateName.enable(t); editField.enable(t); addField.enable(t); remField.enable(t); editMethod.enable(t); showMethod.enable(t); hideMethod.enable(t);} public void activate(String name) { boolean f=true; destroyObj.enable(f); editName.enable(f); updateName.enable(f); editName.setText(name); editField.enable(f); addField.enable(f); remField.enable(f); editMethod.enable(f); showMethod.enable(f); hideMethod.enable(f);}} class LeftPanel extends Panel { ObjList items; Button go; Button center; Button export; TextArea rc; public LeftPanel(ListNotifier lnot) { super(); setLayout(new BorderLayout()); add("North",items=new ObjList(lnot)); Panel p1=new Panel(); p1.setLayout(new FlowLayout()); p1.add(go=new Button("Go")); p1.add(center=new Button("Center")); p1.add(export=new Button("Export")); add("Center",p1); add("South",rc=new TextArea(22,16)); arg();} public boolean handleEvent(Event et) { if(et.id==Event.ACTION_EVENT && et.target==go) items.centry(); if(et.id==Event.ACTION_EVENT && et.target==center) items.modify(); if(et.id==Event.ACTION_EVENT && et.target==export) items.generate(rc); return super.handleEvent(et);} void arg() { items.addItem("List"); items.addItem("of"); items.addItem("created"); items.addItem("objects.");}} class Area extends Canvas { int w; int h; Point s1; Point s2; Point p; Vector items; CursorChanger cursorChanger; ObjectReporter orp; Rectoongle active; long lastRedraw; final int RDT=70; final int MIN_WIDTH=112; final int MIN_HEIGHT=151; final int SPS=7; final int DT=5; final int TM=9; static int elemIdx=1; public Area(CursorChanger cursorChanger,ObjectReporter orp) { super(); items=new Vector(); this.cursorChanger=cursorChanger; this.orp=orp;} public void paint(Graphics cs) { super.paint(cs); Rectangle r1=bounds(); cs.setColor(Color.black); cs.drawRect(0,0,r1.width-1,r1.height-1); cs.setColor(Color.gray); cs.drawRect(0+1,0+1,r1.width-3,r1.height-3); w=r1.width; h=r1.height; if(s1 !=null && p !=null && cursorChanger.isArrow()) { drawRamka(cs,s1,p);} for(int i=0; i < items.size(); i++) drawObject(cs,items.elementAt(i)); for(int i=0; i < items.size()-1; i++) for(int j=i+1; j < items.size(); j++) if(hasRelation(items.elementAt(i),items.elementAt(j))) drawRelation(cs,items.elementAt(i),items.elementAt(j));} private void drawRelation(Graphics cs,Object h1,Object h2) { Rectoongle r1=(Rectoongle) h1; Rectoongle r2=(Rectoongle) h2; cs.setColor(Color.black); int dx=r1.x < r2.x ? r2.x-r1.x : r1.x-r2.x; int dy=r1.y < r2.y ? r2.y-r1.y : r1.y-r2.y; if(dx > dy) { if(r1.x < r2.x) cs.drawLine(r1.x+r1.width,r1.y+r1.height / 2,r2.x,r2.y+r2.height / 2); else cs.drawLine(r2.x+r2.width,r2.y+r2.height / 2,r1.x,r1.y+r1.height / 2);} else { if(r1.y < r2.y) cs.drawLine(r1.x+r1.width / 2,r1.y+r1.height,r2.x+r2.width / 2,r2.y); else cs.drawLine(r2.x+r2.width / 2,r2.y+r2.height,r1.x+r1.width / 2,r1.y);}} private boolean hasRelation(Object h1,Object h2) { Rectoongle r1=(Rectoongle) h1; Rectoongle r2=(Rectoongle) h2; boolean res=false; String name=r2.getName(); for(int i=0; i < r1.fields.size() && !res; i++) { String field=(String) r1.fields.elementAt(i); if(field.startsWith(name)) res=true;} name=r1.getName(); for(int i=0; i < r2.fields.size() && !res; i++) { String field=(String) r2.fields.elementAt(i); if(field.startsWith(name)) res=true;} name=r2.getName(); for(int i=0; i < r1.methods.size() && !res; i++) { String method=(String) r1.methods.elementAt(i); if(method.indexOf(name) >-1) res=true;} name=r1.getName(); for(int i=0; i < r2.methods.size() && !res; i++) { String method=(String) r2.methods.elementAt(i); if(method.indexOf(name) >-1) res=true;} return res;} public boolean keyDown(Event evt,int code) { if(active !=null && code==Event.LEFT) if(checkPlace(active.x-DT,active.y,active.width,active.height)) { if(active.x-DT < DT) pushAllExcept(active,DT,0); else active.x-=DT; tryrepaint();} if(active !=null && code==Event.RIGHT) if(checkPlace(active.x+DT,active.y,active.width,active.height)) { if(active.x+active.width+DT > w-DT) pushAllExcept(active,-DT,0); else active.x+=DT; tryrepaint();} if(active !=null && code==Event.UP) if(checkPlace(active.x,active.y-DT,active.width,active.height)) { if(active.y-DT < DT) pushAllExcept(active,0,DT); else active.y-=DT; tryrepaint();} if(active !=null && code==Event.DOWN) if(checkPlace(active.x,active.y+DT,active.width,active.height)) { if(active.y+active.height+DT > h-DT) pushAllExcept(active,0,-DT); else active.y+=DT; tryrepaint();} return super.keyDown(evt,code);} private void pushAllExcept(Rectoongle obj,int dx,int dy) { for(int i=0; i < items.size(); i++) { Object el=items.elementAt(i); if(el !=null && el instanceof Rectoongle) { Rectoongle r1=(Rectoongle) el; if(r1 !=obj) { r1.x+=dx; r1.y+=dy;}}}} private boolean checkPlace(int x,int y,int width,int height) { boolean fp=isFreePlaceAct(x,y,width,height); return fp;} void activate(String name) { boolean found=false; for(int i=0; i < items.size() && !found; i++) { Object obj=items.elementAt(i); if(obj !=null && obj instanceof Rectoongle) { Rectoongle r1=(Rectoongle) obj; if(r1.getName().compareTo(name)==0) { found=true; active=r1; orp.activate(r1.getName());}}} if(found) repaint();} private void drawObject(Graphics cs,Object obj) { int sw; int sh; if(obj !=null && obj instanceof Rectoongle) { Rectoongle r1=(Rectoongle) obj; sh=cs.getFontMetrics().getAscent()+cs.getFontMetrics().getDescent(); int tv=(r1.fields()+r1.methods()+1) * sh; int fx=r1.y+28+r1.fields() * sh+sh / 2; cs.setColor(Color.black); for(int i=0; i < r1.fields(); i++) { String f1=r1.field(i); sw=cs.getFontMetrics().stringWidth(f1); cs.drawString(f1,r1.x+TM,r1.y+28+sh *(i+1)); r1.checkWidth(sw+TM+TM);} if(r1.methods() > 0) { cs.setColor(Color.black); cs.drawLine(r1.x+1,fx,r1.x+r1.width-2,fx); for(int i=0; i < r1.methods(); i++) { String m1=r1.method(i); sw=cs.getFontMetrics().stringWidth(m1); cs.drawString(m1,r1.x+TM,fx+sh *(i+1)); r1.checkWidth(sw+TM+TM);}} r1.checkHeight(tv+28); cs.setColor(obj==active ? Color.blue : Color.black); cs.drawRect(r1.x,r1.y,r1.width,r1.height); cs.setColor(Color.yellow); cs.drawRect(r1.x-1,r1.y-1,r1.width,r1.height); cs.setColor(Color.black); cs.drawRect(r1.x+1,r1.y+1,r1.width-3,28); cs.setColor(obj==active ? Color.green : Color.gray); cs.fillRect(r1.x+2,r1.y+2,r1.width-4,27); cs.setColor(Color.white); String str=r1.getName(); sw=cs.getFontMetrics().stringWidth(str); sh=cs.getFontMetrics().getHeight(); cs.drawString(str,r1.x+(r1.width-sw) / 2,r1.y+28-3 * sh / 5);}} private void drawRamka(Graphics cs,Point a,Point b) { cs.setColor(Color.gray); int x1=a.x < b.x ? a.x : b.x; int y1=a.y < b.y ? a.y : b.y; int w1=a.x < b.x ? b.x-a.x : a.x-b.x; int h1=a.y < b.y ? b.y-a.y : a.y-b.y; cs.drawRect(x1,y1,w1,h1);} Rectangle drawArea() { return new Rectangle(2,2,w-5,h-5);} public boolean mouseDown(Event et,int mx,int my) { s1=new Point(mx,my); toogleActive(s1); repaint(); return super.mouseDown(et,mx,my);} private void toogleActive(Point p) { Rectoongle found; int x1=p.x; int y1=p.y; found=null; for(int i=0; i < items.size() && found==null; i++) { Object el=items.elementAt(i); if(el !=null && el instanceof Rectangle) { Rectoongle r1=(Rectoongle) el; if(x1 >= r1.x && x1 <= r1.x+r1.width && y1 >= r1.y && y1 <= r1.y+r1.height) found=r1;}} if(found !=null) { active=found; orp.activate(found.getName());} else { active=null; orp.deactivate();}} public boolean mouseDrag(Event et,int mx,int my) { p=new Point(mx,my); processCursor(mx,my); tryrepaint(); return super.mouseDrag(et,mx,my);} public boolean mouseUp(Event et,int mx,int my) { p=null; s2=new Point(mx,my); createObject(); repaint(); return super.mouseUp(et,mx,my);} public boolean mouseMove(Event evt,int x1,int y1) { processCursor(x1,y1); tryrepaint(); return super.mouseMove(evt,x1,y1);} private void tryrepaint() { long cur=System.currentTimeMillis(); if(cur-lastRedraw > RDT) { lastRedraw=cur; repaint();}} private void processCursor(int x1,int y1) { boolean found; found=false; for(int i=0; i < items.size() && !found; i++) { Object el=items.elementAt(i); if(el !=null && el instanceof Rectangle) { Rectoongle r1=(Rectoongle) el; if(x1 >= r1.x && x1 <= r1.x+r1.width && y1 >= r1.y && y1 <= r1.y+r1.height) found=true;}} if(found) cursorChanger.setHand(); else cursorChanger.setArrow();} private void createObject() { Point a=s1; Point b=s2; boolean create; int x1=a.x < b.x ? a.x : b.x; int y1=a.y < b.y ? a.y : b.y; int w1=a.x < b.x ? b.x-a.x : a.x-b.x; int h1=a.y < b.y ? b.y-a.y : a.y-b.y; if(w1 < MIN_WIDTH) w1=MIN_WIDTH; if(h1 < MIN_HEIGHT) h1=MIN_HEIGHT; if(w1 > MIN_WIDTH) w1=MIN_WIDTH; if(h1 > MIN_HEIGHT) h1=MIN_HEIGHT; create=isFreePlace(x1,y1,w1,h1); if(create) { String name="Data_"+elemIdx++; items.addElement(active=new Rectoongle(x1,y1,w1,h1).reg(name)); orp.reg(name); orp.activate(active.getName());}} private boolean isFreePlace(int x1,int y1,int w1,int h1) { boolean create; create=true; for(int i=0; i < items.size() && create; i++) { Object el=items.elementAt(i); if(el !=null && el instanceof Rectangle) { Rectoongle r1=(Rectoongle) el; if(r1.x <= x1 && x1 <= r1.x+r1.width && r1.y <= y1 && y1 <= r1.y+r1.height) create=false; if(r1.x <= x1+w1 && x1+w1 <= r1.x+r1.width && r1.y <= y1 && y1 <= r1.y+r1.height) create=false; if(r1.x <= x1 && x1 <= r1.x+r1.width && r1.y <= y1+h1 && y1+h1 <= r1.y+r1.height) create=false; if(r1.x <= x1+w1 && x1+w1 <= r1.x+r1.width && r1.y <= y1+h1 && y1+h1 <= r1.y+r1.height) create=false;}} return create;} private boolean isFreePlaceAct(int x1,int y1,int w1,int h1) { boolean create; create=true; for(int i=0; i < items.size() && create; i++) { Object el=items.elementAt(i); if(el !=null && el instanceof Rectangle) { Rectoongle r1=(Rectoongle) el; if(active !=null && r1==active) continue; if(r1.x <= x1 && x1 <= r1.x+r1.width && r1.y <= y1 && y1 <= r1.y+r1.height) create=false; if(r1.x <= x1+w1 && x1+w1 <= r1.x+r1.width && r1.y <= y1 && y1 <= r1.y+r1.height) create=false; if(r1.x <= x1 && x1 <= r1.x+r1.width && r1.y <= y1+h1 && y1+h1 <= r1.y+r1.height) create=false; if(r1.x <= x1+w1 && x1+w1 <= r1.x+r1.width && r1.y <= y1+h1 && y1+h1 <= r1.y+r1.height) create=false;}} return create;} void destroyActive() { Rectoongle rt=active; if(rt !=null) { items.removeElement(rt); orp.unreg(rt.getName()); repaint();}} public void renameActive(String text) { Rectoongle rt=active; if(rt !=null) { orp.unreg(rt.getName()); rt.setName(text); orp.reg(text); repaint();}} public void addFieldActive(String text) { Rectoongle rt=active; if(rt !=null) { rt.regField(text); repaint();}} public void removeFieldActive(String text) { Rectoongle rt=active; if(rt !=null) { rt.unregField(text); repaint();}} public void addMethodActive(String text) { Rectoongle rt=active; if(rt !=null) { rt.regMethod(text); repaint();}} public void removeMethodActive(String text) { Rectoongle rt=active; if(rt !=null) { rt.unregMethod(text); repaint();}} public void center(String name) { boolean found=false; for(int i=0; i < items.size() && !found; i++) { Object obj=items.elementAt(i); if(obj !=null && obj instanceof Rectoongle) { Rectoongle r1=(Rectoongle) obj; if(r1.getName().compareTo(name)==0) { found=true; int x2=(w-r1.width) / 2; int y2=(h-r1.height) / 2; pushAllExcept(r1,x2-r1.x,y2-r1.y); r1.x=x2; r1.y=y2;}}} if(found) repaint();} public void modify() { int minx=0; int miny=0; int maxx=0; int maxy=0; int maxw=0; int maxh=0; for(int i=0; i < items.size(); i++) { Object obj=items.elementAt(i); if(obj !=null && obj instanceof Rectoongle) { Rectoongle r1=(Rectoongle) obj; if(i==0) { minx=r1.x; miny=r1.y; maxx=r1.x; maxy=r1.y; maxw=r1.width; maxh=r1.height;} if(r1.x < minx) minx=r1.x; if(r1.y < miny) miny=r1.y; if(r1.x > maxx) { maxx=r1.x; maxw=r1.width;} if(r1.y > maxy) { maxy=r1.y; maxh=r1.height;}}} for(int i=0; i < items.size(); i++) { Object obj=items.elementAt(i); if(obj !=null && obj instanceof Rectoongle) { Rectoongle r1=(Rectoongle) obj; r1.x-=minx; r1.y-=miny;}} int cx=(maxx+maxw-minx) / 2; int cy=(maxy+maxh-miny) / 2; Rectoongle cr=new Rectoongle(cx,cy,100,100); cr.setName("gg"+System.currentTimeMillis()); items.addElement(cr); center(cr.getName()); items.removeElement(cr); repaint();} public void create(TextArea rc) { String rep; rep=""; for(int i=0; i < items.size(); i++) { Object obj=items.elementAt(i); if(obj !=null && obj instanceof Rectoongle) { Rectoongle r1=(Rectoongle) obj; String cls=r1.getName(); if(i > 0) rep+="\n\n"; rep+="class "+cls+" {\n\n"; for(int j=0; j < r1.fields(); j++) { String field=(String) r1.field(j); rep+="  "+field+";\n";} rep+="  public "+cls+"() {\n"; rep+="  }\n\n"; for(int j=0; j < r1.methods(); j++) { String method=(String) r1.method(j); rep+="  "+method+" {\n"; rep+="  }\n\n";} rep+="}";}} rc.setText(rep);}} class Data_1 { int aaa; float bbb; public Data_1() {} void tryIt(Data_2 r) {}} class Data_2 { String help; public Data_2() {} void resume(String year) {}} class Rectoongle extends Rectangle { String name; Vector fields; Vector methods; public Rectoongle(int x,int y,int w,int h) { super(x,y,w,h); fields=new Vector(); methods=new Vector();} public void checkHeight(int h2) { if(h2 > height) height=h2;} public void checkWidth(int w2) { if(w2 > width) width=w2;} public void unregMethod(String text) { String meth; if(text.endsWith(")")) meth=text; else meth=text+"()"; if(methods.contains(meth)) methods.removeElement(meth);} public void regMethod(String text) { String meth; if(text.endsWith(")")) meth=text; else meth=text+"()"; if(!methods.contains(meth)) methods.addElement(meth);} private void test() { fields.addElement("Hello"); fields.addElement("Wind"); fields.addElement("World");} private void test2() { methods.addElement("open()"); methods.addElement("destruct()"); methods.addElement("update1()");} public void unregField(String text) { if(fields.contains(text)) fields.removeElement(text);} public String method(int i) { return(String) methods.elementAt(i);} public int methods() { return methods.size();} public String field(int i) { return(String) fields.elementAt(i);} public int fields() { return fields.size();} public void regField(String text) { if(!fields.contains(text)) fields.addElement(text);} public Rectoongle(String name) { super(); this.name=name;} Rectoongle reg(String name) { this.name=name; return this;} public String getName() { return name;} public void setName(String name) { this.name=name;}} class CursorChanger { Frame fr; boolean arrow; public CursorChanger(Frame fr) { super(); this.fr=fr;} public void setArrow() { arrow=true; fr.setCursor(Frame.DEFAULT_CURSOR);} public void setHand() { arrow=false; fr.setCursor(Frame.MOVE_CURSOR);} public boolean isArrow() { return arrow;}} class ObjectReporter { LeftPanel lp; NorthPanel np; boolean init; public ObjectReporter(LeftPanel lp,NorthPanel np) { super(); init=false; this.lp=lp; this.np=np;} public void unreg(String name) { boolean stop=false; for(int i=0; i < lp.items.countItems() && !stop; i++) { String item=lp.items.getItem(i); if(item.compareTo(name)==0) { lp.items.delItem(i); stop=true;}} if(lp.items.countItems()==0) { lp.arg(); init=false;} np.deactivate();} public void deactivate() { lp.items.deselect(lp.items.getSelectedIndex()); np.deactivate();} public void activate(String name) { boolean stop=false; for(int i=0; i < lp.items.countItems() && !stop; i++) { String item=lp.items.getItem(i); if(item.compareTo(name)==0) { lp.items.select(i); stop=true;}} np.activate(name);} public void reg(String name) { if(!init) { init=true; lp.items.clear();} lp.items.addItem(name); lp.items.select(lp.items.countItems()-1);}} class ObjList extends List { ListNotifier lnot; String lastNotified; String lastCentered; long mouseUp; public ObjList(ListNotifier lnot) { super(12,false); this.lnot=lnot;} public void generate(TextArea rc) { lnot.onCreateSrc(rc);} public void modify() { lnot.onCenterChange();} public boolean keyDown(Event et,int k) { if(k==10) centry(); return super.keyDown(et,k);} void centry() { int selItem=getSelectedIndex(); if(selItem >= 0) { String item=getItem(selItem); if(lastCentered==null) lnot.onCenterChanged(lastCentered=item); else if(item.compareTo(lastCentered) !=0) lnot.onCenterChanged(lastCentered=item);}} public boolean handleEvent(Event evt) { int selItem=getSelectedIndex(); if(selItem >= 0) { String item=getItem(selItem); if(lastNotified==null) lnot.onSelChanged(lastNotified=item); else if(item.compareTo(lastNotified) !=0) lnot.onSelChanged(lastNotified=item);} if(evt.id==Event.MOUSE_UP) mouseUp=System.currentTimeMillis(); else if(evt.id==Event.MOUSE_DOWN) if(System.currentTimeMillis()-mouseUp < 1400) centry(); return super.handleEvent(evt);}} class ListNotifier { Area notificationArea; public ListNotifier() { super();} public void onCreateSrc(TextArea rc) { if(notificationArea !=null) notificationArea.create(rc);} public void onCenterChange() { if(notificationArea !=null) notificationArea.modify();} public void onCenterChanged(String name) { if(notificationArea !=null) notificationArea.center(name);} public void removeMethodPressed(String text) { if(notificationArea !=null) notificationArea.removeMethodActive(text);} public void addMethodPressed(String text) { if(notificationArea !=null) notificationArea.addMethodActive(text);} public void removeFieldPressed(String text) { if(notificationArea !=null) notificationArea.removeFieldActive(text);} public void addFieldPressed(String text) { if(notificationArea !=null) notificationArea.addFieldActive(text);} public void updatePressed(String text) { if(notificationArea !=null) notificationArea.renameActive(text);} public void destroyPressed() { if(notificationArea !=null) notificationArea.destroyActive();} public void onSelChanged(String name) { if(notificationArea !=null) notificationArea.activate(name);} Area setArea(Area area) { this.notificationArea=area; return area;}}
