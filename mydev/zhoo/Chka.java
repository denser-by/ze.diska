package mydev.zhoo; import java.awt.BorderLayout; import java.awt.Button; import java.awt.Choice; import java.awt.Color; import java.awt.Component; import java.awt.Event; import java.awt.FlowLayout; import java.awt.Frame; import java.awt.Label; import java.awt.LayoutManager; import java.awt.List; import java.awt.Panel; import java.awt.Point; import java.awt.TextArea; import java.awt.TextField; import java.io.File; import java.io.IOException; import mydev.aaa.Sleeper; import mydev.anim.ColorsLogo; import mydev.bbb.Enter2; import mydev.bbb.Location; import mydev.onewayc.OneWayConv; import mydev.uix.AbstractApproach; import mydev.uix.AbstractApproachProvider; import mydev.uix.AbstractParallelPanel; import mydev.uix.AmountPanel; import mydev.uix.AveragePanel; import mydev.uix.Better; import mydev.uix.ChoiceFactory; import mydev.uix.CommonDataArrayPanel; import mydev.uix.CommonLogPanel; import mydev.uix.CommonLogo; import mydev.uix.CommonSouthPanel; import mydev.uix.ControlsPanel; import mydev.uix.HeaderPathPanel; import mydev.uix.IgnorePanel; import mydev.uix.LabeledEditPair; import mydev.uix.LabeledPanel; import mydev.uix.ListPanel; import mydev.uix.LoggingVkusnjashki; import mydev.uix.LongTermCtrl; import mydev.uix.MultyButtonTiersBuilder; import mydev.uix.PagesPanel; import mydev.uix.Params; import mydev.uix.ProgressBar; import mydev.uix.ProgressMultiTasking; import mydev.uix.PropertySetPanel; import mydev.uix.Props; import mydev.uix.SidePanelFactory; import mydev.uix.SizePanel; import mydev.uix.Timer; import mydev.uix.ToogleMultyButton; import mydev.uix.YellowAutoButton; import mydev.vutils.AverageRec; import mydev.vutils.Data; import mydev.vutils.Ester; import mydev.vutils.ExpectHere; import mydev.vutils.Files; import mydev.vutils.Filter; import mydev.vutils.Join; import mydev.vutils.Karta; import mydev.vutils.Metr; import mydev.vutils.Order; import mydev.vutils.Queue; import mydev.vutils.ReadyFree; import mydev.vutils.Time; public class Chka extends Frame implements Runnable,LongTermCtrl { ChkaPathPanel pathPanel; LeftPackageItemsPanel leftPanel; RightTasksPanel taskPanel; MainClsParallelPanel quadePanel; ZhooChkaSouthPanel southPanel; ChkaLogPanel logPanel; String pathParam; String leftPanelParam; MainClsProcessorHolder spCurrentHolder=new MainClsProcessorHolder(); public Chka(String title) { super(title); setLayout(new BorderLayout()); setBackground(Color.darkGray);} public static void main(String[] args) throws IOException { Chka main=new Chka("Leaves Days Zhukistry"); if(args.length > 0) { String param=args[0]; main.setPathParam(param); return;} else { System.out.println("Please specify source file as a parameter.");} main.show(); main.start(); main.pack(); main.reMoveRnd(); main.resize(Enter2.instance().getMainWindowsWidth(),Enter2.instance().getMainWindowsHeight()); Sleeper sleeper=new Sleeper(); while(Better.working) { main.refreshUpdatable(); sleeper.sleep(Timer.DEF_REF_TIME);} main.hide(); main.dispose(); System.exit(1-1);} public void setPathParam(String path) { this.pathParam=path; File file=new File(path); String fullPath=file.getAbsolutePath(); if(file.isDirectory()) updateInfo(null,true); else { String item=file.getName(); leftPanelParam=item; leftPanel.addItem(item,fullPath);}} protected void reMoveRnd() { Location ol=Enter2.instance().location(); Point p=ol.getRandomExternalPos((short) Location.MAIN_WINDOWS_WIDTH,(short) Location.MAIN_WINDOWS_HEIGHT); move(p.x,p.y);} public boolean hasLongTermContin() { return pathPanel.hasLongTermContin();} public boolean handleEvent(Event et) { if(et.id==Event.WINDOW_DESTROY) new Better().exitApplicationLoop(); if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getBtScan()) { logPanel.prognoseTasks(1); leftPanel.clearAvgPanel(); updateInfo(null,true); quadePanel.clearAverage(); taskPanel.clearTasks();} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getCbCancelIgnore()) leftPanel.onCancelIgnore(); if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getBtStop()) pathPanel.disableStop(); if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getBtMulty()) { pathPanel.switchQuade(); cRemake(); pack(); invalidate(); repaint();} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getBtReview()) { logPanel.prognoseTasks(1); leftPanel.clearAvgPanel(); quadePanel.clearAverage(); taskPanel.clearTasks(); reviewLeftItems();} if(et.id==Event.LIST_SELECT && leftPanel.isItemsCtrl(et.target)) { taskPanel.selectNothing(); quadePanel.initSource(); spCurrentHolder.setSpCurrent(leftSelected());} if(et.id==Event.LIST_SELECT && taskPanel.isItemsCtrl(et.target)) { leftPanel.selectNothing(); RightTask rightTask=taskPanel.getSelected(); logPanel.addLog("Select task "+rightTask.getAction()+" for "+rightTask.getOnWhat()+" with "+rightTask.getPblClsNameRecord()+" from "+rightTask.getLocated()+" to "+rightTask.getResult()); rightSelected();} if(et.id==Event.ACTION_EVENT && et.target==taskPanel.getCtrlPanel().getBtnPanel().getBtSave()) { taskPanel.getCtrlPanel().getBtnPanel().enableSave(false); rightSelectedSave();} if(et.id==Event.ACTION_EVENT && et.target==taskPanel.getCtrlPanel().getBtnPanel().getBtSaveAll()) { taskPanel.getCtrlPanel().getBtnPanel().enableSaveAll(false); leftPanel.enableCtrls(false); leftPanel.enableLunch(false); leftPanel.enableAuto(false); rightSelectedSaveAll(this,new Sleeper(),true);} if(et.id==Event.ACTION_EVENT && et.target==taskPanel.getCtrlPanel().getBtnPanel().getBtDeleteAll()) { taskPanel.getCtrlPanel().getBtnPanel().enableDeleteAll(false); taskPanel.clearTasks(); leftPanel.dropBtnSkipPosition(); leftPanel.enableAuto(true);} if(et.id==Event.ACTION_EVENT && et.target==pathPanel.getChPreview()) { if(pathPanel.getPreview()) pathPanel.setPath("C:\\Users\\dzianis\\workspace\\"); else pathPanel.setPath("C:\\Users\\dzianis\\workspace\\");} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getConfigBtn()) { processConfig(); leftPanel.regConfigPress();} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getCheckBtn()) { processCheck(); leftPanel.regCheckPress();} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getBinBtn()) { processBin(); leftPanel.regBinPress();} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getInfoBtn()) { processInfo(); leftPanel.regInfoPress();} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getLunchBtn()) { String relPath=leftPanel.getItem(leftPanel.getSelectedIdx()); spCurrentHolder.getSpCurrent().processLunch(relPath); leftPanel.enableLunch(false);} if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getAutoBtn()) { logPanel.prognoseTasks(1+1+1); leftPanel.clearAvgPanel(); quadePanel.clearAverage(); taskPanel.clearTasks(); leftPanel.clearItems(); autoLines();} return super.handleEvent(et);} protected void reviewLeftItems() { leftPanel.enableBtAuto(false); leftPanel.enableBtReview(false); pathPanel.getBtScan().enable(false); pathPanel.enableDuoBtn(false); pathPanel.enableStop(); pathPanel.enablePreview(false); leftPanel.enableCtrls(false); taskPanel.enableCtrls(false); LeftChkaViewAllTask reviewTask=new LeftChkaViewAllTask(leftPanel,quadePanel,logPanel,pathPanel,taskPanel); logPanel.regTreckableTask(reviewTask); new Thread(reviewTask).start();} protected void processBin() { String lookingWhere=pathPanel.getPath(); System.out.println("processBin() "+lookingWhere); taskPanel.registerTask(new RightTask(RightTask.TASK_BIN,"All",lookingWhere,taskPanel.getCtrlPanel().getSelectedExtension()));} protected void processInfo() { String lookingWhere=pathPanel.getPath(); System.out.println("processInfo() "+lookingWhere); taskPanel.registerTask(new RightTask(RightTask.TASK_INFO,"All",lookingWhere,taskPanel.getCtrlPanel().getSelectedExtension()));} protected void processCheck() { String lookingWhere=pathPanel.getPath(); System.out.println("processCheck() "+lookingWhere); taskPanel.registerTask(new RightTask(RightTask.TASK_CHK,"All",lookingWhere,taskPanel.getCtrlPanel().getSelectedExtension()));} protected void processConfig() { String lookingWhere=pathPanel.getPath(); System.out.println("processConfig() "+lookingWhere); taskPanel.registerTask(new RightTask(RightTask.TASK_CONF,"All",lookingWhere,taskPanel.getCtrlPanel().getSelectedExtension()));} public void run() { ExpectHere eh=new ExpectHere(); updateInfo(eh,false); eh.stopUntilExpected(); MainClsProcessor sp; Sleeper sleeper=new Sleeper(); Time t=new Time(); LongTermCtrl ltc=pathPanel; t.start(); int size1=leftPanel.itemsNum(); if(size1 > 0) { leftSelectionProcessAll(sleeper,ltc,size1); while(quadePanel.hasInProgress()) { sleeper.sleep(166); System.out.print("SLEEP_2");} System.out.println("");} sp=null; quadePanel.clearPanels(); rightSelectedSaveAll(ltc,sleeper,false); t.trust(); logPanel.addLogComplete("Average records("+quadePanel.getAverageRec().getRecordsNum()+") processing time is "+quadePanel.getAverageRec().getAverageTime()+"s also min time is "+quadePanel.getAverageRec().getMinTime()+"s and max time is "+quadePanel.getAverageRec().getMaxTime()+"s"); logPanel.addLogComplete("Auto check complete in "+t.ess()); if(pathPanel.getPreview()) { pathPanel.setPreview(false); sleeper.sleep(166 * 2); new Better().exitApplicationLoop();} pathPanel.getBtScan().enable(true); pathPanel.enableDuoBtn(true); pathPanel.getChPreview().enable(true); leftPanel.enableAuto(true); leftPanel.enableCtrls(true); taskPanel.enableCtrls(true); pathPanel.disableStop();} protected void autoLines() { leftPanel.enableAuto(false); pathPanel.getBtScan().enable(false); pathPanel.enableDuoBtn(false); pathPanel.enableStop(); pathPanel.getChPreview().enable(false); leftPanel.enableCtrls(false); taskPanel.enableCtrls(false); new Thread(this).start(); processCheck(); processConfig(); processBin(); processInfo();} protected void start() { this.southPanel=new ZhooChkaSouthPanel(); this.logPanel=southPanel.getLogPanel(); this.pathPanel=new ChkaPathPanel(pathParam); add("North",pathPanel.getWrapPanel()); add("West",leftPanel=new LeftPackageItemsPanel(pathPanel)); add("East",taskPanel=new RightTasksPanel(logPanel,pathPanel)); cRemake(); add("South",southPanel); if(leftPanelParam !=null) { leftPanel.selectItem(0); leftPanel.setAmount("1"); leftPanel.setSize(""+new File(pathParam).length()); spCurrentHolder.setSpCurrent((MainClsSearchPanel) quadePanel.getFirst()); spCurrentHolder.getSpCurrent().readSource(leftPanelParam,pathParam,pathParam,pathParam,0); spCurrentHolder.getSpCurrent().process(true);} taskPanel.getCtrlPanel().getBtnPanel().dropBtnSkipPosition();} void cRemake() { if(quadePanel !=null) remove(quadePanel); add("Center",quadePanel=MainClsParallelPanel.create(pathPanel.getMultyState(),new ZhooPanelAg(logPanel,leftPanel,taskPanel,pathPanel)));} protected void refreshUpdatable() { leftPanel.updateOnUiThread(quadePanel.getAverageRec()); southPanel.refreshUpdatable(); taskPanel.updateOnUiThread(); pathPanel.refreshUpdatable();} protected void updateInfo(ExpectHere eh,boolean opSingle) { String path=pathPanel.getPath(); pathPanel.enableStop(); leftPanel.clearItems(); quadePanel.initSource(); leftPanel.setPosition(""); leftPanel.dropBtnSkipPosition(); taskPanel.getCtrlPanel().getBtnPanel().dropBtnSkipPosition(); ScanPackageItemsLeftTask scanPackageItemsLeft=new ScanPackageItemsLeftTask(leftPanel,path,logPanel,eh,opSingle,pathPanel); logPanel.regTreckableTask(scanPackageItemsLeft); new Thread(scanPackageItemsLeft).start();} protected void leftSelectionProcessAll(Sleeper sleeper,LongTermCtrl ltc,int size1) { LeftChkaProcessAllTask packTask=new LeftChkaProcessAllTask(leftPanel,quadePanel,logPanel,pathPanel,sleeper,size1,ltc); logPanel.regTreckableTask(packTask); packTask.run();} protected void rightSelectedSaveAll(LongTermCtrl ltc,Sleeper sleeper,boolean sepLunch) { RightChkaSaveAllTask saveAllTask=new RightChkaSaveAllTask(leftPanel,taskPanel,pathPanel,quadePanel,spCurrentHolder,sleeper,ltc,sepLunch); logPanel.regTreckableTask(saveAllTask); if(sepLunch) { pathPanel.enableStop(); new Thread(saveAllTask).start();} else saveAllTask.run();} protected void rightSelectedSave() { taskPanel.rightSelectedSave(spCurrentHolder,quadePanel);} protected void rightSelected() { taskPanel.rightSelected(pathPanel,spCurrentHolder,quadePanel);} protected MainClsProcessor leftSelected() { MainClsProcessor sp=leftPanel.leftSelected(pathPanel,logPanel,quadePanel); return sp;}} class ZhooChkaSouthPanel extends CommonSouthPanel { ChkaLogPanel logPanel; ColorsLogo logoPanel; public ZhooChkaSouthPanel() { super();} protected CommonLogo obtainLogo() { logoPanel=new ColorsLogo(); return logoPanel;} protected CommonLogPanel obtainLogPanel() { logPanel=new ChkaLogPanel(); return logPanel;} public ChkaLogPanel getLogPanel() { return logPanel;}} class ChkaLogPanel extends CommonLogPanel implements LoggingVkusnjashki { public ChkaLogPanel() { super(false);} protected ProgressBar obtainProgressBarCurrent() { ProgressBar progressBar=new ProgressBar(ProgressBar.DEF_HEIGHT,ZhooProps.borderProgressColor,ZhooProps.bgProgressColor,ZhooProps.mainProgressColor,true); return progressBar;} protected ProgressBar obtainProgressBarTotal() { return new ProgressBar(ProgressBar.DEF_HEIGHT,ZhooProps.borderProgressTotalColor,ZhooProps.bgProgressTotalColor,ZhooProps.mainProgressTotalColor,true);} public Color getPanelBgColor() { return ZhooProps.bgLogPanelColor;} public LayoutManager getPanelLayout() { return new BorderLayout();} public LoggingVkusnjashki getLogging() { return(LoggingVkusnjashki)(this);}} class ChkaPathPanel extends HeaderPathPanel implements LongTermCtrl { private String pathParam; public ChkaPathPanel(String pathParam) { super("Leaves Days Zhukistry",true,true,LabeledPanel.DEF_MIN_SIZE,ZhooProps.northBgColor,ZhooProps.northBorderColor,ZhooProps.northTextColor); this.pathParam=pathParam;} public void switchQuade() { changeMultyState();} public void enableDuoBtn(boolean enable) { enableMultyBtn(enable);} public boolean hasLongTermContin() { return longTermOp;} protected ToogleMultyButton obtainMultyButton() { return new DuoButton();} protected Label obtainLbPath() { Label lbPath=new Label("Source location:"); lbPath.setForeground(Color.black); return lbPath;} protected TextField obtainTfPath() { TextField tfPath=new TextField("",50+20+10+5-30-20+5); tfPath.setText("C:\\Users\\dzianis\\workspace\\Architecho\\"); tfPath.setText("C:\\Users\\dzianis\\workspace2\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\Review\\"); tfPath.setText("C:\\Users\\dzianis\\workspace\\"); if(pathParam !=null) tfPath.setText(pathParam); return tfPath;} protected void buildPanel() { buildPath();} public Color getPanelBgColor() { return ZhooProps.bgTopColor;}} class TasksKarta extends Karta { protected Queue keyLog=new Queue(); public TasksKarta() { super();} public synchronized void append(RightTask rightTask) { if(rightTask !=null) { String unique=rightTask.getUnique(); put(unique,rightTask); keyLog.enqueueQueueRecord(unique);}} public synchronized RightTask at(int idxSel) { String unique=(String) keyLog.getQueueRecord(idxSel); return(RightTask) get(unique);}} class ZhooPagesPanel extends PagesPanel { public ZhooPagesPanel() { super(ZhooProps.listPanelPageSize);} public Color getPanelBgColor() { return ZhooProps.bgPagesPanelColor;}} class RightTasksPanel extends CommonDataArrayPanel { ListPanel listPanel; ControlsRightPanel ctrlPanel; private TasksKarta tasks=new TasksKarta(); private LongTermCtrl ltc; LoggingVkusnjashki logPanel; public RightTasksPanel(LoggingVkusnjashki logPanel,LongTermCtrl ltc) { super(); this.logPanel=logPanel; this.ltc=ltc;} public Color getPanelBgColor() { return ZhooProps.bgSideColor;} protected Color getWrapPanelColor() { return ZhooProps.bgStatPanelColor;} protected Panel obtainControlsPanel() { this.ctrlPanel=new ControlsRightPanel(); return ctrlPanel;} protected SizePanel obtainSizePanel() { return null;} protected ListPanel obtainListPanel() { this.listPanel=new ListPanel(new StatReenockPanel("","task(s)")); return listPanel;} public void enableDisableSave() { ctrlPanel.getBtnPanel().enableSave(!ltc.hasLongTermContin() && getSelectedIdx() >-1);} public ControlsRightPanel getCtrlPanel() { return ctrlPanel;} public LoggingVkusnjashki getLogPanel() { return logPanel;} public void setLogPanel(LoggingVkusnjashki logPanel) { this.logPanel=logPanel;} public void rightSelectedSave(MainClsProcessorHolder spCurrentHolder,MainClsParallelPanel quadePanel) { int idxSel=getSelectedIdx(); if(idxSel >-1) { RightTask rightTask=getTask(idxSel); if(spCurrentHolder.getSpCurrent()==null) spCurrentHolder.setSpCurrent((MainClsSearchPanel) quadePanel.getFirst()); spCurrentHolder.getSpCurrent().saveTask(rightTask);}} public void rightSelected(ChkaPathPanel pathPanel,MainClsProcessorHolder spCurrentHolder,MainClsParallelPanel quadePanel) { enableDisableSave(); setAmount(""+itemsNum()); int idxSel=getSelectedIdx(); String looking=pathPanel.getPath(); setPosition(""+(idxSel+1)); RightTask rightTask=getTask(idxSel); if(spCurrentHolder.getSpCurrent()==null) spCurrentHolder.setSpCurrent((MainClsSearchPanel) quadePanel.getFirst()); spCurrentHolder.getSpCurrent().performTask(idxSel,looking,rightTask);} public void enableCtrls(boolean enable) { listPanel.listEnable(enable);} public RightTask getTask(int idxSel) { return(RightTask) tasks.at(idxSel);} public void selectNothing() { super.selectNothing(); ctrlPanel.getBtnPanel().enableSave(false);} public void updateOnUiThread() { boolean prerequsites=itemsNum() > 0 && !ltc.hasLongTermContin(); ctrlPanel.getBtnPanel().enableDeleteAll(prerequsites); ctrlPanel.getBtnPanel().enableSaveAll(prerequsites); ctrlPanel.enableLiftingCtrls(false==ltc.hasLongTermContin());} public RightTask getSelected() { int idx=getSelectedIdx(); RightTask selected=(RightTask) tasks.at(idx); return selected;} public synchronized void clearTasks() { listPanel.clearItems(); tasks=new TasksKarta(); setPosition(""); setAmount(""); ctrlPanel.getBtnPanel().dropBtnSkipPosition();} public synchronized void registerTask(RightTask rightTask) { System.out.println("registerTask() "+rightTask); if(!tasks.containsKey(rightTask.getUnique())) { listPanel.addItem(rightTask.repr()); tasks.append(rightTask); logPanel.addLog("Register task "+rightTask.getAction()+" for "+rightTask.getOnWhat()+" from "+rightTask.getLocated());} setAmount(""+itemsNum());}} class RightTask { public final static String TASK_CONF="Config"; public final static String TASK_CHK="Check"; public final static String TASK_BIN="Bin"; public final static String TASK_INFO="Info"; public final static String TASK_UPD="Lunch"; final static String CMD1="zmake.bat"; final static String CMD2="genconf.bat"; final static String CMD3="ybin.bat"; final static String CMD4="ainfo.bat"; final static String CMD11="zmake.cmd"; final static String CMD22="genconf.cmd"; final static String CMD33="ybin.cmd"; final static String CMD44="ainfo.cmd"; String action; String onWhat; String located; String result; String pblClsNameRecord; String pblClsName; String pkgRecord; String lunchName; String relPath; private String kindSave; private String lunchVar; public RightTask(String doing,String arg,String path,String lunchName,String pblClsNameRecord,String pblClsName,String pkgRecord,String relPath,String kindSave,String lunchVar) { this(doing,arg,path,kindSave); this.lunchName=lunchName; this.relPath=relPath; this.result=new Data().replace(new Ester(path),new Ester(arg),new Ester(lunchName)).toString(); this.pblClsNameRecord=pblClsNameRecord; this.pblClsName=pblClsName; this.pkgRecord=pkgRecord; this.lunchVar=lunchVar;} public RightTask(String doing,String arg,String path,String kindSave) { super(); this.kindSave=kindSave; this.action=doing; this.onWhat=arg; this.located=path; if(new Ester(doing).eq(new Ester(TASK_CHK))) this.result=located+"\\"+CMD1; else if(new Ester(doing).eq(new Ester(TASK_CONF))) this.result=located+"\\"+CMD2; else if(new Ester(doing).eq(new Ester(TASK_BIN))) this.result=located+"\\"+CMD3; else if(new Ester(doing).eq(new Ester(TASK_INFO))) this.result=located+"\\"+CMD4; checkResult();} public String getKindSave() { return kindSave;} public String getUnique() { return new Ester("").append(action).append('-').append(onWhat).append('-').append(located).toString();} void checkResult() { if(result !=null && result.length() > 0) result=new Data().replace(new Ester(result),new Ester("\\\\"),new Ester("\\")).toString();} public String getResult() { return result;} public String repr() { if(new Ester(action).eq(new Ester(TASK_UPD))) return action+" "+relPath; return action+" "+onWhat;} public String getDoing() { return action;} public String getArg() { return onWhat;} public String getPath() { return located;} public String toString() { return "RightTask [doing="+action+", arg="+onWhat+", path="+located+", putTooNa="+result+"]";} public void updateLunch(String lunch) { this.result=lunch;} public boolean isBatchSave() { return new ZhooKindSave(kindSave).isBatchSave();} public boolean isCommandSave() { return new ZhooKindSave(kindSave).isCommandSave();} public String getLunchVar() { return lunchVar;} public String getAction() { return action;} public boolean isActionType(String actionType) { if(action !=null && actionType !=null) { return action.equalsIgnoreCase(actionType);} return false;} public boolean isActionTypeConf() { return isActionType(TASK_CONF);} public boolean isActionTypeCheck() { return isActionType(TASK_CHK);} public boolean isActionTypeBin() { return isActionType(TASK_BIN);} public boolean isActionTypeInfo() { return isActionType(TASK_INFO);} public boolean isActionTypeLunch() { return isActionType(TASK_UPD);} public String getLocated() { return located;} public String getLunchName() { return lunchName;} public String getOnWhat() { return onWhat;} public String getPblClsName() { return pblClsName;} public String getPkgRecord() { return pkgRecord;} public String getPblClsNameRecord() { return pblClsNameRecord;} public String getRelPath() { return relPath;}} class ZhooKindSave { private String kindSave; public ZhooKindSave(String kindSave) { super(); this.kindSave=kindSave;} public boolean isBatchSave() { if(kindSave !=null) { if(new Ester(kindSave).eq(new Ester(ZhooProps.BC_EXT_BATCH))) return true; if(new Ester(kindSave).eq(new Ester(ZhooProps.BC_BOTH_EXT))) return true;} return false;} public boolean isCommandSave() { if(kindSave !=null) { if(new Ester(kindSave).eq(new Ester(ZhooProps.BC_EXT_COMMAND))) return true; if(new Ester(kindSave).eq(new Ester(ZhooProps.BC_BOTH_EXT))) return true;} return false;} public boolean isBoth() { if(kindSave !=null) return new Ester(kindSave).eq(new Ester(ZhooProps.BC_BOTH_EXT)); return false;} public boolean endsLunch(String lunchText) { if(isBoth()) return new Ester(lunchText).ends(new Ester("(.cmd)")); if(isBatchSave()) return new Ester(lunchText).ends(new Ester(".bat")); if(isCommandSave()) return new Ester(lunchText).ends(new Ester(".cmd")); return false;}} class ChkaSetsPanel extends PropertySetPanel { public ChkaSetsPanel(Color bgColor,LabeledEditPair[] pairs) { super(bgColor,pairs);} Panel createPanelColorfullWrap(Component comp,Color wrapColor) { LabeledPanel ignorePanelWrap=new LabeledPanel("",comp,LabeledPanel.DEF_WRAP_SIZE,wrapColor,wrapColor,wrapColor,false,true,true,!true); return ignorePanelWrap;}} class ChkaExtSelectPanel extends ChkaSetsPanel { public ChkaExtSelectPanel(Color bgColor,LabeledEditPair[] pairs) { super(bgColor,pairs);} public static Panel create(ChoiceFactory cfPublFinal) { LabeledEditPair[] pairs=new LabeledEditPair[1]; pairs[1-1]=new LabeledEditPair("Scripting types:",cfPublFinal.getChCases()); ChkaExtSelectPanel psp=new ChkaExtSelectPanel(ZhooProps.bgCtrlPanelColor,pairs); return psp.createPanelColorfullWrap(psp.cookingLabels(ZhooProps.bgSizePanelColor,ZhooProps.textChartPanelColor,ZhooProps.bgChartPanelColor),ZhooProps.bgCtrlPanelColor);}} class ChkaVarEnvPanel extends ChkaSetsPanel { public ChkaVarEnvPanel(Color bgColor,LabeledEditPair[] pairs) { super(bgColor,pairs);} public static Panel create(TextField tfVarEnv) { LabeledEditPair[] pairs=new LabeledEditPair[1]; pairs[1-1]=new LabeledEditPair("Environment:",tfVarEnv); ChkaVarEnvPanel psp=new ChkaVarEnvPanel(ZhooProps.bgCtrlPanelColor,pairs); return psp.createPanelColorfullWrap(psp.cookingLabels(ZhooProps.bgSizePanelColor,ZhooProps.textChartPanelColor,ZhooProps.bgChartPanelColor),ZhooProps.bgCtrlPanelColor);}} class ControlsRightPanel extends Panel { ChoiceFactory extChoiceFactory; TextField tfVarEnv; Panel extPanel; Panel envPanel; SaveDeleteAllPanel btnPanel; public ControlsRightPanel() { super(); this.extChoiceFactory=extInit(); this.tfVarEnv=new TextField(ZhooProps.DEF_ENV_VAR); MultyButtonTiersBuilder.create().appendPanel(extPanel=ChkaExtSelectPanel.create(extChoiceFactory)).appendPanel(envPanel=ChkaVarEnvPanel.create(tfVarEnv)).appendControlsPanel(btnPanel=new SaveDeleteAllPanel()).build(this);} ChoiceFactory extInit() { String[] variants=new String[1+1+1]; variants[1-1]=ZhooProps.BC_BOTH_EXT; variants[1]=ZhooProps.BC_EXT_BATCH; variants[1+1]=ZhooProps.BC_EXT_COMMAND; ChoiceFactory result=new ChoiceFactory(variants,0+1+1-1-1+1+1-1+1-1-1+1); return result;} public String getLunchVar() { String text=tfVarEnv.getText(); if(text==null) return ZhooProps.DEF_ENV_VAR; for(int i=0; i < ZhooProps.ENV_VAR_ESC.length(); i++) text=new Data().replace(new Ester(text),new Ester("").append(ZhooProps.ENV_VAR_ESC.charAt(i)),new Ester("")).toString(); return text.length() < 1 ? ZhooProps.DEF_ENV_VAR : text;} public String getSelectedExtension() { return getChExt().getSelectedItem();} public Choice getChExt() { return extChoiceFactory.getChCases();} public TextField getTfVarEnv() { return tfVarEnv;} public SaveDeleteAllPanel getBtnPanel() { return btnPanel;} public void enableLiftingCtrls(boolean enable) { extChoiceFactory.getChCases().enable(enable); tfVarEnv.enable(enable);}} class SaveDeleteAllPanel extends ControlsPanel { final static String BT_DEL_ALL="btDeleteAll"; final static String BT_SAVE_ALL="btSaveAll"; final static String BT_SAVE="btSave"; public SaveDeleteAllPanel() { super();} public Button getBtDeleteAll() { return(Button) getCtrl(BT_DEL_ALL);} public Button getBtSaveAll() { return(Button) getCtrl(BT_SAVE_ALL);} public Button getBtSave() { return(Button) getCtrl(BT_SAVE);} public void enableSave(boolean enable) { getBtSave().enable(enable);} public void enableSaveAll(boolean enable) { getBtSaveAll().enable(enable);} public void enableDeleteAll(boolean enable) {((Button) getCtrl(BT_DEL_ALL)).enable(enable);} public Color getPanelBgColor() { return ZhooProps.bgCtrlPanelColor;} protected void buildPanel() { append(BT_SAVE_ALL,new Button("Save All")); append(BT_SAVE,new Button("Save")); append(BT_DEL_ALL,new Button("Delete All"));} public void enableCtrls(boolean enable) {((Button) getCtrl(BT_SAVE_ALL)).enable(enable);((Button) getCtrl(BT_SAVE)).enable(enable);((Button) getCtrl(BT_DEL_ALL)).enable(enable);}} class ReenockIgnorePanel extends IgnorePanel { public ReenockIgnorePanel() { super();} protected void initIgnoreList() { String uixIgnore="mydev."+"uix;"; String aboutIgnore="mydev."+"about;"+"\n"+"mydev."+"cndata;"; String ignoreListOneLine="p_ticca"+"3d.java"+"\n"+"mydev."+"gforce;"+"\n"+"mydev."+"t3;"+"\n"+uixIgnore+"\n"+aboutIgnore; setIgnoreList(ignoreListOneLine); for(int i=0; i < 1+1; i++) changeState();}} class LeftPackageItemsPanel extends CommonDataArrayPanel { ReenockIgnorePanel ignorePanel; ListPanel listPanel; ZhooCtrlLunchPanel confLunchPanel; SizePanel sizePanel; AveragePanel avgPanel; private LongTermCtrl ltc; private Queue leftItemsQueue=new Queue(); private boolean leftItemsQueueIns; private String[] leftItemsQueueArr=new String[1-1]; public LeftPackageItemsPanel(LongTermCtrl ltc) { super(); this.ltc=ltc;} public void enableBtReview(boolean enable) { confLunchPanel.getLunchPanel().enableReview(enable);} public void enableBtAuto(boolean enable) { confLunchPanel.getLunchPanel().enableAuto(enable);} public Button getBtReview() { return confLunchPanel.getLunchPanel().getBtReview();} public Color getPanelBgColor() { return ZhooProps.bgSideColor;} protected Color getWrapPanelColor() { return ZhooProps.bgStatPanelColor;} protected Panel obtainControlsPanel() { this.confLunchPanel=new ZhooCtrlLunchPanel(); return confLunchPanel;} protected SizePanel obtainSizePanel() { this.sizePanel=SidePanelFactory.createTotalSizePanel(); return sizePanel;} protected AveragePanel obtainAveragePanel() { this.avgPanel=SidePanelFactory.createUsualAveragePanel(); return avgPanel;} protected ListPanel obtainListPanel() { this.listPanel=new ListPanel(new StatReenockPanel("package","item(s)"),new ZhooPagesPanel()); return listPanel;} protected IgnorePanel obtainIgnorePanel() { this.ignorePanel=new ReenockIgnorePanel(); return ignorePanel;} public ReenockIgnorePanel getIgnorePanel() { return ignorePanel;} public void dropBtnSkipPosition() { confLunchPanel.getLunchPanel().dropBtnSkipPosition();} public Button getAutoBtn() { return confLunchPanel.getLunchPanel().getBtAuto();} public Button getConfigBtn() { return confLunchPanel.getConfigsPanel().getBtConfig();} public void regConfigPress() { confLunchPanel.getConfigsPanel().regConfigPress();} public Button getCheckBtn() { return confLunchPanel.getConfigsPanel().getBtCheck();} public void regCheckPress() { confLunchPanel.getConfigsPanel().regCheckPress();} public Button getBinBtn() { return confLunchPanel.getConfigsPanel().getBtBin();} public Button getInfoBtn() { return confLunchPanel.getConfigsPanel().getBtInfo();} public void regBinPress() { confLunchPanel.getConfigsPanel().regBinPress();} public void regInfoPress() { confLunchPanel.getConfigsPanel().regInfoPress();} public Button getLunchBtn() { return confLunchPanel.getLunchPanel().getBtLunch();} public void enableAuto(boolean enable) { confLunchPanel.getLunchPanel().enableAuto(enable);} public void enableCtrls(boolean enable) { listPanel.listEnable(enable);} public String getSelectedPath() { int idxSel=listPanel.getSelectedIndex(); if(leftItemsQueueIns) leftItemsQueueArr=makeCopyCash(); String path=leftItemsQueueArr[idxSel]; return path;} public String getItemSelected() { String fullPath=getSelectedPath(); return new Ester(fullPath).sub(1+(new Ester(fullPath).indexX('/') > new Ester(fullPath).indexX('\\') ? new Ester(fullPath).indexX('/') : new Ester(fullPath).indexX('\\'))).toString();} public MainClsProcessor leftSelected(ChkaPathPanel pathPanel,LoggingVkusnjashki logPanel,MainClsParallelPanel quadePanel) { int idxSel=getSelectedIdx(); String curSel=getItemSelected(); String relPath=getItem(idxSel); String path=getSelectedPath(); String looking=pathPanel.getPath(); logPanel.addLog("Selected item "+path); MainClsProcessor sp=(MainClsSearchPanel) quadePanel.assignSource(curSel,path,looking,relPath,idxSel); setPosition(""+(idxSel+1)); return sp;} public void clearItems() { listPanel.clearItems(); leftItemsQueue.clearQueue(); leftItemsQueueIns=false; leftItemsQueueArr=makeCopyCash();} private String[] makeCopyCash() { leftItemsQueueIns=false; Object[] queueRecordsArray=leftItemsQueue.getQueueRecordsArray(); String[] result=new String[queueRecordsArray.length]; for(int i=0; i < result.length; i++) result[i]=(String) queueRecordsArray[i]; return result;} public void updateOnUiThread(AverageRec mar) { updateMinMaxAvg(mar); boolean prerequsites=listPanel.itemsNum() > 0 && !ltc.hasLongTermContin(); confLunchPanel.getConfigsPanel().enableConfig(prerequsites && confLunchPanel.getConfigsPanel().isConfigPressed()==false); confLunchPanel.getConfigsPanel().enableCheck(prerequsites && confLunchPanel.getConfigsPanel().isCheckPressed()==false); confLunchPanel.getConfigsPanel().enableBin(prerequsites && confLunchPanel.getConfigsPanel().isBinPressed()==false); confLunchPanel.getConfigsPanel().enableInfo(prerequsites && confLunchPanel.getConfigsPanel().isInfoPressed()==false); confLunchPanel.getLunchPanel().enableReview(prerequsites);} public void addItem(String item,String fullPath) { listPanel.addItem(item); leftItemsQueue.enqueueQueueRecord(fullPath); leftItemsQueueIns=true;} public void enableLunch(boolean enable) { confLunchPanel.getLunchPanel().enableLunch(enable);}} class ZhooCtrlLunchPanel extends Panel { LeftConfLunchPanel lunchPanel; LeftConfigsPanel configsPanel; public ZhooCtrlLunchPanel() { super(); MultyButtonTiersBuilder.create().appendControlsPanel(lunchPanel=new LeftConfLunchPanel()).appendControlsPanel(configsPanel=new LeftConfigsPanel()).build(this);} public LeftConfLunchPanel getLunchPanel() { return lunchPanel;} public LeftConfigsPanel getConfigsPanel() { return configsPanel;}} class LeftConfigsPanel extends ControlsPanel { final static String BT_CHECK="btCheck"; final static String BT_CONFIG="btConfig"; final static String BT_BIN="btBin"; final static String BT_INFO="btInfo"; private boolean btCheckPressed; private boolean btConfigPressed; private boolean btBinPressed; private boolean btInfoPressed; public LeftConfigsPanel() { super();} public LayoutManager getPanelLayout() { return new FlowLayout(FlowLayout.CENTER,1+1,1+1);} public Color getPanelBgColor() { return ZhooProps.bgCtrlPanelColor;} protected void buildPanel() { append(BT_CHECK,new Button("Check")); append(BT_CONFIG,new Button("Config")); append(BT_BIN,new Button("Bin")); append(BT_INFO,new Button("Info"));} public void enableCtrls(boolean enable) {((Button) getCtrl(BT_CHECK)).enable(enable);((Button) getCtrl(BT_CONFIG)).enable(enable);((Button) getCtrl(BT_BIN)).enable(enable);((Button) getCtrl(BT_INFO)).enable(enable);} public void enableConfig(boolean enable) {((Button) getCtrl(BT_CONFIG)).enable(enable);} public void enableCheck(boolean enable) {((Button) getCtrl(BT_CHECK)).enable(enable);} public void enableBin(boolean enable) {((Button) getCtrl(BT_BIN)).enable(enable);} public void enableInfo(boolean enable) {((Button) getCtrl(BT_INFO)).enable(enable);} public Button getBtConfig() { return(Button) getCtrl(BT_CONFIG);} public Button getBtCheck() { return(Button) getCtrl(BT_CHECK);} public Button getBtBin() { return(Button) getCtrl(BT_BIN);} public Button getBtInfo() { return(Button) getCtrl(BT_INFO);} public boolean isBinPressed() { return btBinPressed;} public boolean isConfigPressed() { return btConfigPressed;} public boolean isCheckPressed() { return btCheckPressed;} public boolean isInfoPressed() { return btInfoPressed;} public void regBinPress() { enableBin(!true); btBinPressed=true;} public void regConfigPress() { enableConfig(!true); btConfigPressed=true;} public void regCheckPress() { enableCheck(!true); btCheckPressed=true;} public void regInfoPress() { enableCheck(!true); btInfoPressed=true;} public void dropBtnSkipPosition() { super.dropBtnSkipPosition(); btConfigPressed=false; btCheckPressed=false; btBinPressed=false; btInfoPressed=false;}} class LeftConfLunchPanel extends ControlsPanel { final static String BT_REVIEW="btReview"; final static String BT_LUNCH="btLunch"; public LeftConfLunchPanel() { super();} public LayoutManager getPanelLayout() { return new FlowLayout(FlowLayout.CENTER,1+1,1+1);} public Color getPanelBgColor() { return ZhooProps.bgCtrlPanelColor;} protected void buildPanel() { append(BT_REVIEW,new Button("Review")); append(BT_LUNCH,new Button("Lunch")); append("autoZhoo",new AutoZhoo());} public void enableCtrls(boolean enable) {((Button) getCtrl(BT_REVIEW)).enable(enable);((Button) getCtrl(BT_LUNCH)).enable(enable); getAutoBtn().enableCtrl(enable);} public void enableReview(boolean enable) {((Button) getCtrl(BT_REVIEW)).enable(enable);} public void enableLunch(boolean enable) {((Button) getCtrl(BT_LUNCH)).enable(enable);} public void enableAuto(boolean enable) { getAutoBtn().enableCtrl(enable);} public Button getBtReview() { return(Button) getCtrl(BT_REVIEW);} public Button getBtLunch() { return(Button) getCtrl(BT_LUNCH);} public Button getBtAuto() { return getAutoBtn().getBtAuto();}} class AutoZhoo extends YellowAutoButton { public AutoZhoo() { super();}} class StatReenockPanel extends AmountPanel { public StatReenockPanel(String criteriaName,String itemsName) { super(criteriaName,itemsName);} protected int getPosWidth() { return super.getPosWidth()-1-1-1;} protected int getAmountWidth() { return super.getAmountWidth()-1-1-1;} public Color getPanelBgColor() { return ZhooProps.bgAmountPanelColor;}} class ScanPackageItemsLeftTask extends ProgressMultiTasking { LeftPackageItemsPanel leftPanel; ChkaLogPanel logPanel; ChkaPathPanel pathPanel; private String path; private Metr amount=new Metr(); private Metr size=new Metr(); private ExpectHere expectHere; private boolean opSingle; public ScanPackageItemsLeftTask(LeftPackageItemsPanel leftPanel,String path,ChkaLogPanel logPanel,ExpectHere eh,boolean opSingle,ChkaPathPanel pathPanel) { super(); this.leftPanel=leftPanel; this.path=path; this.logPanel=logPanel; this.expectHere=eh; this.opSingle=opSingle; this.pathPanel=pathPanel;} public ChkaLogPanel getLogPanel() { return logPanel;} public void setLogPanel(ChkaLogPanel logPanel) { this.logPanel=logPanel;} public LeftPackageItemsPanel getLeftPanel() { return leftPanel;} public String getPath() { return path;} public Metr getAmount() { return amount;} public Metr getSize() { return size;} void displayAmount(Metr m) { Ester repr=m.repr(' '); leftPanel.setAmount(new Ester("0").eq(repr) ? "" : repr.toString());} void displaySize(Metr m) { Ester repr=m.repr(','); leftPanel.setSize(new Ester("0").eq(repr) ? "" : repr.toString());} protected void performTask() { Time t=new Time(); t.start(); updateStat(); scanItems(path,".java"); t.trust(); logPanel.addLogComplete("Source scan complete "+t.ess()); leftPanel.enableAuto(true==opSingle); if(opSingle) pathPanel.disableStop(); if(expectHere !=null) expectHere.markAsReached();} protected void updateStat() { Metr m=new Metr(0); m.inc(amount); displayAmount(m); m=new Metr(0); m.inc(size); displaySize(m);} protected void scanItems(String path,String ext) { System.out.println("world1 "+path); Ester[] start=new Files().tree(new Ester(path)); Ester[] select=new Filter().endsWithIncensitive(start,new Ester(ext)); Ester[] damage=new Join().join(new Filter().endsWithIncensitive(start,new Ester("\\mydev\\classes\\classes.java")),new Filter().endsWithIncensitive(start,new Ester("/mydev/classes/classes.java"))); damage=new Join().join(damage,new Join().join(new Filter().endsWithIncensitive(start,new Ester("mydev\\datel\\checker.java")),new Filter().endsWithIncensitive(start,new Ester("mydev/datel/checker.java")))); damage=new Join().join(damage,new Join().join(new Filter().endsWithIncensitive(start,new Ester("\\mydev\\webobj\\parsertest.java")),new Filter().endsWithIncensitive(start,new Ester("/mydev/webobj/parsertest.java")))); damage=new Join().join(damage,new Join().join(new Filter().endsWithIncensitive(start,new Ester("mydev\\webobj\\parser.java")),new Filter().endsWithIncensitive(start,new Ester("mydev/webobj/parser.java")))); select=new Join().sub(select,damage); Ester[] selectNames=new Filter().cutStart(select,new Ester(path)); for(int i=0; i < select.length && pathPanel.hasLongTermContin(); i++) { if(leftPanel.getIgnorePanel().hasIgnoreCoincidence(select[i].toString())) { recountComplete(i+1,select.length); continue;} leftPanel.addItem(selectNames[i].toString(),select[i].toString()); amount.inc(1); size.inc(new File(select[i].toString()).length()); updateStat(); recountComplete(i+1,select.length);}}} class CommandZhoo { public final static int ID_READY=1; public final static int ID_INIT=1+1; public final static int ID_READ_SOURCE=1+1+1; public final static int ID_ONELINE=1+1+1+1; private int id; protected boolean complete; CommandZhoo(int id) { super(); this.id=id; this.complete=false;} public static CommandZhoo create(int cmdId) { CommandZhoo cmd=null; switch(cmdId) { case ID_READY : case ID_INIT : cmd=new CommandZhoo(cmdId); break;} return cmd;} public int getId() { return id;} public boolean isComplete() { return complete;}} class ReadCommandZhoo extends CommandZhoo { private String name; private String path; private String start; private String relPath; public ReadCommandZhoo(String name,String path,String start,String relPath) { super(ID_READ_SOURCE); this.name=name; this.path=path; this.start=start; this.relPath=relPath;} public String getStart() { return start;} public String getName() { return name;} public String getPath() { return path;} public String getRelPath() { return relPath;} public String toString() { return "CommandRead [name="+name+", path="+path+", start="+start+", relPath="+relPath+"]";}} class ProcessCommandZhoo extends CommandZhoo { private boolean needClear; private ReadyFree readyFree; public ProcessCommandZhoo(ReadyFree readyFree,boolean needClear) { super(ID_ONELINE); this.readyFree=readyFree; this.needClear=needClear;} public ReadyFree getReadyFree() { return readyFree;} public boolean isNeedClear() { return needClear;}} interface MainClsProcessor { boolean isReadyFree(); void saveTask(RightTask rightTask); void performTask(int idxSel,String looking,RightTask rightTask); void processLunch(String relPath); void readSource(String name,String path,String start,String relPath,int idxSel); void process(boolean needClear);} class CommandZhooQueue { private Queue itemsQueue=new Queue(); public CommandZhooQueue() { super();} public void push(CommandZhoo cmd) { itemsQueue.enqueueQueueRecord(cmd);} public boolean hasSomeWork() { return itemsQueue.isEmptyQueue()==false;} public CommandZhoo nextCurrent() { CommandZhoo cmd=(CommandZhoo) itemsQueue.dequeueQueueRecord(); return cmd;}} class SourcePkgNamePanel extends Panel { TextField tfSrcName; List tfRelPath; TextField tfBack; TextField tfFullPath; public SourcePkgNamePanel() { super(); setLayout(new BorderLayout()); setBackground(Color.darkGray); add("West",tfSrcName=new TextField(12-1-1-1-1-1-1-1+5+5)); tfRelPath=new List(5-1,false); add("Center",tfRelPath=new List(5-1+(!tfRelPath.allowsMultipleSelections() ?-1 : 1-1),false)); add("East",tfBack=new TextField(12-1-1-1-1-1-1-1+5+5)); tfSrcName.setEditable(false); tfRelPath.enable(!false); tfBack.setEditable(false); add("North",tfFullPath=new TextField()); tfFullPath.setEditable(false);} public void clear() { tfSrcName.setText(""); tfRelPath.clear(); tfBack.setText(""); tfFullPath.setText("");} public TextField getTfSrcName() { return tfSrcName;} public TextField getTfBack() { return tfBack;} public TextField getTfFullPath() { return tfFullPath;} public void clearPanel() { tfSrcName.setText(""); tfRelPath.clear(); tfBack.setText(""); tfFullPath.setText("");} public void setBackText(String txt) { tfBack.setText(txt);} public void setFullPathText(String txt) { tfFullPath.setText(txt);} public void clearRelPath() { tfRelPath.clear();} public int countRelPathItems() { return tfRelPath.countItems();} public void setSrcNameText(String txt) { tfSrcName.setText(txt);} public String getSrcNameText() { return tfSrcName.getText();} public void addRelPathPart(String part) { tfRelPath.addItem(part);} public String getItem(int idx) { return tfRelPath.getItem(idx);}} class TotalPanel extends Panel { TextField tfMain; TextField tfPackage; TextField tfLunch; private String source; private String sourcePath; TextField tfPubCls; private String pubClsName; public TotalPanel() { super(); setLayout(new BorderLayout()); setBackground(Color.darkGray); add("North",tfPubCls=new TextField()); add("West",tfMain=new TextField(12-1-1-1-1-1-1-1+5-5+5+5+5+5-5-5-5)); add("Center",tfPackage=new TextField()); add("East",tfLunch=new TextField(12-1-1-1-1-1-1-1+5+5)); tfMain.setEditable(false); tfPackage.setEditable(false); tfLunch.setEditable(false); tfPubCls.setEditable(false);} public TextField getTfMain() { return tfMain;} public TextField getTfPackage() { return tfPackage;} public TextField getTfLunch() { return tfLunch;} public String getSource() { return source;} public TextField getTfPubCls() { return tfPubCls;} public String getPubClsName() { return pubClsName;} public String getPubCls() { return tfPubCls.getText();} public void setSource(String source,String sourcePath) { this.source=source; this.sourcePath=sourcePath; processData();} public boolean containsMain() { return tfMain.getText().length() > 0;} public void processData() { if(source==null) source=""; String[] pieces=OneWayConv.remarkableDifferences().getParts(sourcePath); tfMain.setText(""); boolean pkgMode=false; Ester packageItem=new Ester(""); Ester ptrnMain=new Ester("main"); Ester ptrnPbl=new Ester("public"); Ester ptrnCls=new Ester("class"); Ester ptrnPackage=new Ester("package"); Ester ptrnPackageEnd=new Ester(";"); PubClsFind find=new PubClsFind(); boolean mainReady=false; boolean pkgReady=false; boolean pblClsReady=false; boolean prevItemDot=false; for(int i=0; ptrnMain !=null && i < pieces.length; i++) { Ester item=new Ester(pieces[i]); if(item.eq(ptrnMain)) { tfMain.setText("main()"); mainReady=true;} else if(item.eq(ptrnPackage)) { pkgMode=true; packageItem.append(item).append(' ');} else if(item.eq(ptrnPackageEnd) && pkgMode) { pkgMode=false; pkgReady=true;} else if(pkgMode) packageItem.append(item); if(item.eq(ptrnPbl)) find.markPbl(); else if(find.isPbl()) { if(!prevItemDot && item.eq(ptrnCls)) find.markCls(); else find.clear(); if(find.isCls() && i+1 < pieces.length) { find.regName(new Ester(pieces[i+1])); pblClsReady=true; find.clear();}} if(mainReady && pkgReady && pblClsReady) ptrnMain=null; prevItemDot=item.eq(new Ester("."));} tfPackage.setText(packageItem.toString()); if(find.hasRecord()) { tfPubCls.setText(find.getRecord()); pubClsName=find.getName();}} public void clear() { tfMain.setText(""); tfPackage.setText(""); tfLunch.setText(""); tfPubCls.setText("");} public void clearPanel() { tfMain.setText(""); tfPackage.setText(""); tfLunch.setText(""); source=""; tfPubCls.setText(""); pubClsName="";} public String getPackageText() { return tfPackage.getText();} public void setPackageText(String txt) { tfPackage.setText(txt);} public void setLunchText(String txt,String kindSave) { if(new ZhooKindSave(kindSave).isBoth()) tfLunch.setText(txt+"(.cmd)"); else if(new ZhooKindSave(kindSave).isBatchSave()) tfLunch.setText(txt); else if(new ZhooKindSave(kindSave).isCommandSave()) tfLunch.setText(new Data().replace(new Ester(txt),new Ester(".bat"),new Ester(".cmd")).toString());} public String getLunchText() { return tfLunch.getText();}} class PubClsFind { private String name; private boolean pbl; private boolean cls; public void markPbl() { pbl=true;} public String getName() { return name;} public String getRecord() { return "public class "+name;} public boolean hasRecord() { return name !=null && name.length() > 0;} public void regName(Ester item) { name=item.toString();} public boolean isCls() { return cls;} public void clear() { pbl=false; cls=false;} public void markCls() { cls=true;} public boolean isPbl() { return pbl;}} class ZhooPanelAg { ChkaLogPanel logPanel; LeftPackageItemsPanel leftPanel; RightTasksPanel taskPanel; ChkaPathPanel pathPanel; public ZhooPanelAg(ChkaLogPanel logPanel,LeftPackageItemsPanel leftPanel,RightTasksPanel taskPanel,ChkaPathPanel pathPanel) { super(); this.logPanel=logPanel; this.leftPanel=leftPanel; this.taskPanel=taskPanel; this.pathPanel=pathPanel;} public ChkaLogPanel getLogPanel() { return logPanel;} public LeftPackageItemsPanel getLeftPanel() { return leftPanel;} public RightTasksPanel getTaskPanel() { return taskPanel;} public ChkaPathPanel getPathPanel() { return pathPanel;}} class MainClsSearchPanel extends AbstractApproach implements MainClsProcessor { static final String LUNCH_EXT=".bat"; SourcePkgNamePanel sourceNamePanel; TotalPanel zp; TextArea taSource; private String name; private String path; private String looking; ZhooPanelAg panelAg; private ReadyFree readyFree; private CommandZhooQueue cq=new CommandZhooQueue(); public MainClsSearchPanel(ZhooPanelAg panelAg) { super(); this.panelAg=panelAg; setLayout(new BorderLayout()); setBackground(Color.darkGray); add("North",sourceNamePanel=new SourcePkgNamePanel()); add("Center",taSource=new TextArea()); add("South",zp=new TotalPanel()); taSource.setEditable(false); this.readyFree=new ReadyFree();} public SourcePkgNamePanel getSourceNamePanel() { return sourceNamePanel;} public TotalPanel getZp() { return zp;} public String getName() { return name;} public String getPath() { return path;} public String getLooking() { return looking;} public ZhooPanelAg getPanelAg() { return panelAg;} public boolean isReadyFree() { return readyFree.isFree();} public void doIt(Params params) { if(params !=null) { if(params.areYou(MainClsParallelPanel.CMD_READ_SRC)) readSource(params.getParam("name"),params.getParam("path"),params.getParam("looking"),params.getParam("relPath"),params.getParamInteger("idxSel").intValue());}} public void readSource(String name,String path,String looking,String relPath,int idxSel) { CommandZhoo cmd=new ReadCommandZhoo(name,path,looking,relPath); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} public void saveTask(RightTask rightTask) { ChkaLogPanel logPanel=panelAg.getLogPanel(); try { if(rightTask.isBatchSave()) { new Data().write(rightTask.getResult(),new Ester(taSource.getText())); logPanel.addLog("Write SUCCESS "+rightTask.getResult());} if(rightTask.isCommandSave()) { String cmdName; new Data().write(cmdName=new Data().replace(new Ester(rightTask.getResult()),new Ester(".bat"),new Ester(".cmd")).toString(),new Ester(taSource.getText())); logPanel.addLog("Write SUCCESS "+cmdName);}} catch(IOException e) { logPanel.addLog("Can't write "+rightTask.getResult()+" "+e.getMessage()); System.out.println("Can't write "+rightTask.getResult()+" "+e.getMessage());}} public void performTask(int idxSel,String looking,RightTask rightTask) { sourceNamePanel.clear(); zp.clear(); sourceNamePanel.setFullPathText(rightTask.getResult()); zp.setLunchText(new FullPathSplit(new Ester(rightTask.getResult())).getFileName().toString(),rightTask.getKindSave()); if(rightTask.isActionTypeCheck()) createCheckAll(rightTask); else if(rightTask.isActionTypeConf()) createConfigAll(rightTask); else if(rightTask.isActionTypeBin()) createBinAll(rightTask); else if(rightTask.isActionTypeInfo()) createInfoAll(rightTask); else if(rightTask.isActionTypeLunch()) { String lunch=new FullPathSplit(new Ester(looking+rightTask.getRelPath())).getFolderPath().toString()+rightTask.getLunchName(); sourceNamePanel.setFullPathText(lunch); zp.setLunchText(rightTask.getLunchName(),rightTask.getKindSave()); rightTask.updateLunch(lunch); createLunch(rightTask);}} void createInfoAll(RightTask rightTask) {} void createBinAll(RightTask rightTask) { taSource.setText("world"); System.out.println("world3 "+looking); looking=rightTask.getLocated(); Ester[] select=new Files().tree(new Ester(looking)); Ester[] start=new Filter().endsWithIncensitive(select,new Ester(".bat")); Ester txt=new Ester(""); txt.append('#').append('@').append('e').append('c').append('h').append('o').append(' ').append('O').append('F').append('F').append('\n').append('e').append('c').append('h').append('o').append(' ').append("Hello").append(' ').append(looking).append('\n').append('\n'); txt.append('m').append('k').append('d').append('i').append('r').append(' ').append(looking).append('\\').append('b').append('i').append('n').append('\\').append('\n').append('\n'); for(int i=0; i < start.length; i++) if(start[i].ends(new Ester(RightTask.CMD1))) continue; else if(start[i].ends(new Ester(RightTask.CMD2))) continue; else if(start[i].ends(new Ester(RightTask.CMD3))) continue; else if(start[i].ends(new Ester(RightTask.CMD11))) continue; else if(start[i].ends(new Ester(RightTask.CMD22))) continue; else if(start[i].ends(new Ester(RightTask.CMD33))) continue; else txt.append('c').append('o').append('p').append('y').append(' ').append(start[i]).append(' ').append(looking).append('\\').append('b').append('i').append('n').append('\\').append('\n'); txt.append('c').append('d').append(' ').append(looking).append('\n').append('\n').append('e').append('c').append('h').append('o').append(' ').append("Bye").append(' ').append(looking).append('\n').append('@').append('e').append('c').append('h').append('o').append(' ').append('O').append('N').append('\n'); taSource.setText(new Data().replace(txt,new Ester("\\\\"),new Ester("\\")).toString());} void createConfigAll(RightTask rightTask) { taSource.setText("world"); System.out.println("world2 "+looking); looking=rightTask.getLocated(); Ester[] select=new Files().tree(new Ester(looking)); Ester[] start=new Join().join(new Filter().endsWithIncensitive(select,new Ester("zetupka")),new Join().join(new Join().join(new Filter().endsWithIncensitive(select,new Ester(".java")),new Filter().endsWithIncensitive(select,new Ester(".class"))),new Join().join(new Filter().endsWithIncensitive(select,new Ester(".bat")),new Filter().endsWithIncensitive(select,new Ester(".cmd"))))); Orderer ord=new Orderer(); for(int i=0; i < start.length; i++) ord.append(new FullPathSplit(start[i]).getFolderPath()); String[] fks=ord.getResult(); Ester txt=new Ester(""); txt.append('#').append('@').append('e').append('c').append('h').append('o').append(' ').append('O').append('F').append('F').append('\n').append('e').append('c').append('h').append('o').append(' ').append("Hello").append(' ').append(looking).append('\n').append('\n'); for(int i=0; i < fks.length; i++) txt.append('c').append('d').append(' ').append(fks[i]).append('\n').append('s').append('t').append('a').append('r').append('t').append(' ').append('c').append('o').append('n').append('f').append(' ').append(new FullPathSplit(new Ester(fks[i]).append("a")).getParentFolder()).append('\n').append('\n'); txt.append('c').append('d').append(' ').append(looking).append('\n').append('\n').append('e').append('c').append('h').append('o').append(' ').append("Bye").append(' ').append(looking).append('\n').append('@').append('e').append('c').append('h').append('o').append(' ').append('O').append('N').append('\n'); taSource.setText(new Data().replace(txt,new Ester("\\\\"),new Ester("\\")).toString());} void createCheckAll(RightTask rightTask) { taSource.setText("world"); System.out.println("world3 "+looking); looking=rightTask.getLocated(); Ester[] select=new Files().tree(new Ester(looking)); Ester[] start=new Filter().endsWithIncensitive(select,new Ester(".java")); Orderer ord=new Orderer(); for(int i=0; i < start.length; i++) ord.append(new FullPathSplit(start[i]).getFolderPath()); String[] fks=ord.getResult(); Ester txt=new Ester(""); txt.append('#').append('@').append('e').append('c').append('h').append('o').append(' ').append('O').append('F').append('F').append('\n').append('e').append('c').append('h').append('o').append(' ').append("Hello").append(' ').append(looking).append('\n').append('\n'); Ester[] fksEs=new Ester[fks.length]; for(int i=0; i < fks.length; i++) fksEs[i]=new Ester(fks[i]); Ester[] fksEsAaa=new Filter().endsWith(fksEs,new Ester("\\aaa\\")); Ester[] fksEsVutils=new Filter().endsWith(fksEs,new Ester("\\vutils\\")); Ester[] fksEsOneway=new Filter().endsWith(fksEs,new Ester("\\oneway\\")); Ester[] fksEsBbb=new Filter().endsWith(fksEs,new Ester("\\bbb\\")); Ester[] fksEsOline=new Filter().endsWith(fksEs,new Ester("\\oline\\")); Ester[] fksEsRest=new Join().sub(fksEs,fksEsAaa); fksEsRest=new Join().sub(fksEsRest,fksEsVutils); fksEsRest=new Join().sub(fksEsRest,fksEsOneway); fksEsRest=new Join().sub(fksEsRest,fksEsBbb); fksEsRest=new Join().sub(fksEsRest,fksEsOline); fksEsRest=new Join().join(new Join().join(new Join().join(new Join().join(fksEsAaa,fksEsVutils),new Join().join(fksEsAaa,fksEsVutils)),new Join().join(new Join().join(fksEsOneway,fksEsBbb),fksEsOline)),fksEsRest); for(int i=0; i < fksEsRest.length; i++) txt.append('c').append('d').append(' ').append(fksEsRest[i]).append('\n').append('j').append('a').append('v').append('a').append('c').append(' ').append('*').append('.').append('j').append('a').append('v').append('a').append(' ').append('>').append('>').append(' ').append(looking).append('\\').append('z').append('m').append('a').append('k').append('e').append('.').append('l').append('o').append('g').append('\n').append('\n'); txt.append('c').append('d').append(' ').append(looking).append('\n').append('\n').append('e').append('c').append('h').append('o').append(' ').append("Bye").append(' ').append(looking).append('\n').append('@').append('e').append('c').append('h').append('o').append(' ').append('O').append('N').append('\n'); taSource.setText(new Data().replace(txt,new Ester("\\\\"),new Ester("\\")).toString());} void createLunch(RightTask rightTask) { taSource.setText(new Ester("").append('#').append('@').append('e').append('c').append('h').append('o').append(' ').append('O').append('F').append('F').append('\n').append('j').append('a').append('v').append('a').append(' ').append('-').append('c').append('l').append('a').append('s').append('s').append('p').append('a').append('t').append('h').append(' ').append('%').append(rightTask.getLunchVar()).append('%').append(' ').append(new Data().replace(new Ester(rightTask.getPkgRecord()),new Ester("package "),new Ester("")).toString()).append('.').append(rightTask.getPblClsName()).append('\n').append('@').append('e').append('c').append('h').append('o').append(' ').append('O').append('N').append('\n').toString());} public void processLunch(String relPath) { String mainName=sourceNamePanel.getSrcNameText(); Ester path2=new FullPathSplit(new Ester(path)).getParentFolder(); String lunchName=path2.toString()+LUNCH_EXT; path=panelAg.getLeftPanel().getSelectedPath(); panelAg.getTaskPanel().registerTask(new RightTask(RightTask.TASK_UPD,mainName,path,lunchName,zp.getPubCls(),zp.getPubClsName(),zp.getPackageText(),relPath,panelAg.getTaskPanel().getCtrlPanel().getSelectedExtension(),panelAg.getTaskPanel().getCtrlPanel().getLunchVar()));} public void process(boolean needClear) { readyFree.setBusy(); CommandZhoo cmd=new ProcessCommandZhoo(readyFree,needClear); cq.push(cmd); if(worker1==null) { worker1=new Thread(this); worker1.start();}} private void interpret(CommandZhoo cmd) { switch(cmd.getId()) { case CommandZhoo.ID_READY : break; case CommandZhoo.ID_INIT : break; case CommandZhoo.ID_READ_SOURCE : if(((ReadCommandZhoo) cmd).getPath() !=null &&((ReadCommandZhoo) cmd).getPath().length() > 0) readSource((ReadCommandZhoo) cmd); break; case CommandZhoo.ID_ONELINE : oneLineTansform((ProcessCommandZhoo) cmd); break;}} private void readSource(ReadCommandZhoo cmd) { ar.start(); Time t=new Time(); t.start(); sourceNamePanel.clear(); zp.clear(); taSource.setText(""); name=cmd.getName(); path=cmd.getPath(); looking=cmd.getStart(); sourceNamePanel.setSrcNameText(name); sourceNamePanel.setFullPathText(path); String source=""; ChkaLogPanel logPanel=panelAg.getLogPanel(); if(path !=null && path.length() > 0) try { source=OneWayConv.remarkableDifferences().getContent(path); taSource.setText(source); sleeper.sleep(5 / 4);} catch(IOException ex) { System.out.println("Can't read "+path+" . "+ex.getMessage()); taSource.setText("Can't read "+path+" . "); logPanel.addLog("Can't read "+path+" . "+ex.getMessage());} zp.setPackageText(""); if(source.length() > 0) zp.setSource(source,path); String path2=new ZhooRelPathExtractor().extract(name,path,looking); sourceNamePanel.clearRelPath(); if(path2.length() > 0) parsePkg(path2); if(path2.length() > 0) parseWayBack(path2); if(zp.containsMain()) { int itemsNum=sourceNamePanel.countRelPathItems(); if(itemsNum > 0 && new Ester(sourceNamePanel.getItem(itemsNum-1)).nteq(new Ester("vutils"))) zp.setLunchText(sourceNamePanel.getItem(itemsNum-1)+LUNCH_EXT,panelAg.getTaskPanel().getCtrlPanel().getSelectedExtension());} panelAg.getLeftPanel().enableLunch(zp.getLunchText().length() > 0 && new ZhooKindSave(panelAg.getTaskPanel().getCtrlPanel().getSelectedExtension()).endsLunch(zp.getLunchText()) && !panelAg.getPathPanel().hasLongTermContin()); sleeper.sleep(866 / 5); if(zp.getLunchText().length() > 0 && new ZhooKindSave(panelAg.getTaskPanel().getCtrlPanel().getSelectedExtension()).endsLunch(zp.getLunchText())) processLunch(cmd.getRelPath()); t.trust(); logPanel.addLogComplete("Completed "+path+" in "+t.ess()); ar.trust();} private void parseWayBack(String relPath) { Ester back=new Ester(".."); for(int i=0; i < relPath.length(); i++) if(relPath.charAt(i)=='/') back.append('/').append(".."); sourceNamePanel.setBackText(back.toString());} private void parsePkg(String relPath) { int prev=-1; String part=""; for(int i=0; i < relPath.length(); i++) if(relPath.charAt(i)=='/') { if(prev < 0) part=new Ester(relPath).sub(0,i).toString(); else part=new Ester(relPath).sub(prev+1,i).toString(); sourceNamePanel.addRelPathPart(part); prev=i;} if(prev >-1) { part=new Ester(relPath).sub(prev+1).toString(); sourceNamePanel.addRelPathPart(part);}} private void oneLineTansform(ProcessCommandZhoo cmd) { panelAg.getLogPanel().addLog("Starting "+path); cmd.getReadyFree().setFree(); if(cmd.isNeedClear()) { taSource.setText(""); sourceNamePanel.setSrcNameText(""); sourceNamePanel.clearRelPath(); sourceNamePanel.setBackText("");}} public void run() { while(Better.working) { if(cq.hasSomeWork()) { CommandZhoo cmd=cq.nextCurrent(); interpret(cmd);} sleeper.sleep(5 * 5);}} public void clearPanel() { taSource.setText(""); name=""; path=""; looking=""; sourceNamePanel.clearPanel(); zp.clearPanel();}} class ZhooRelPathExtractor { String extract(String fileName,String filePath,String startPath) { String path2=new Data().replace(new Ester(filePath),new Ester(fileName),new Ester("")).toString(); path2=new Data().replace(new Ester(path2),new Ester(startPath.toLowerCase()),new Ester("")).toString(); if(path2.length() > 0 && new Ester(path2).begins(new Ester("\\"))) path2=new Ester(path2).sub(1).toString(); if(path2.length() > 0 && new Ester(path2).begins(new Ester("/"))) path2=new Ester(path2).sub(1).toString(); if(path2.length() > 0 && new Ester(path2).ends(new Ester("\\"))) path2=new Ester(path2).sub(0,path2.length()-3+1+1).toString(); if(path2.length() > 0 && new Ester(path2).ends(new Ester("/"))) path2=new Ester(path2).sub(0,path2.length()-3+1+1).toString(); if(path2.length() > 0 && path2.indexOf('\\') >= 0) path2=new Data().replace(new Ester(path2),new Ester("\\"),new Ester("/")).toString(); return path2;}} class MainClsApproachProvider implements AbstractApproachProvider { ZhooPanelAg panelAg; public MainClsApproachProvider(ZhooPanelAg panelAg) { super(); this.panelAg=panelAg;} public AbstractApproach provideApproach() { return new MainClsSearchPanel(panelAg);}} class MainClsParallelPanel extends AbstractParallelPanel { static final String CMD_INIT_SRC="initSource"; static final String CMD_READ_SRC="readSource"; static ZhooPanelAg ag; MainClsParallelPanel(int nWidth,int nHeight) { super(nWidth,nHeight);} public void initSource() { Params params=new Params(CMD_INIT_SRC); params.addParam("name",""); params.addParam("path",""); doAllQuick(params);} public MainClsSearchPanel assignSource(String name,String path,String looking,String relPath,int idxSel) { Params params=new Params(CMD_READ_SRC); params.addParam("name",name); params.addParam("path",path); params.addParam("looking",looking); params.addParam("relPath",relPath); params.addParam("idxSel",new Integer(idxSel)); AbstractApproach abstractApproach=doFirstAvail(params); return(MainClsSearchPanel) abstractApproach;} public static MainClsParallelPanel create(boolean quade,ZhooPanelAg panelAg) { if(panelAg !=null) MainClsParallelPanel.ag=panelAg; return quade ? new MainClsParallelPanel(2+1,1) : new MainClsParallelPanel(1,1);} protected AbstractApproachProvider obtainProvider() { return new MainClsApproachProvider(ag);}} class Orderer { private Karta folders=new Karta(); public void append(Ester item) { if(item !=null && item.length() > 0) folders.put(new FullPathSplit(item).getFolderPath().toString(),item);} public String[] getResult() { String[] fks=folders.keys(); Queue items=new Queue(); for(int i=0; i < fks.length; i++) if(fks[i] !=null && fks[i].length() > 0) items.enqueueQueueRecord(fks[i]); Object[] queueRecordsArray=items.getQueueRecordsArray(); String[] result=new String[(int) queueRecordsArray.length]; for(int i=0; i < result.length; i++) result[i]=(String) queueRecordsArray[i]; new Order().order(result); return result;}} class FullPathSplit { private Ester fullPath; public FullPathSplit(Ester fullPath) { super(); this.fullPath=fullPath;} public Ester getFullPath() { return fullPath;} public Ester getParentFolder() { Ester path2=getFolderPath(); if(path2 !=null && path2.length() > 0) path2=path2.sub(0,path2.length()-1); if(path2 !=null && path2.length() > 0) path2=new FullPathSplit(path2).getFileName(); return path2;} public Ester getFileName() { return new Ester(fullPath).sub(1+(new Ester(fullPath).indexX('/') > new Ester(fullPath).indexX('\\') ? new Ester(fullPath).indexX('/') : new Ester(fullPath).indexX('\\')));} public Ester getFolderPath() { return new Ester(fullPath).sub(0,1-1+1+(new Ester(fullPath).indexX('/') > new Ester(fullPath).indexX('\\') ? new Ester(fullPath).indexX('/') : new Ester(fullPath).indexX('\\')));}} class DuoButton extends ToogleMultyButton { public DuoButton() { super();} public Button getDuoBtn() { return getMultyBtn();} public boolean getDuo() { return getState();} protected String getMultyName() { return "Trio";} protected int getMultyNumber() { return 1+1+1;}} class RightChkaSaveAllTask extends ProgressMultiTasking { LeftPackageItemsPanel leftPanel; RightTasksPanel taskPanel; ChkaPathPanel pathPanel; MainClsParallelPanel quadePanel; private MainClsProcessorHolder spCurrentHolder; private Sleeper totalSleeper; private LongTermCtrl ltc; private boolean sepLunch; public RightChkaSaveAllTask(LeftPackageItemsPanel leftPanel,RightTasksPanel taskPanel,ChkaPathPanel pathPanel,MainClsParallelPanel quadePanel,MainClsProcessorHolder spCurrentHolder,Sleeper totalSleeper,LongTermCtrl longTermMnogaCtrl,boolean sepLunch) { super(); this.leftPanel=leftPanel; this.taskPanel=taskPanel; this.pathPanel=pathPanel; this.quadePanel=quadePanel; this.spCurrentHolder=spCurrentHolder; this.totalSleeper=totalSleeper; this.ltc=longTermMnogaCtrl; this.sepLunch=sepLunch;} public LeftPackageItemsPanel getLeftPanel() { return leftPanel;} public RightTasksPanel getTaskPanel() { return taskPanel;} public ChkaPathPanel getPathPanel() { return pathPanel;} public MainClsParallelPanel getQuadePanel() { return quadePanel;} public Sleeper getTotalSleeper() { return totalSleeper;} protected void performTask() { rightSelectedSaveAll(ltc,totalSleeper,sepLunch);} protected void rightSelectedSaveAll(LongTermCtrl ltc,Sleeper sleeper,boolean sepLunch) { leftPanel.selectNothing(); int size2=taskPanel.itemsNum(); if(size2 > 0) { for(int i=0;(sepLunch ? true : ltc.hasLongTermContin()) && i < size2; i++) { taskPanel.selectItem(i); taskPanel.rightSelected(pathPanel,spCurrentHolder,quadePanel); taskPanel.rightSelectedSave(spCurrentHolder,quadePanel); System.out.println("SLEEP_11"); sleeper.sleep(166 * 2); recountComplete(i+1,size2);} System.out.println("SLEEP_22");} if(sepLunch) { pathPanel.disableStop(); leftPanel.enableAuto(true); leftPanel.enableCtrls(true);}}} class LeftChkaViewAllTask extends ProgressMultiTasking { LeftPackageItemsPanel leftPanel; RightTasksPanel taskPanel; MainClsParallelPanel quadePanel; LoggingVkusnjashki logPanel; ChkaPathPanel pathPanel; public LeftChkaViewAllTask(LeftPackageItemsPanel leftPanel,MainClsParallelPanel quadePanel,ChkaLogPanel logPanel,ChkaPathPanel pathPanel,RightTasksPanel taskPanel) { this.leftPanel=leftPanel; this.taskPanel=taskPanel; this.quadePanel=quadePanel; this.logPanel=logPanel; this.pathPanel=pathPanel;} protected void performTask() { MainClsProcessor sp; Sleeper sleeper=new Sleeper(); Time t=new Time(); LongTermCtrl ltc=pathPanel; t.start(); int size1=leftPanel.itemsNum(); if(size1 > 0) { for(int i=0; ltc.hasLongTermContin() && i < size1; i++) { leftPanel.selectItem(i); sp=leftPanel.leftSelected(pathPanel,logPanel,quadePanel); sp.process(true); System.out.print("1"); while(quadePanel.hasAvailable()==false) { sleeper.sleep(166); System.out.print("SLEEP_1");} System.out.println("2"); recountComplete(i+1,size1);} while(quadePanel.hasInProgress()) { sleeper.sleep(166); System.out.print("SLEEP_2");} System.out.println("");} sp=null; quadePanel.clearPanels(); t.trust(); logPanel.addLogComplete("Average records("+quadePanel.getAverageRec().getRecordsNum()+") processing time is "+quadePanel.getAverageRec().getAverageTime()+"s also min time is "+quadePanel.getAverageRec().getMinTime()+"s and max time is "+quadePanel.getAverageRec().getMaxTime()+"s"); logPanel.addLogComplete("Review All left items complete in "+t.ess()); pathPanel.getBtScan().enable(true); pathPanel.enableDuoBtn(true); pathPanel.enablePreview(true); leftPanel.enableBtAuto(true); leftPanel.enableBtReview(true); leftPanel.enableCtrls(true); taskPanel.enableCtrls(true); pathPanel.disableStop();}} class LeftChkaProcessAllTask extends ProgressMultiTasking { LeftPackageItemsPanel leftPanel; MainClsParallelPanel quadePanel; LoggingVkusnjashki logPanel; ChkaPathPanel pathPanel; private Sleeper totalSleeper; private int totalSize; private LongTermCtrl ltc; public LeftChkaProcessAllTask(LeftPackageItemsPanel leftPanel,MainClsParallelPanel quadePanel,LoggingVkusnjashki logPanel,ChkaPathPanel pathPanel,Sleeper totalSleeper,int totalSize,LongTermCtrl longTermMnogaCtrl) { super(); this.leftPanel=leftPanel; this.quadePanel=quadePanel; this.logPanel=logPanel; this.pathPanel=pathPanel; this.totalSleeper=totalSleeper; this.totalSize=totalSize; this.ltc=longTermMnogaCtrl;} protected void performTask() { leftSelectionProcessAll(totalSleeper,ltc,totalSize);} protected void leftSelectionProcessAll(Sleeper sleeper,LongTermCtrl ltc,int size1) { MainClsProcessor sp; for(int i=0; ltc.hasLongTermContin() && i < size1; i++) { leftPanel.selectItem(i); sp=leftPanel.leftSelected(pathPanel,logPanel,quadePanel); sp.process(true); System.out.print("1"); while(quadePanel.hasAvailable()==false) { sleeper.sleep(166); System.out.print("SLEEP_1");} System.out.println("2"); recountComplete(i+1,size1);}}} class MainClsProcessorHolder { MainClsProcessor spCurrent; public MainClsProcessorHolder() { super();} public MainClsProcessor getSpCurrent() { return spCurrent;} public void setSpCurrent(MainClsProcessor spCurrent) { this.spCurrent=spCurrent;}} class ZhooProps extends Props { static final String DEF_ENV_VAR="CP1"; static final String ENV_VAR_ESC=" %^*?\\/!"; static final String BC_BOTH_EXT="Both"; static final String BC_EXT_BATCH="Batch shell"; static final String BC_EXT_COMMAND="Command shell";}