package mydev.cn; import java.awt.BorderLayout; import java.awt.Button; import java.awt.Checkbox; import java.awt.Choice; import java.awt.Color; import java.awt.Component; import java.awt.Dimension; import java.awt.Event; import java.awt.Frame; import java.awt.Graphics; import java.awt.Image; import java.awt.Label; import java.awt.Panel; import java.awt.Point; import java.awt.Rectangle; import java.awt.TextField; import java.awt.Toolkit; import java.awt.image.ImageObserver; import java.io.File; import java.util.Date; import mydev.aaa.Enter; import mydev.aaa.Kadr; import mydev.aaa.Longy; import mydev.aaa.Okno; import mydev.aaa.Shift; import mydev.aaa.Shorty; import mydev.aaa.Sleeper; import mydev.aaa.Slip; import mydev.aaa.Slipstream; import mydev.aaa.Stop; import mydev.about.Bitmap; import mydev.about.CanvasAdapter; import mydev.about.CanvasAdapterAboutImpl; import mydev.about.PaintAdapter; import mydev.about.PaintAdapterAboutImpl; import mydev.about.Point2D; import mydev.about.Rectangle2D; import mydev.about.Text2D; import mydev.bbb.AbstractOknoManager; import mydev.bbb.BOkno; import mydev.bbb.Enter2; import mydev.bbb.InternalPlane; import mydev.bbb.Mode; import mydev.bbb.Location; import mydev.bbb.PreviewRightPanel; import mydev.bbb.ToolbarLeftPanel; import mydev.ccc.COkno; import mydev.ccc.Enter3D; import mydev.ccc.Internal3DPlane; import mydev.cndata.AbstractDailyObservation; import mydev.cndata.DailyObservationRepo; import mydev.im12x.ImageFile; import mydev.im12x.ImageFileException; import mydev.uix.AmountPanel; import mydev.uix.Better; import mydev.uix.CommonDataArrayPanel; import mydev.uix.GeoLayoutBuilder; import mydev.uix.HeaderPathPanel; import mydev.uix.LabeledPanel; import mydev.uix.ListPanel; import mydev.uix.LoggingVkusnjashki; import mydev.uix.MultyButtonTiersBuilder; import mydev.uix.PagesPanel; import mydev.uix.Props; import mydev.uix.ReverseRotateAutoPanel; import mydev.uix.SizePanel; import mydev.uix.Timer; import mydev.uix.ToogleMultyButton; import mydev.uix.WidthHeight; import mydev.vutils.Data; import mydev.vutils.Ester; import mydev.vutils.Files; import mydev.vutils.Filter; import mydev.vutils.Join; import mydev.vutils.Karta; import mydev.vutils.Metr; import mydev.vutils.Queue; import mydev.vutils.SharedGreatesArray; import mydev.vutils.TimeTracking; public class Teaching extends Frame implements Runnable,Stop,Kadr { final short fin=18; static Shorty rt=Enter3D.instance().shorty(); static Longy lg=Enter3D.instance().longy(); static boolean startEmbededPictures=true; PanelClPath pathPanel; FieldCv fieldCv; TeaRightPanel rightPanel; private ImagesPackSet ipSet; private ToolbarLeftPanel leftPanel; private PreviewRightPanel topPanel; ClOknoManager oknoManager3D; public Teaching() { super(); this.pathPanel=new PanelClPath(); GeoLayoutBuilder.create().bgColor(Color.darkGray).appendNorth(pathPanel.getWrapPanel()).appendEast(rightPanel=new TeaRightPanel()).appendWest(leftPanel=new ToolbarLeftPanel(true)).appendCenter(fieldCv=new FieldCv(leftPanel)).build(this); this.ipSet=new ImagesPackSet(rightPanel.getPanelDays()); this.topPanel=rightPanel.getPreviewRightPanel();} public static void main(String[] args) throws OknoManagerException { Teaching main=new Teaching(); main.setTitle("Leaves Days Professional"); main.show(); main.start(); main.pack(); main.reMoveRnd(); main.resize((short)(800 *(1.f+1.f-.4f+.15f-.06f+0.044f-.0056f+.0465999f)),(short)(600 * 1.16667f)); Sleeper sleeper=new Sleeper(); while(Better.working) { main.refreshUpdatable(); TimeTracking.memTrack(); sleeper.sleep(Timer.DEF_REF_TIME);} main.ka(); main.hide(); main.dispose(); System.exit(1-1);} private void start() { fieldCv.enableMode3D(!fieldCv.isMode3D()); processReloadImages(); pathPanel.extPathEnable(false==pathPanel.getEmbeded());} static short getMainWindowWidth() { return(short)(Location.MAIN_WINDOWS_WIDTH * 1.32f);} protected void reMoveRnd() { Location ol=Enter2.instance().location(); Point p=ol.getRandomExternalPos((short)(800 *(1.f+1.f-.4f+.15f-.06f+0.044f-.0056f+.0465999f)),(short)(600 * 1.16667f)); move(p.x,p.y);} private void refreshUpdatable() { fieldCv.refreshUpdatable(); pathPanel.refreshUpdatable();} private void autoStart() { leftPanel.enableCtrls(false); new Thread(this).start();} public boolean handleEvent(Event et) { if(et.id==Event.WINDOW_DESTROY) { try { OknoManagerAbstract.destroyAllWindows(fieldCv);} catch(OknoManagerException e) { e.printStackTrace();} new Better().exitApplicationLoop();} Object tg=et.target; if(tg==pathPanel.getAutoPanel().getBtNext() && et.id==Event.ACTION_EVENT) itemNext(); if(tg==pathPanel.getAutoPanel().getBtPrev() && et.id==Event.ACTION_EVENT) itemPrevious(); if(tg==pathPanel.getAutoPanel().getBtAuto() && et.id==Event.ACTION_EVENT) auto(); if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getBtAuto()) autoStart(); if(et.id==Event.ACTION_EVENT && et.target==rightPanel.getPreviewRightPanel().getBtStop()) rightPanel.getPreviewRightPanel().disableStop(); if(tg==pathPanel.getAutoPanel().getChAuto() && et.id==Event.ACTION_EVENT) auto(); if(tg==pathPanel.getAutoPanel().getChRev() && et.id==Event.ACTION_EVENT) autoRev(); if(tg==leftPanel.getBtDef() && et.id==Event.ACTION_EVENT) { leftPanel.getWhPanel().whReset(); reset();} if(tg==leftPanel.getBtRepo() && et.id==Event.ACTION_EVENT) repositionWindows(); if(et.id==Event.ACTION_EVENT && tg==pathPanel.getChExt()) processFormatSelection(); if(et.key==Event.F1 && et.id==Event.KEY_ACTION) repositionWindows(); if(et.key==Event.F2 && et.id==Event.KEY_ACTION) auto(); if(tg !=null && tg.equals(leftPanel.getWhPanel().getTfWidth()) && et.id==Event.LOST_FOCUS) commonWidthHeightChanges(leftPanel.getWhPanel()); if(tg !=null && tg.equals(leftPanel.getWhPanel().getTfHeight()) && et.id==Event.LOST_FOCUS) commonWidthHeightChanges(leftPanel.getWhPanel()); if(tg !=null && tg.equals(pathPanel.getAutoPanel().getTfAuto()) && et.id==Event.LOST_FOCUS) autoReplace(); if(et.id==Event.ACTION_EVENT && et.target==leftPanel.getCbD3()) withD3(leftPanel.getD3()); if(tg !=null && tg.equals(leftPanel.getCbExt()) && et.id==Event.ACTION_EVENT) reload(); if(tg==pathPanel.getBtReload() && et.id==Event.ACTION_EVENT) processReloadImages(); if(tg==pathPanel.getCbEmbeded() && et.id==Event.ACTION_EVENT) processEmbeded(); if(et.id==Event.LIST_SELECT && rightPanel.getPanelDays().isItemsCtrl(et.target)) leftSelected(); return super.handleEvent(et);} public void make(Graphics cs1,short mx,short my) {} public void run() { topPanel.enableStop(); Sleeper sleeper=new Sleeper(); int i; for(i=0; topPanel.hasLongTermContin() && i < fin; i++) { topPanel.setProgText(""+(fin-i)); repositionWindows(); sleeper.sleep((long)(2300 * 2.12));} if(topPanel.hasLongTermContin()) { topPanel.setProgText(""+(fin-i)); reset(); sleeper.sleep((long)(2300 * 2.12));} if(topPanel.getPreview() && topPanel.hasLongTermContin()) new Better().exitApplicationLoop(); leftPanel.enableCtrls(true); topPanel.disableStop(); topPanel.setProgText("");} private void leftSelected() { rightPanel.getPanelDays().leftSelected();} private void processFormatSelection() { try { startOuter();} catch(OknoManagerException e) { e.printStackTrace();}} private void itemPrevious() { if(pathPanel.getAutoPanel().isAutoEnable()) auto(); OknosManager oknoCtrl=obtainMassControl(); oknoCtrl.previousOknos();} private void itemNext() { if(pathPanel.getAutoPanel().isAutoEnable()) auto(); OknosManager oknoCtrl=obtainMassControl(); oknoCtrl.nextOknos();} private void commonWidthHeightChanges(WidthHeight whPanel) { short commonWidth=(short) Integer.parseInt(whPanel.getWidthTxt()); short commonHeight=(short) Integer.parseInt(whPanel.getHeightTxt()); OknosManager oknoCtrl=obtainMassControl(); oknoCtrl.updateOknosWidthHeight(commonWidth,commonHeight); fieldCv.performRepaint();} OknosManager obtainMassControl() { Mode mode=leftPanel.getSelectedOknosMode(); Internal3DPlane plane3D=fieldCv; try { OknosManager massControl=OknoManagerAbstract.obtain(mode,plane3D); return massControl;} catch(OknoManagerException e) { e.printStackTrace();} return null;} private void repositionWindows() { try { reposition(leftPanel.getExt3dPanel().getExternal()); reload();} catch(OknoManagerException e) { e.printStackTrace();}} private void reposition(boolean ext) throws OknoManagerException { if(ext) repositionExternal(); else repositionInternal(); extInternal(leftPanel.getExternal()); fieldCv.performRepaint();} private void extInternal(boolean ext) throws OknoManagerException { hideAllWindows(); if(ext) reloadExternal(); else reloadInternal();} private void repositionInternal() throws OknoManagerException { Location ol=Enter2.instance().location(); Rectangle cvr=fieldCv.getBounds(); ol.regInternalSize(cvr.width,cvr.height); short commonOknoWidth=TeaProps.getCommonWidth(leftPanel); short commonOknoHeight=TeaProps.getCommonHeight(leftPanel); OknosManager massControl=obtainMassControl(); int num=massControl.getOknosNum(); for(int i=0; i < num; i++) { Point p=ol.getRandomInternalPos(commonOknoWidth,commonOknoHeight); massControl.getOkno(i).move((short) p.x,(short) p.y);}} private void repositionExternal() throws OknoManagerException { Location ol=Enter2.instance().location(); short commonOknoWidth=TeaProps.getCommonWidth(leftPanel); short commonOknoHeight=TeaProps.getCommonHeight(leftPanel); OknosManager massControl=obtainMassControl(); int num=massControl.getOknosNum(); for(int i=0; i < num; i++) { Point p=ol.getRandomExternalPos(commonOknoWidth,commonOknoHeight); massControl.getOkno(i).move((short) p.x,(short) p.y);}} private void autoReplace() { short autoDelay=(short) pathPanel.getAutoPanel().getAutoDelay(); OknosManager oknoCtrl=obtainMassControl(); oknoCtrl.updateOknosDelay(autoDelay);} private void reset() { pathPanel.chooseExt(0+1+1-1); leftPanel.getWhPanel().setWidthTxt(""+WidthHeight.microWidth); leftPanel.getWhPanel().setHeightTxt(""+WidthHeight.microHeight); pathPanel.setAutoText(TeaProps.AUTO_DELAY); ipSet.refresh(pathPanel.getPath(),pathPanel.getExtsSelected()); commonWidthHeightChanges(leftPanel.getWhPanel()); autoReplace(); pathPanel.getAutoPanel().setAutoEnable(false); auto(); fieldCv.performRepaint();} private void reload() { try { extInternal(leftPanel.getExternal(),leftPanel.getExt3dPanel().get3d());} catch(OknoManagerException e) { e.printStackTrace();} pathPanel.getAutoPanel().setAutoEnable(false); auto();} private void autoRev() { ReverseRotateAutoPanel autoPanel=pathPanel.getAutoPanel(); OknosManager oknoCtrl=obtainMassControl(); oknoCtrl.autoEnable(autoPanel.isAutoEnable(),autoPanel.isReverse());} private void auto() { ReverseRotateAutoPanel autoPanel=pathPanel.getAutoPanel(); autoPanel.setAutoEnable(autoPanel.isAutoEnable()==false); OknosManager oknoCtrl=obtainMassControl(); oknoCtrl.autoEnable(autoPanel.isAutoEnable(),autoPanel.isReverse());} private void extInternal(boolean ext,boolean d3) throws OknoManagerException { hideAllWindows(); if(ext) reloadExternal(); else reloadInternal();} private void withD3(boolean d3) { fieldCv.enableMode3D(d3); fieldCv.markRepaint(); refreshUpdatable();} private void hideAllWindows() { ka();} public void ka() { try { OknoManagerAbstract.destroyAllWindows(fieldCv);} catch(OknoManagerException e) { e.printStackTrace();}} private void reloadInternal() throws OknoManagerException { Location ol=Enter2.instance().location(); hideAllWindows(); short w=TeaProps.getCommonWidth(leftPanel); short h=TeaProps.getCommonHeight(leftPanel); int delay=pathPanel.getAutoPanel().getAutoDelay(); OknosManager massControl=obtainMassControl(); for(int i=0; i < ipSet.getSize(); i++) { ImagesPack ip=ipSet.getIp(i); Point p=ol.getRandomInternalPos(w,h); OknosCtx ctx=new OknosCtx(); ctx.setAttr("ip",ip); massControl.createOkno((short) p.x,(short) p.y,w,h,(short) delay,ctx);} fieldCv.setRedraw(true,fieldCv.isMode3D());} private void reloadExternal() throws OknoManagerException { Location ol=Enter2.instance().location(); fieldCv.setRedraw(false,false); hideAllWindows(); fieldCv.markRepaint(); short w=TeaProps.getCommonWidth(leftPanel); short h=TeaProps.getCommonHeight(leftPanel); int delay=pathPanel.getAutoPanel().getAutoDelay(); OknosManager massControl=obtainMassControl(); for(int i=0; i < ipSet.getSize(); i++) { ImagesPack ip=ipSet.getIp(i); Point p=ol.getRandomExternalPos(w,h); OknosCtx ctx=new OknosCtx(); ctx.setAttr("ip",ip); massControl.createOkno((short) p.x,(short) p.y,w,h,(short) delay,ctx);}} private void processEmbeded() { pathPanel.extPathEnable(false==pathPanel.getEmbeded()); processReloadImages();} private void processReloadImages() { try { boolean embededPictures=pathPanel.getEmbeded(); if(embededPictures) startEmbeded(); else startOuter();} catch(OknoManagerException e) { e.printStackTrace();}} public void startEmbeded() throws OknoManagerException { ipSet.clear(); rightPanel.getPanelDays().clearDays(); int size1=(int) DailyObservationRepo.instance().getDailyNum(); for(int i=0; i < size1; i++) { AbstractDailyObservation dayView=DailyObservationRepo.instance().getDaily(i); ImagesPack ip=new ImagesPack(i,dayView,this,ipSet); ipSet.addIp(ip);} for(int i=0; i < ipSet.getSize(); i++) rightPanel.getPanelDays().addLeavesDay(ipSet.getIp(i)); if(rightPanel.getPanelDays().hasDays()) rightPanel.getPanelDays().selectNoDay(); reload();} public void startOuter() throws OknoManagerException { String path=pathPanel.getPath(); ipSet.reloadDays(path); rightPanel.getPanelDays().clearDays(); for(int i=0; i < ipSet.getSize(); i++) rightPanel.getPanelDays().addLeavesDay(ipSet.getIp(i)); if(rightPanel.getPanelDays().hasDays()) rightPanel.getPanelDays().selectNoDay(); reload(); ReverseRotateAutoPanel autoPanel=pathPanel.getAutoPanel(); OknosManager oknoCtrl=obtainMassControl(); oknoCtrl.autoEnable(autoPanel.isAutoEnable(),autoPanel.isReverse()); ipSet.refresh(pathPanel.getPath(),pathPanel.getExtsSelected());}} class ClOknoManager extends AbstractOknoManager implements Kadr { Internal3DPlane oknosPlane3D; public ClOknoManager(Internal3DPlane oknosPlane3D) { super(); this.oknosPlane3D=oknosPlane3D;} public void make(Graphics ics,short mx,short my) {} public void reloadInternal(Stop ka) {} public void hideAllWindows() {} public void reloadExternal() {} public void reset() {}} class PanelClPath extends HeaderPathPanel { final static String NAME_RELOAD="Reload"; final static String NAME_EMBEDED="Embeded"; final static String NAME_DAYSPATH="Pictures Path:"; final static String CH_EXT="chExt"; final static String BT_RELOAD="btReload"; final static String CB_EMBEDED="cbEmbeded"; final static String AUTO_PANEL="autoPanel"; public PanelClPath() { super("Leaves Days Professional",false,false,false,LabeledPanel.DEF_MIN_SIZE,TeaProps.northBgColor,TeaProps.northBorderColor,TeaProps.northTextColor);} public void extPathEnable(boolean enable) { enableExtension(enable); getTfPath().enable(enable);} protected ToogleMultyButton obtainMultyButton() { return null;} protected Label obtainLbPath() { return new Label(NAME_DAYSPATH);} protected TextField obtainTfPath() { TextField tfPath=new TextField("",50+30+20+30+20-55-15-30-20+10+10); tfPath.setText("C:\\Users\\dzianis\\Desktop\\Leaves Days"); return tfPath;} protected void buildPanel() { buildPath(); Choice chExt=new Choice(); chExt.addItem(TeaProps.BC_EXTDEF); chExt.addItem("*"+TeaProps.BC_EXT1); chExt.addItem("*"+TeaProps.BC_EXT2); chExt.addItem("*"+TeaProps.BC_EXT3); chExt.addItem("*"+TeaProps.BC_EXT4); chExt.addItem("*"+TeaProps.BC_EXT5); chExt.select(0+1+1-1+1-1); append(CH_EXT,chExt); Button btReload=new Button(NAME_RELOAD); append(BT_RELOAD,btReload); Checkbox cbEmbeded=new Checkbox(NAME_EMBEDED); cbEmbeded.setState(Teaching.startEmbededPictures); append(CB_EMBEDED,cbEmbeded); append(AUTO_PANEL,ReverseRotateAutoPanel.createPanel(TeaProps.AUTO_DELAY,true));} public void setAutoText(String autoDelay) {((ReverseRotateAutoPanel) getCtrl(AUTO_PANEL)).getTfAuto().setText(autoDelay);} public ReverseRotateAutoPanel getAutoPanel() { return(ReverseRotateAutoPanel) getCtrl(AUTO_PANEL);} public void enableCtrls(boolean enable) {((ReverseRotateAutoPanel) getCtrl(AUTO_PANEL)).enableCtrls(enable);} public Choice getChExt() { return(Choice) getCtrl(CH_EXT);} public void chooseExt(int pos) {((Choice) getCtrl(CH_EXT)).select(pos);} public String getExtSelected() { return((Choice) getCtrl(CH_EXT)).getSelectedItem();} public String[] getExtsSelected() { String[] result=new String[1]; result[1-1]=getExtSelected(); return result;} public Checkbox getCbEmbeded() { return(Checkbox) getCtrl(CB_EMBEDED);} public boolean getEmbeded() { return getCbEmbeded().getState();} public void enableEmbeded(boolean enable) {((Checkbox) getCtrl(CB_EMBEDED)).enable(enable);} public void enableExtension(boolean enable) {((Choice) getCtrl(CH_EXT)).enable(enable);} public Color getPanelBgColor() { return TeaProps.bgTopColor;} public Button getBtReload() { return(Button) getCtrl(BT_RELOAD);}} class StatCnPanel extends AmountPanel { public StatCnPanel() { super("","Days");} public Color getPanelBgColor() { return Props.bgAmountPanelColor;} protected int getPosWidth() { return super.getPosWidth()-1-1;} protected int getAmountWidth() { return super.getAmountWidth()-1-1;}} class TeaPagesPanel extends PagesPanel { public TeaPagesPanel() { super(TeaProps.listPanelPageSize);} public Color getPanelBgColor() { return TeaProps.bgPagesPanelColor;}} class TeaRightPanel extends Panel { PreviewRightPanel previewRightPanel; PanelDays panelDays; public TeaRightPanel() { super(); setLayout(new BorderLayout()); setBackground(Props.bgTopColor); add("East",previewRightPanel=new PreviewRightPanel()); add("West",panelDays=new PanelDays());} public PreviewRightPanel getPreviewRightPanel() { return previewRightPanel;} public PanelDays getPanelDays() { return panelDays;}} class PanelDays extends CommonDataArrayPanel { ListPanel listPanel; DaySelectSizePanel sizePanel; SizeCtrlsPanel ctrlsSizePanel; private Queue leftItemsQueue; private Metr totalCount=new Metr(); private Metr totalSize=new Metr(); public PanelDays() { super(); this.leftItemsQueue=new Queue();} public void leftSelected() { int idxSel=getSelectedIdx(); setPosition(""+(idxSel+1)); ctrlsSizePanel.getCtrlsPanel().enableStops(true); ImagesPack curIp=(ImagesPack) leftItemsQueue.getQueueRecord(idxSel); setItemSize(""+new Metr(curIp.getIpSize()).repr(',')); setItems(""+new Metr(curIp.getIpAmount()).repr(','));} public void recountTotalItems() { totalSize=new Metr(); totalCount=new Metr(); Object[] queueRecordsArray=leftItemsQueue.getQueueRecordsArray(); for(int i=0; i < queueRecordsArray.length; i++) { ImagesPack curIp=(ImagesPack) queueRecordsArray[i]; totalSize.inc(curIp.getIpSize()); totalCount.inc(curIp.getIpAmount());}} public void updateTotalItems() { setTotalItems(""+totalCount.repr(' ')); setSize(""+totalSize.repr(','));} public void clearDays() { listPanel.clearItems(); leftItemsQueue.clearQueue(); listPanel.selectNothing(); displayAmount(0); selectItem(0); setItemSize(""); setItems(""); setTotalItems(""); setSize(""); totalCount=new Metr(0); totalSize=new Metr(0);} public void selectNoDay() { listPanel.selectNothing();} public void setItems(String txt) { ctrlsSizePanel.getSelDayAmountPanel().getTfItemSize().setText(txt);} public void setTotalItems(String txt) { ctrlsSizePanel.getSelDayAmountPanel().getTfTotalSize().setText(txt);} public boolean hasDays() { return !leftItemsQueue.isEmptyQueue();} public void addLeavesDay(ImagesPack imagesPack) { addItem(imagesPack.getName()); leftItemsQueue.enqueueQueueRecord(imagesPack);} public void addItem(String item) { listPanel.addItem(item); displayAmount(leftItemsQueue.sizeOfQueue());} void displayAmount(long sizeOfQueue) { Ester repr=new Metr(sizeOfQueue).repr(' '); setAmount(new Ester("0").eq(repr) ? "" : repr.toString());} protected Panel obtainControlsPanel() { this.ctrlsSizePanel=new SizeCtrlsPanel(); return ctrlsSizePanel;} protected ListPanel obtainListPanel() { this.listPanel=new ListPanel(new StatCnPanel(),new TeaPagesPanel()); return listPanel;} protected SizePanel obtainSizePanel() { this.sizePanel=new DaySelectSizePanel(); return sizePanel;} public Color getPanelBgColor() { return Props.bgSideColor;} protected Color getWrapPanelColor() { return Props.bgStatPanelColor;}} class FieldCv extends Internal3DPlane { ToolbarLeftPanel leftPanel; private Date dLast; private boolean internalWindows; private boolean internal3D; private boolean loaded=false; public FieldCv(ToolbarLeftPanel leftPanel) { super(Color.gray,Color.lightGray); enableMode3D(false); this.leftPanel=leftPanel; dLast=new Date();} public void setRedraw(boolean internalWindows,boolean internal3D) { this.internalWindows=internalWindows; this.internal3D=internal3D; invalidate(); repaint();} public void refresh() { if(1+1 < 1) { Date dCur=new Date(); if(dCur.getTime()-dLast.getTime() > 997) { invalidate(); repaint();}} else { invalidate(); repaint();}} public void refreshUpdatable() { if(checkRepaint()) performRepaint();} public void paint(Graphics cs1) { super.paint(cs1); if(!internal3D) drawSampleContent(cs1); try { if(internalWindows) { if(internal3D) drawInternalWindows3D(this); else drawInternalWindows(this);} else drawExternalWindows(cs1);} catch(OknoManagerException e) { e.printStackTrace();} dLast=new Date();} private void drawExternalWindows(Graphics cs1) throws OknoManagerException { OknoManagerExternal ome=(OknoManagerExternal) OknoManagerAbstract.obtain(Mode.EXT,this); Shorty or=Enter.instance().shorty(); OknoFrame frame=new OknoFrame(); OknoViewEmptyKadr kadr=new OknoViewEmptyKadr(); short maxWidth=10; short maxHeight=10; for(int i=0; i < ome.getOknosNum(); i++) { Okno okno=ome.getOkno(i); frame.recall(okno.memo()); if(maxWidth < frame.w) maxWidth=frame.w; if(maxHeight < frame.h) maxHeight=frame.h; kadr.updatePos(frame.x,frame.y); kadr.make(cs1,frame.w,frame.h);} if(!loaded && new Ester(leftPanel.getWhPanel().getWidthTxt()).nteq(new Ester(""+maxWidth))) { loaded=true; leftPanel.getWhPanel().setWidthTxt(""+maxWidth); leftPanel.getWhPanel().setHeightTxt(""+maxHeight);} else if(!loaded && new Ester(leftPanel.getWhPanel().getHeightTxt()).nteq(new Ester(""+maxHeight))) { loaded=true; leftPanel.getWhPanel().setWidthTxt(""+maxWidth); leftPanel.getWhPanel().setHeightTxt(""+maxHeight);}} private void drawInternalWindows(Internal3DPlane panel) throws OknoManagerException { OknoManagerInternal omi=(OknoManagerInternal) OknoManagerAbstract.obtain(Mode.INT,panel); Shorty or=Enter.instance().shorty(); OknoFrame frame=new OknoFrame(); short maxWidth=10; short maxHeight=10; for(int i=0; i < omi.getOknosNum(); i++) { BOkno okno=(BOkno) omi.getOkno(i); OknoIntViewKadr kadr=(OknoIntViewKadr) omi.getWindowKadr(i); frame.recall(okno.memo()); if(maxWidth < frame.w) maxWidth=frame.w; if(maxHeight < frame.h) maxHeight=frame.h; kadr.updatePos(frame.x,frame.y); Graphics cs1=panel.getDrawGraphics(); kadr.make(cs1,or.rev(frame.w,0),or.rev(frame.h,0));} if(!loaded && new Ester(leftPanel.getWhPanel().getWidthTxt()).nteq(new Ester(""+maxWidth))) { loaded=true; leftPanel.getWhPanel().setWidthTxt(""+maxWidth); leftPanel.getWhPanel().setHeightTxt(""+maxHeight);} else if(!loaded && new Ester(leftPanel.getWhPanel().getHeightTxt()).nteq(new Ester(""+maxHeight))) { loaded=true; leftPanel.getWhPanel().setWidthTxt(""+maxWidth); leftPanel.getWhPanel().setHeightTxt(""+maxHeight);}} private void drawInternalWindows3D(Internal3DPlane panel) throws OknoManagerException { OknoManagerInternal3D omi=(OknoManagerInternal3D) OknoManagerAbstract.obtain(Mode.INT3D,panel); Shorty or=Enter.instance().shorty(); OknoFrame frame=new OknoFrame(); short maxWidth=10; short maxHeight=10; for(int i=0; i < omi.getOknosNum(); i++) { COkno okno=(COkno) omi.getOkno(i); OknoIntViewKadr3D kadr=(OknoIntViewKadr3D) omi.getWindowKadr(i); frame.recall(okno.memo()); if(maxWidth < frame.w) maxWidth=frame.w; if(maxHeight < frame.h) maxHeight=frame.h; kadr.updatePos(frame.x,frame.y); Graphics cs1=panel.getDrawGraphics(); kadr.make(cs1,or.rev(frame.w,0),or.rev(frame.h,0));} if(!loaded && new Ester(leftPanel.getWhPanel().getWidthTxt()).nteq(new Ester(""+maxWidth))) { loaded=true; leftPanel.getWhPanel().setWidthTxt(""+maxWidth); leftPanel.getWhPanel().setHeightTxt(""+maxHeight);} else if(!loaded && new Ester(leftPanel.getWhPanel().getHeightTxt()).nteq(new Ester(""+maxHeight))) { loaded=true; leftPanel.getWhPanel().setWidthTxt(""+maxWidth); leftPanel.getWhPanel().setHeightTxt(""+maxHeight);}} private void drawSampleContent(Graphics ics) { Dimension d1=size(); ics.drawLine(0,0,d1.width-1,d1.height-1); ics.drawLine(d1.width-1,0,0,d1.height-1); Date d2=new Date(); ics.setColor(Color.black); ics.drawString(""+d2.getTime() % 123456,250,250);}} class DaySelectSizePanel extends SizePanel { final static String EXT_LABEL="byte(s)"; public DaySelectSizePanel() { super("",true);} public Color getPanelBgColor() { return Props.bgSizePanelColor;} protected int getItemSizeWidth() { return 5+5;} protected int getSizeWidth() { return 25-1-2-5-5;}} class DaySelectAmountPanel extends SizePanel { final static String EXT_LABEL="shtukens"; public DaySelectAmountPanel() { super("",true);} protected int getItemSizeWidth() { return 5+5-1-1;} protected int getTotalSizeWidth() { return 5+5-1-1;} public Color getPanelBgColor() { return Props.bgAmountPanelColor;}} class SizeCtrlsPanel extends Panel { DaySelectAmountPanel selDayAmountPanel; DaysExt3DCtrlsPanel ctrlsPanel; public SizeCtrlsPanel() { super(); setLayout(new BorderLayout()); setBackground(Props.bgCtrlPanelColor); add("Center",selDayAmountPanel=new DaySelectAmountPanel()); add("South",ctrlsPanel=new DaysExt3DCtrlsPanel());} public DaySelectAmountPanel getSelDayAmountPanel() { return selDayAmountPanel;} public DaySelectAmountPanel getExtItemsPanel() { return selDayAmountPanel;} public DaysExt3DCtrlsPanel getCtrlsPanel() { return ctrlsPanel;}} class DaysExt3DCtrlsPanel extends Panel { final static String NAME_START="Start"; final static String NAME_STOP="Stop"; final static String NAME_ALL_START="All Start"; final static String NAME_ALL_STOP="All Stop"; Button btStart; Button btStop; Button btStartAll; Button btStopAll; public DaysExt3DCtrlsPanel() { super(); MultyButtonTiersBuilder.create().appendElement(btStart=new Button(NAME_START)).appendElement(btStop=new Button(NAME_STOP)).appendElement(btStartAll=new Button(NAME_ALL_START)).appendElement(btStopAll=new Button(NAME_ALL_STOP)).build(this); enableBtStart(false); enableBtStop(false);} public Button getBtStopAll() { return btStopAll;} public void enableStops(boolean enable) { enableBtStart(enable); enableBtStop(enable);} public void enableBtStart(boolean enable) { btStart.enable(enable);} public void enableBtStop(boolean enable) { btStop.enable(enable);} public Button getBtStart() { return btStart;} public Button getBtStop() { return btStop;} public Button getBtStartAll() { return btStartAll;}} class LoggingTeaVkusnjashkiStub implements LoggingVkusnjashki { private boolean doLogs; public LoggingTeaVkusnjashkiStub() { super();} public LoggingTeaVkusnjashkiStub(boolean doLogs) { super(); this.doLogs=doLogs;} public void addLog(String item) { if(doLogs) System.out.println(item);} public void addLogComplete(String item) { if(doLogs) System.out.println("Complete "+item);} public LoggingVkusnjashki getLogging() { return this;} public void addLog2(String item) { if(doLogs) System.out.println(item);}} interface SizeUpdateListener { void notifyReady(ImagesPack ip);} class ImagesPack implements Runnable { private String name; private AbstractDailyObservation dayView; private Component comp; private int curIdx; private Queue allViews; private Queue allFiles; private String pathToImages; private String[] imagesExts; private Image photo; private LoggingVkusnjashki logPanel; private SharedGreatesArray colorSwap; private int amount; private long size; private SizeUpdateListener listener; protected ImagesPack(String name,Component comp,SizeUpdateListener updateListener) { super(); this.name=name; this.comp=comp; this.curIdx=-1; this.logPanel=new LoggingTeaVkusnjashkiStub(); this.colorSwap=SharedGreatesArray.create(ImageFile.BUF_LIM); initExts(); this.allViews=new Queue(); this.allFiles=new Queue(); this.listener=updateListener;} private void initExts() { imagesExts=new String[1]; imagesExts[1-1]="*.jpg";} protected ImagesPack(int idx,AbstractDailyObservation dayView,Component comp,SizeUpdateListener updateListener) { super(); this.name="DailyObservation"+idx; this.dayView=dayView; this.comp=comp; this.curIdx=-1; this.logPanel=new LoggingTeaVkusnjashkiStub(); this.colorSwap=SharedGreatesArray.create(ImageFile.BUF_LIM); this.allViews=new Queue(); this.allFiles=new Queue(); this.amount=(int) dayView.getPicturesNum(); this.listener=updateListener; if(listener !=null) listener.notifyReady(this);} public String nextImageLoad() { if(dayView !=null) { curIdx-=1; if(curIdx < 0) curIdx=(int)(dayView.getPicturesNum()-1); return name;} if(allViews.sizeOfQueue() < 1) return ""; curIdx-=1; if(curIdx < 0) curIdx=(int)(allViews.sizeOfQueue()-1); return(String) allFiles.getQueueRecord(curIdx);} public String previousImageLoad() { if(dayView !=null) { curIdx+=1; if(curIdx > dayView.getPicturesNum()-1) curIdx=0; return name;} if(allViews.sizeOfQueue() < 1) return ""; curIdx+=1; if(curIdx > allViews.sizeOfQueue()-1) curIdx=0; return(String) allFiles.getQueueRecord(curIdx);} public String getCurrentName() { return(String) allFiles.getQueueRecord(curIdx);} public String getCurrentPath() { return(String) allViews.getQueueRecord(curIdx);} public Image getCurrentImage() throws ImageFileException { if(dayView !=null && curIdx >-1) return loadEmbededImage(curIdx,comp); String curPath=getCurrentPath(); if(isOriginalFormat(curPath)) return loadOriginalFormatImage(curPath,comp); if(isBackupFormat(curPath)) return loadBackupFormatImage(curPath,comp); return null;} public boolean isOriginalFormat(String picturePath) { if(picturePath !=null) if(picturePath.endsWith(".jpg") || picturePath.endsWith(".png") || picturePath.endsWith(".gif")) return true; return false;} public boolean isBackupFormat(String picturePath) { if(picturePath !=null) if(picturePath.endsWith(".im1") || picturePath.endsWith(".im2")) return true; return false;} public Image loadEmbededImage(int idx,Component comp) { Image image=dayView.getImage(idx,comp); return image;} public Image loadOriginalFormatImage(String picturePath,Component comp) { return Toolkit.getDefaultToolkit().getImage(picturePath);} public Image loadBackupFormatImage(String picturePath,Component comp) { ImageFile file=null; try { file=ImageFile.loadImage(picturePath,logPanel,colorSwap);} catch(ImageFileException e) { e.printStackTrace();} if(file !=null) photo=new Bitmap(file.getData(),(short) file.getWidth(),(short) file.getHeight()).getImage(comp); return photo;} public String getName() { return name;} public void refreshReload(String path,String[] exts) { this.pathToImages=path; this.imagesExts=exts; new Thread(this).start();} public void run() { refreshProc(pathToImages);} protected void refreshProc(String path) { allViews=new Queue(); allFiles=new Queue(); amount=0; size=0; String curPath=path+File.separator+name; Ester[] fullTree=new Files().tree(new Ester(curPath)); Ester[] items=null; Ester[] itemsNew=null; for(int i=0; i < imagesExts.length; i++) { String curExt=imagesExts[i]; int iExt=curExt.lastIndexOf('*'); if(iExt >-1) curExt=curExt.substring(iExt+1); if(items==null) items=new Filter().endsWithIncensitive(fullTree,new Ester(curExt)); else { itemsNew=new Filter().endsWithIncensitive(fullTree,new Ester(curExt)); items=new Join().join(items,itemsNew);}} for(int i=0; i < items.length; i++) { allViews.enqueueQueueRecord(items[i].toString()); File file=new File(items[i].toString()); allFiles.enqueueQueueRecord(file.getName()); amount++; size+=file.length();} if(listener !=null) listener.notifyReady(this);} public int getIpAmount() { return amount;} public long getIpSize() { return size;}} class TeaProps extends Props { public static final String AUTO_DELAY=""+ReverseRotateAutoPanel.AUTO_DELAY; public static final Color wndBorder=Color.blue; public static final Color caption=Color.black; public static final Color objRibsNormal=Color.lightGray; final static String BC_EXTDEF="Default"; final static String BC_EXT1=".im1"; final static String BC_EXT2=".im2"; final static String BC_EXT3=".jpg"; final static String BC_EXT4=".png"; final static String BC_EXT5=".gif"; public static short getCommonHeight(ToolbarLeftPanel leftPanel) { return(short) Integer.parseInt(leftPanel.getWhPanel().getHeightTxt());} public static short getCommonWidth(ToolbarLeftPanel leftPanel) { return(short) Integer.parseInt(leftPanel.getWhPanel().getWidthTxt());}} class ClOknoView3D extends ClOknoView implements ImageObserver { public ClOknoView3D(short x,short y,short w,short h,String name,boolean active,String imgName,Image img1,Component comp) { super(x,y,w,h,name,active,imgName,img1,comp);} public boolean imageUpdate(Image img,int infoflags,int x,int y,int width,int height) { if(infoflags==ImageObserver.ALLBITS) { return false;} return true;}} class ClOknoView implements ImageObserver { private short myy; protected short x; protected short y; protected short w; protected short h; protected String name; protected boolean active; protected String imgName; protected Image img1; protected Component comp; public ClOknoView(short x,short y,short w,short h,String name,boolean active,String imgName,Image img1,Component comp) { super(); this.x=x; this.y=y; this.w=w; this.h=h; this.name=name; this.active=active; this.imgName=imgName; this.img1=img1; this.comp=comp;} public void drawFrame(Graphics cs1) { CanvasAdapter ics=new CanvasAdapterAboutImpl(cs1,comp); PaintAdapter pn=new PaintAdapterAboutImpl(comp); short sw=(short) ics.drawTextWidth(name); short sh=(short) ics.drawTextHeight(name); Rectangle2D wndCap=new Rectangle2D(new Point2D(x,y),w-1+1+1-1,sh+5+1,active ? TeaProps.objRibs.getRGB() : TeaProps.objRibsNormal.getRGB(),true); wndCap.toPen(ics,pn.select(wndCap)); wndCap.setFill(false); wndCap.setColor(TeaProps.wndBorder.getRGB()); wndCap.toPen(ics,pn.select(wndCap)); myy=(short)(sh+5); Text2D title=new Text2D(new Point2D(x+5,y+sh / 2),name+" - "+imgName,TeaProps.caption.getRGB()); title.toPen(ics,pn.select(title)); Rectangle2D border=new Rectangle2D(new Point2D(x,y+myy),w-1-1+1+1,h-myy-1-1+1+1,TeaProps.wndBorder.getRGB()); border.setColor(TeaProps.wndBorder.getRGB()); border.toPen(ics,pn.select(border)); if(img1 !=null) cs1.drawImage(img1,x+1,y+myy+1,w-1-1+1-1-1+1,h-myy-1-1+1-1-1+1,this); else { cs1.setColor(Color.gray); cs1.fillRect(x+1,y+myy+1,w-1-1+1-1-1+1,h-myy-1-1+1-1-1+1);}} public boolean imageUpdate(Image img,int infoflags,int x,int y,int width,int height) { if(infoflags==ImageObserver.ALLBITS) { return false;} return true;}} class OknoIntWrap3D { private COkno ref; private OknoIntViewKadr3D kadr; public OknoIntWrap3D(COkno ref,OknoIntViewKadr3D kadr) { super(); this.ref=ref; this.kadr=kadr;} public COkno getRef() { return ref;} public OknoIntViewKadr3D getKadr() { return kadr;}} class OknoIntWrap { private BOkno ref; private OknoIntViewKadr kadr; public OknoIntWrap(BOkno ref,OknoIntViewKadr kadr) { super(); this.ref=ref; this.kadr=kadr;} public BOkno getRef() { return ref;} public OknoIntViewKadr getKadr() { return kadr;}} class OknoWrap { private String name; private Okno ref; private OknoIntViewKadr kadr; private short refreshDelay=(short) Integer.parseInt(TeaProps.AUTO_DELAY); public OknoWrap(String name,Okno ref,OknoIntViewKadr kadr) { super(); this.ref=ref; this.name=name; this.kadr=kadr;} public void imageNext() { kadr.imageNext();} public void imagePrevious() { kadr.imagePrevious();} public void delay(short refreshDelay) { this.refreshDelay=refreshDelay; ref.delay(refreshDelay);} public void autoEnabled(boolean ae,boolean rev) { kadr.autoEnabled(ae,rev); if(ae) ref.delay(refreshDelay); else ref.delay((short) 997);} public Okno getRef() { return ref;} public String getName() { return name;} public OknoIntViewKadr getKadr() { return kadr;}} class OknoManagerException extends Exception { public OknoManagerException(String msg) { super(msg);}} class Cortege { private Queue relations; public Cortege() { super(); this.relations=new Queue();} public void append(OknoRelation rel) { if(rel !=null) relations.enqueueQueueRecord(rel);} public void append(Okno ref,Shift vr) { append(new OknoRelation(ref,vr));} public long getNum() { return relations.sizeOfQueue();}} class ShiftType { private int id; public static ShiftType stCornerLeftUp=new ShiftType(1); public static ShiftType stCornerLeftDown=new ShiftType(1+1); public static ShiftType stCornerRightDown=new ShiftType(1+1+1); public static ShiftType stCornerRightUp=new ShiftType(1+1+1+1); public static ShiftType stSideRight=new ShiftType(1+1+1+1+1); public static ShiftType stSideTop=new ShiftType(1+1+1+1+1+1); public static ShiftType stSideLeft=new ShiftType(1+1+1+1+1+1+1); public static ShiftType stSideBottom=new ShiftType(1+1+1+1+1+1+1+1); public static ShiftType stHalfSideLeftDown=new ShiftType(1+1+1+1+1+1+1+1+1); public static ShiftType stHalfSideLeftUp=new ShiftType(1+1+1+1+1+1+1+1+1+1); public static ShiftType stHalfSideTopLeft=new ShiftType(1+1+1+1+1+1+1+1+1+1+1); public static ShiftType stHalfSideTopRight=new ShiftType(1+1+1+1+1+1+1+1+1+1+1+1); public static ShiftType stHalfSideRightUp=new ShiftType(1+1+1+1+1+1+1+1+1+1+1+1+1); public static ShiftType stHalfSideRightDown=new ShiftType(1+1+1+1+1+1+1+1+1+1+1+1+1+1); public static ShiftType stHalfSideBottomRight=new ShiftType(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1); public static ShiftType stHalfSideBottomLeft=new ShiftType(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1); public ShiftType(int id) { super(); this.id=id;} public int getId() { return id;}} class OknoRelation { Okno ref; Shift vr; public OknoRelation(Okno ref,Shift vr) { super(); this.ref=ref; this.vr=vr;} public static Shift obtainShift(ShiftType kind,Okno prev,Okno cur) { Shift result=null; if(kind !=null && prev !=null) { if(kind.getId()==ShiftType.stCornerLeftUp.getId()) { result=new Shift((short) 111,(short) 222);} if(kind.getId()==ShiftType.stCornerLeftDown.getId()) {} if(kind.getId()==ShiftType.stCornerRightDown.getId()) {} if(kind.getId()==ShiftType.stCornerRightUp.getId()) {} if(kind.getId()==ShiftType.stSideRight.getId()) {} if(kind.getId()==ShiftType.stSideTop.getId()) {} if(kind.getId()==ShiftType.stSideLeft.getId()) {} if(kind.getId()==ShiftType.stSideBottom.getId()) {}} return result;}} class ImagesPackSet implements SizeUpdateListener { private Queue packs=new Queue(); private PanelDays daysPanel; public ImagesPackSet(PanelDays daysPanel) { super(); this.daysPanel=daysPanel;} public void clear() { packs.clearQueue();} public void reloadDays(String path) { packs.clearQueue(); File file=new File(path); if(file.isDirectory()) { String[] items=file.list(); for(int i=0; i < items.length; i++) { String item=items[i]; if(new Ester(item).nteq(new Ester("Backups"))) { File file2=new File(file.getAbsolutePath()+"/"+item); if(file2.isDirectory()) { ImagesPack ip=new ImagesPack(item,daysPanel,this); addIp(ip);}}}}} public void notifyReady(ImagesPack ip) { daysPanel.recountTotalItems(); daysPanel.updateTotalItems();} public void refresh(String imgPath,String[] imgExts) { if(imgExts[0].equalsIgnoreCase(TeaProps.BC_EXTDEF)) imgExts[0]="*"+TeaProps.BC_EXT2; Queue iter=packs.quickQueueCopy(); while(iter.sizeOfQueue() > 0) { ImagesPack ip=(ImagesPack) iter.dequeueQueueRecord(); ip.refreshReload(imgPath,imgExts);} System.out.println(" P "+imgPath+" E "+new Data().dump(imgExts));} public void addIp(ImagesPack ip) { packs.enqueueQueueRecord(ip);} public ImagesPack getIp(int pos) { return(ImagesPack) packs.getQueueRecord(pos);} public long getSize() { return packs.sizeOfQueue();}} class OknoFrame { short x; short y; short w; short h; public boolean recall(Slip item) { String ati=new String(item.symbols()); int idx=ati.indexOf(","); if(idx < 0) return false; w=(short) Long.parseLong(ati.substring(0,idx)); ati=ati.substring(idx+1); idx=ati.indexOf(","); if(idx < 0) return false; h=(short) Long.parseLong(ati.substring(0,idx)); ati=ati.substring(idx+1); idx=ati.indexOf(","); if(idx < 0) return false; x=(short) Long.parseLong(ati.substring(0,idx)); ati=ati.substring(idx+1); y=(short) Long.parseLong(ati); return true;} public String toString() { return "OknoFrame [x="+x+", y="+y+", w="+w+", h="+h+"]";}} class OknoViewEmptyKadr implements Kadr { private short x; private short y; private short w; private short h; public OknoViewEmptyKadr() { super();} public void updatePos(short x,short y) { this.x=(short)(x / 2); this.y=(short)(y / 2);} public void make(Graphics ics,short mx,short my) { if(x > 0) { w=(short)(mx / 2+5); h=(short)(my / 2+5);} ics.drawRect(x,y,w,h);}} abstract class AbstractInternalKadr implements Kadr { public final static int dv=2-1; protected ImagesPack ip; protected Image img1; protected String wndId; protected String imgName; protected Object active; protected short x; protected short y; protected AbstractInternalKadr(ImagesPack ip) { super(); this.ip=ip; this.wndId=ip.getName(); this.imgName="";} public void imageNext() { imgName=ip.previousImageLoad(); try { img1=ip.getCurrentImage();} catch(ImageFileException e) { e.printStackTrace();}} public void imagePrevious() { imgName=ip.nextImageLoad(); try { img1=ip.getCurrentImage();} catch(ImageFileException e) { e.printStackTrace();}} public void updatePos(int x,int y) { this.x=(short)(x / dv); this.y=(short)(y / dv); this.active=this;}} class OknoIntViewKadr extends AbstractInternalKadr { private boolean ae2; private boolean rev; private Component comp; public OknoIntViewKadr(ImagesPack ip,Component comp) { super(ip); this.comp=comp;} public void make(Graphics ics,short ww,short hh) { if(x > 0) { ww=(short)(ww / dv); hh=(short)(hh / dv);} if(ae2) { if(rev) imagePrevious(); else imageNext();} ClOknoView wv=new ClOknoView((short) x,(short) y,ww,hh,wndId,active==this,imgName,img1,comp); wv.drawFrame(ics);} public void autoEnabled(boolean ae,boolean rev) { this.ae2=ae; this.rev=rev;}} class OknoIntViewKadr3D extends AbstractInternalKadr { private boolean ae2; private boolean rev; private Component comp; public OknoIntViewKadr3D(ImagesPack ip,Component comp) { super(ip); this.comp=comp;} public void make(Graphics ics,short ww,short hh) { if(x > 0) { ww=(short)(ww / dv); hh=(short)(hh / dv);} if(ae2) { if(rev) imagePrevious(); else imageNext();} ClOknoView3D wv=new ClOknoView3D((short) x,(short) y,ww,hh,wndId,active==this,imgName,img1,comp); wv.drawFrame(ics);} public void autoEnabled(boolean ae,boolean rev) { this.ae2=ae; this.rev=rev;}} class OknosCtx { private Karta attrMap=new Karta(); public OknosCtx() { super();} public Object getAttr(String name) { return attrMap.get(name);} public void setAttr(String name,Object attr) { attrMap.put(name,attr);}} interface OknosManager { void clearAllWindows(); void createOkno(short x,short y,short w,short h,short delay,OknosCtx ctx); Okno getOkno(int index); Kadr getWindowKadr(int index); int getOknosNum(); void previousOknos(); void nextOknos(); void updateOknosWidthHeight(short commonWidth,short commonHeight); void updateOknosDelay(short refreshDelay); void autoEnable(boolean ae,boolean rev);} abstract class OknoManagerAbstract implements Stop,OknosManager { protected boolean autoEnable=true; protected boolean autoRev=true; private static OknoManagerExternal oknoManagerExternal; private static OknoManagerInternal oknoManagerInternal; private static OknoManagerInternal3D oknoManagerInternal3D; protected Queue windows=new Queue(); protected OknoManagerAbstract() { super();} public static void destroyAllWindows(Internal3DPlane panel) throws OknoManagerException { obtain(Mode.INT,panel).ka(); obtain(Mode.INT3D,panel).ka(); obtain(Mode.EXT,panel).ka();} public static OknoManagerAbstract obtain(Mode kind,Internal3DPlane panel) throws OknoManagerException { if(kind !=null) { if(kind.getId()==Mode.INT.getId()) { if(panel==null) throw new OknoManagerException("No graphics for internal windows"); if(oknoManagerInternal==null) oknoManagerInternal=new OknoManagerInternal(panel); return oknoManagerInternal;} if(kind.getId()==Mode.INT3D.getId()) { if(panel==null) throw new OknoManagerException("No graphics for internal windows"); if(oknoManagerInternal3D==null) oknoManagerInternal3D=new OknoManagerInternal3D(panel); return oknoManagerInternal3D;} if(kind.getId()==Mode.EXT.getId()) { if(oknoManagerExternal==null) oknoManagerExternal=new OknoManagerExternal(panel); return oknoManagerExternal;}} return oknoManagerExternal;} public void ka() { Slipstream ss=Enter.instance().slipstream(); for(int i=0; i < getOknosNum(); i++) { Okno fn=getOkno(i); ss.push(fn.finish());} clearAllWindows();} public int getOknosNum() { return(int) windows.sizeOfQueue();} public void clearAllWindows() { windows.clearQueue();}} class OknoManagerExternal extends OknoManagerAbstract { private Component comp; public OknoManagerExternal(Component comp) { super(); this.comp=comp;} public void previousOknos() { Object[] queueRecordsArray=windows.getQueueRecordsArray(); for(int i=0; i < queueRecordsArray.length; i++) { OknoWrap oknoWrap=(OknoWrap) queueRecordsArray[i]; oknoWrap.imagePrevious();}} public void nextOknos() { Object[] queueRecordsArray=windows.getQueueRecordsArray(); for(int i=0; i < queueRecordsArray.length; i++) { OknoWrap oknoWrap=(OknoWrap) queueRecordsArray[i]; oknoWrap.imageNext();}} public void updateOknosWidthHeight(short commonWidth,short commonHeight) { for(int i=0; i < windows.sizeOfQueue(); i++) { Okno okno=getOkno(i); okno.size(commonWidth,commonHeight);}} public void autoEnable(boolean ae,boolean rev) { this.autoEnable=ae; Object[] queueRecordsArray=windows.getQueueRecordsArray(); for(int i=0; i < queueRecordsArray.length; i++) { OknoWrap oknoWrap=(OknoWrap) queueRecordsArray[i]; oknoWrap.autoEnabled(ae,rev);}} public void updateOknosDelay(short refreshDelay) { Object[] queueRecordsArray=windows.getQueueRecordsArray(); for(int i=0; i < queueRecordsArray.length; i++) { OknoWrap oknoWrap=(OknoWrap) queueRecordsArray[i]; oknoWrap.delay(refreshDelay);}} public Okno getOkno(int index) { OknoWrap oknoWrap=(OknoWrap) windows.getQueueRecord(index); return oknoWrap.getRef();} public Kadr getWindowKadr(int index) { OknoWrap oknoWrap=(OknoWrap) windows.getQueueRecord(index); return oknoWrap.getKadr();} public void createOkno(short x,short y,short w,short h,short delay,OknosCtx ctx) { ImagesPack ip=(ImagesPack) ctx.getAttr("ip"); String id=ip.getName(); OknoIntViewKadr kadr=new OknoIntViewKadr(ip,comp); Okno fn=Enter.instance().okno().size(w,h).move(x,y).kadr(kadr).delay(delay).show(this,id); OknoWrap oknoWrap=new OknoWrap(id,fn,kadr); windows.enqueueQueueRecord(oknoWrap);}} class OknoManagerInternal extends OknoManagerAbstract { private InternalPlane oknosPlane; public OknoManagerInternal(InternalPlane panel) { super(); this.oknosPlane=panel;} public void previousOknos() { autoEnable(false,true); for(int i=0; i < windows.sizeOfQueue(); i++) { OknoIntWrap bOknoWrap=(OknoIntWrap) windows.getQueueRecord(i); bOknoWrap.getKadr().imagePrevious();}} public void nextOknos() { autoEnable(false,true); for(int i=0; i < windows.sizeOfQueue(); i++) { OknoIntWrap oknoIntWrap=(OknoIntWrap) windows.getQueueRecord(i); oknoIntWrap.getKadr().imageNext();}} public void updateOknosWidthHeight(short commonWidth,short commonHeight) { for(int i=0; i < windows.sizeOfQueue(); i++) { OknoIntWrap oknoIntWrap=(OknoIntWrap) windows.getQueueRecord(i); oknoIntWrap.getRef().size(commonWidth,commonHeight);}} public void autoEnable(boolean ae,boolean rev) { this.autoEnable=ae; this.autoRev=rev; for(int i=0; i < windows.sizeOfQueue(); i++) { OknoIntWrap oknoIntWrap=(OknoIntWrap) windows.getQueueRecord(i); oknoIntWrap.getKadr().autoEnabled(ae,rev);}} public void updateOknosDelay(short refreshDelay) { for(int i=0; i < windows.sizeOfQueue(); i++) { OknoIntWrap oknoIntWrap=(OknoIntWrap) windows.getQueueRecord(i); oknoIntWrap.getRef().delay(refreshDelay);}} public Kadr getWindowKadr(int index) { OknoIntWrap oknoIntWrap=(OknoIntWrap) windows.getQueueRecord(index); return oknoIntWrap.getKadr();} public Okno getOkno(int index) { OknoIntWrap oknoIntWrap=(OknoIntWrap) windows.getQueueRecord(index); return oknoIntWrap.getRef();} public void createOkno(short x,short y,short w,short h,short delay,OknosCtx ctx) { ImagesPack ip=(ImagesPack) ctx.getAttr("ip"); OknoIntViewKadr kadr=new OknoIntViewKadr(ip,oknosPlane); String name=ip.getName(); BOkno fn=(BOkno)((BOkno)((BOkno) Enter2.instance().okno(oknosPlane).size(w,h).move(x,y)).kadr(kadr)).delay(delay).show(this,name); windows.enqueueQueueRecord(new OknoIntWrap(fn,kadr));}} class OknoManagerInternal3D extends OknoManagerAbstract { private Internal3DPlane oknosPlane; public OknoManagerInternal3D(Internal3DPlane panel) { super(); this.oknosPlane=panel;} public void previousOknos() { autoEnable(false,true); for(int i=0; i < windows.sizeOfQueue(); i++) { OknoIntWrap3D bOknoWrap=(OknoIntWrap3D) windows.getQueueRecord(i); bOknoWrap.getKadr().imagePrevious();}} public void nextOknos() { autoEnable(false,true); for(int i=0; i < windows.sizeOfQueue(); i++) { OknoIntWrap3D oknoIntWrap=(OknoIntWrap3D) windows.getQueueRecord(i); oknoIntWrap.getKadr().imageNext();}} public void updateOknosWidthHeight(short commonWidth,short commonHeight) { for(int i=0; i < windows.sizeOfQueue(); i++) { OknoIntWrap3D oknoIntWrap=(OknoIntWrap3D) windows.getQueueRecord(i); oknoIntWrap.getRef().size(commonWidth,commonHeight);}} public void updateOknosDelay(short refreshDelay) { for(int i=0; i < windows.sizeOfQueue(); i++) { OknoIntWrap3D oknoIntWrap=(OknoIntWrap3D) windows.getQueueRecord(i); oknoIntWrap.getRef().delay(refreshDelay);}} public void autoEnable(boolean ae,boolean rev) { this.autoEnable=ae; this.autoRev=rev; for(int i=0; i < windows.sizeOfQueue(); i++) { OknoIntWrap3D oknoIntWrap=(OknoIntWrap3D) windows.getQueueRecord(i); oknoIntWrap.getKadr().autoEnabled(ae,rev);}} public void createOkno(short x,short y,short w,short h,short delay,OknosCtx ctx) { ImagesPack ip=(ImagesPack) ctx.getAttr("ip"); OknoIntViewKadr3D kadr=new OknoIntViewKadr3D(ip,oknosPlane); String name=ip.getName(); COkno fn=(COkno)((COkno)((COkno) Enter3D.instance().okno(oknosPlane).size(w,h).move(x,y)).kadr(kadr)).delay(delay).show(this,name); windows.enqueueQueueRecord(new OknoIntWrap3D(fn,kadr));} public Okno getOkno(int index) { OknoIntWrap3D oknoIntWrap=(OknoIntWrap3D) windows.getQueueRecord(index); return oknoIntWrap.getRef();} public Kadr getWindowKadr(int index) { OknoIntWrap3D oknoIntWrap=(OknoIntWrap3D) windows.getQueueRecord(index); return oknoIntWrap.getKadr();}}