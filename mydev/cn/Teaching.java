package mydev.cn; import java.awt.BorderLayout; import java.awt.Button; import java.awt.Checkbox; import java.awt.Choice; import java.awt.Color; import java.awt.Component; import java.awt.Dimension; import java.awt.Event; import java.awt.FlowLayout; import java.awt.Font; import java.awt.FontMetrics; import java.awt.Frame; import java.awt.Graphics; import java.awt.Image; import java.awt.Label; import java.awt.LayoutManager; import java.awt.Panel; import java.awt.Point; import java.awt.TextField; import java.awt.Toolkit; import java.awt.image.DirectColorModel; import java.awt.image.ImageObserver; import java.awt.image.MemoryImageSource; import java.io.File; import java.util.Date; import mydev.aaa.Enter; import mydev.aaa.Kadr; import mydev.aaa.Longy; import mydev.aaa.Okno; import mydev.aaa.Shift; import mydev.aaa.Shorty; import mydev.aaa.Sleeper; import mydev.aaa.Slip; import mydev.aaa.Slipstream; import mydev.aaa.Stop; import mydev.about.Canvas; import mydev.about.Paint; import mydev.about.Point2D; import mydev.about.Rectangle2D; import mydev.about.Text2D; import mydev.bbb.BOkno; import mydev.bbb.Enter2; import mydev.bbb.InternalPlane; import mydev.bbb.Location; import mydev.ccc.COkno; import mydev.ccc.Enter3D; import mydev.ccc.Internal3DPlane; import mydev.cndata.AbstractDailyObservation; import mydev.cndata.DailyObservationRepo; import mydev.im12x.ImageFile; import mydev.im12x.ImageFileException; import mydev.im12x.ImagesConture; import mydev.uix.AmountPanel; import mydev.uix.Better; import mydev.uix.CommonDataArrayPanel; import mydev.uix.ControlsPanel; import mydev.uix.External3DPanel; import mydev.uix.HeaderPathPanel; import mydev.uix.LabeledPanel; import mydev.uix.ListPanel; import mydev.uix.LoggingVkusnjashki; import mydev.uix.MultyButtonTiersBuilder; import mydev.uix.Props; import mydev.uix.ReverseRotateAutoPanel; import mydev.uix.SizePanel; import mydev.uix.Timer; import mydev.uix.ToogleMultyButton; import mydev.uix.WidthHeight; import mydev.vutils.Data; import mydev.vutils.Ester; import mydev.vutils.Files; import mydev.vutils.Filter; import mydev.vutils.Join; import mydev.vutils.Karta; import mydev.vutils.Metr; import mydev.vutils.Queue; import mydev.vutils.SharedGreatesArray; import mydev.vutils.Spiska; public class Teaching extends Frame implements Runnable,Stop,Kadr { static boolean startEmbededPictures=true; PanelClPath pathPanel; CenterPunk centerPunk; PanelDays daysPanel; private Longy lg; private Shorty rt; private ImagesPackSet ipSet; public Teaching() { super(); setLayout(new BorderLayout()); setBackground(Color.darkGray); this.pathPanel=new PanelClPath(); add("North",pathPanel.getWrapPanel()); add("West",daysPanel=new PanelDays()); this.ipSet=new ImagesPackSet(daysPanel); add("Center",centerPunk=new CenterPunk()); this.rt=Enter.instance().shorty(); this.lg=Enter.instance().longy();} public static void main(String[] args) throws OknoManagerException { Teaching main=new Teaching(); main.setTitle("Leaves Days Professional"); main.show(); main.start(); main.pack(); main.reMoveRnd(); main.resize(1024,768); Sleeper sleeper=new Sleeper(); while(Better.working) { main.refreshUpdatable(); sleeper.sleep(Timer.DEF_REF_TIME);} main.ka(); main.hide(); main.dispose(); System.exit(1-1);} private void start() { centerPunk.fieldCv.enableMode3D(!centerPunk.fieldCv.isMode3D()); processReloadImages(); pathPanel.extPathEnable(false==pathPanel.getEmbeded());} protected void reMoveRnd() { Location ol=Enter2.instance().location(); Point p=ol.getRandomExternalPos((short) 1024,(short) 768); move(p.x,p.y);} private void refreshUpdatable() { centerPunk.refreshUpdatable(); pathPanel.refreshUpdatable();} public boolean handleEvent(Event et) { if(et.id==Event.WINDOW_DESTROY) { OknoManagerAbstract.destroyAllWindows(); new Better().exitApplicationLoop();} Object tg=et.target; if(tg==centerPunk.getSettingPanel().getAutoPanel().getBtNext() && et.id==Event.ACTION_EVENT) itemNext(); if(tg==centerPunk.getSettingPanel().getAutoPanel().getBtPrev() && et.id==Event.ACTION_EVENT) itemPrevious(); if(tg==centerPunk.getSettingPanel().getAutoPanel().getBtAuto() && et.id==Event.ACTION_EVENT) auto(); if(tg==centerPunk.getSettingPanel().getAutoPanel().getChAuto() && et.id==Event.ACTION_EVENT) auto(); if(tg==centerPunk.getSettingPanel().getAutoPanel().getChRev() && et.id==Event.ACTION_EVENT) autoRev(); if(tg==centerPunk.getSettingPanel().getBtDef() && et.id==Event.ACTION_EVENT) { centerPunk.getSettingPanel().getWhPanel().whReset(); reset();} if(tg==centerPunk.getSettingPanel().getBtRepo() && et.id==Event.ACTION_EVENT) repositionWindows(); if(et.id==Event.ACTION_EVENT && tg==pathPanel.getChExt()) processFormatSelection(); if(et.key==Event.F1 && et.id==Event.KEY_ACTION) repositionWindows(); if(et.key==Event.F2 && et.id==Event.KEY_ACTION) auto(); if(tg !=null && tg.equals(centerPunk.getSettingPanel().getTfWidth()) && et.id==Event.LOST_FOCUS) widthChange(centerPunk.getSettingPanel()); if(tg !=null && tg.equals(centerPunk.getSettingPanel().getTfHeight()) && et.id==Event.LOST_FOCUS) heightChange(centerPunk.getSettingPanel()); if(tg !=null && tg.equals(centerPunk.getSettingPanel().getAutoPanel().getTfAuto()) && et.id==Event.LOST_FOCUS) autoReplace(); if(et.id==Event.ACTION_EVENT && et.target==daysPanel.getCbD3()) withD3(daysPanel.getD3()); if(tg !=null && tg.equals(daysPanel.getExt3dPanel().getCbExt()) && et.id==Event.ACTION_EVENT) reload(); if(tg==pathPanel.getBtReload() && et.id==Event.ACTION_EVENT) processReloadImages(); if(tg==pathPanel.getCbEmbeded() && et.id==Event.ACTION_EVENT) processEmbeded(); if(et.id==Event.LIST_SELECT && et.target==daysPanel.getLsItems()) leftSelected(); return super.handleEvent(et);} public void make(Graphics cs1,short mx,short my) {} public void run() {} private void leftSelected() { daysPanel.leftSelected();} private void processFormatSelection() { try { startOuter();} catch(OknoManagerException e) { e.printStackTrace();}} private void heightChange(PanelSettings settingPanel) { commonWidthHeightChanges(); boolean ae=settingPanel.getAutoPanel().isAutoEnable(); settingPanel.getAutoPanel().setAutoEnable(false); auto(); if(!ae) { auto(); itemNext();}} private void widthChange(PanelSettings settingPanel) { commonWidthHeightChanges(); boolean ae=settingPanel.getAutoPanel().isAutoEnable(); settingPanel.getAutoPanel().setAutoEnable(false); auto(); if(!ae) { auto(); itemNext();}} private void itemPrevious() { if(centerPunk.getSettingPanel().getAutoPanel().isAutoEnable()) auto(); OknoManagerAbstract.previousAllWindows();} private void itemNext() { if(centerPunk.getSettingPanel().getAutoPanel().isAutoEnable()) auto(); OknoManagerAbstract.nextAllWindows();} private void commonWidthHeightChanges() { PanelSettings settingPanel=centerPunk.getSettingPanel(); short commonWidth=(short) Integer.parseInt(settingPanel.getWidthTxt()); short commonHeight=(short) Integer.parseInt(settingPanel.getHeightTxt()); OknoManagerAbstract.updateCommonWidthHeightAllWindows(commonWidth,commonHeight); reload();} private void repositionWindows() { try { reposition(daysPanel.getExt3dPanel().getExternal()); reload();} catch(OknoManagerException e) { e.printStackTrace();}} private void reposition(boolean ext) throws OknoManagerException { if(ext) repositionExternal(); else repositionInternal();} private void repositionInternal() throws OknoManagerException { Location ol=Enter2.instance().location(); PanelSettings settingPanel=centerPunk.getSettingPanel(); short w=TeaProps.getCommonWidth(settingPanel); short h=TeaProps.getCommonHeight(settingPanel); OknoManagerAbstract oknoManager=OknoManagerAbstract.obtain(KinDi3.INT,centerPunk.getFieldCv()); int num=oknoManager.getWindowsNum(); for(int i=0; i < num; i++) { Point p=ol.getRandomInternalPos(w,h); oknoManager.getWindow(i).move((short) p.x,(short) p.y);}} private void repositionExternal() throws OknoManagerException { Location ol=Enter2.instance().location(); PanelSettings settingPanel=centerPunk.getSettingPanel(); short w=TeaProps.getCommonWidth(settingPanel); short h=TeaProps.getCommonHeight(settingPanel); OknoManagerAbstract oknoManager=OknoManagerAbstract.obtain(KinDi3.EXT,null); int num=oknoManager.getWindowsNum(); for(int i=0; i < num; i++) { Point p=ol.getRandomExternalPos(w,h); oknoManager.getWindow(i).move((short) p.x,(short) p.y);}} private void autoReplace() { short autoDelay=(short) centerPunk.getSettingPanel().getAutoPanel().getAutoDelay(); OknoManagerAbstract.updateDelayAllWindows(autoDelay);} private void reset() { System.out.println(" reset settings "); PanelSettings settingPanel=centerPunk.getSettingPanel(); pathPanel.chooseExt(0+1+1-1); settingPanel.setWidth(""+WidthHeight.microWidth); settingPanel.setHeight(""+WidthHeight.microHeight); settingPanel.setAutoText(TeaProps.AUTO_DELAY); ipSet.refresh(pathPanel.getPath(),pathPanel.getExtsSelected()); commonWidthHeightChanges(); autoReplace(); settingPanel.getAutoPanel().setAutoEnable(false); auto();} private void reload() { try { extInternal(daysPanel.getExt3dPanel().getExternal(),daysPanel.getExt3dPanel().get3d());} catch(OknoManagerException e) { e.printStackTrace();} centerPunk.getSettingPanel().getAutoPanel().setAutoEnable(false); auto();} private void autoRev() { PanelSettings settingPanel=centerPunk.getSettingPanel(); ReverseRotateAutoPanel autoPanel=settingPanel.getAutoPanel(); OknoManagerAbstract.auto(autoPanel.isAutoEnable(),autoPanel.isReverse());} private void auto() { ReverseRotateAutoPanel autoPanel=centerPunk.getSettingPanel().getAutoPanel(); System.out.println(" start "+autoPanel.isAutoEnable()); autoPanel.setAutoEnable(autoPanel.isAutoEnable()==false); OknoManagerAbstract.auto(autoPanel.isAutoEnable(),autoPanel.isReverse());} private void extInternal(boolean ext,boolean d3) throws OknoManagerException { hideAllWindows(); if(ext) reloadExternal(); else reloadInternal(d3);} private void withD3(boolean d3) { System.out.println("reload-3D "+d3); centerPunk.getFieldCv().enableMode3D(d3); centerPunk.getFieldCv().markRepaint(); refreshUpdatable();} private void hideAllWindows() { ka();} public void ka() { OknoManagerAbstract.destroyAllWindows();} private void reloadInternal(boolean d3) throws OknoManagerException { Location ol=Enter2.instance().location(); hideAllWindows(); PanelSettings settingPanel=centerPunk.getSettingPanel(); short w=TeaProps.getCommonWidth(settingPanel); short h=TeaProps.getCommonHeight(settingPanel); int delay=settingPanel.getAutoPanel().getAutoDelay(); for(int i=0; i < ipSet.getSize(); i++) { ImagesPack ip=ipSet.getIp(i); Point p=ol.getRandomInternalPos(w,h); OknosCtx ctx=new OknosCtx(); ctx.setAttr("ip",ip); OknoManagerAbstract.obtain(d3 ? KinDi3.INT3D : KinDi3.INT,centerPunk.getFieldCv()).createWindow((short) p.x,(short) p.y,w,h,(short) delay,ctx);} centerPunk.getFieldCv().setRedraw(true,centerPunk.getFieldCv().isMode3D());} private void reloadExternal() throws OknoManagerException { Location ol=Enter2.instance().location(); centerPunk.getFieldCv().setRedraw(false,false); hideAllWindows(); centerPunk.getFieldCv().markRepaint(); short w=TeaProps.getCommonWidth(centerPunk.getSettingPanel()); short h=TeaProps.getCommonHeight(centerPunk.getSettingPanel()); int delay=centerPunk.getSettingPanel().getAutoPanel().getAutoDelay(); for(int i=0; i < ipSet.getSize(); i++) { ImagesPack ip=ipSet.getIp(i); Point p=ol.getRandomExternalPos(w,h); OknosCtx ctx=new OknosCtx(); ctx.setAttr("ip",ip); OknoManagerAbstract.obtain(KinDi3.EXT,null).createWindow((short) p.x,(short) p.y,w,h,(short) delay,ctx);}} private void processEmbeded() { pathPanel.extPathEnable(false==pathPanel.getEmbeded()); processReloadImages();} private void processReloadImages() { try { boolean embededPictures=pathPanel.getEmbeded(); if(embededPictures) startEmbeded(); else startOuter();} catch(OknoManagerException e) { e.printStackTrace();}} public void startEmbeded() throws OknoManagerException { ipSet.clear(); daysPanel.clearDays(); int size1=(int) DailyObservationRepo.instance().getDailyNum(); for(int i=0; i < size1; i++) { AbstractDailyObservation dayView=DailyObservationRepo.instance().getDaily(i); ImagesPack ip=new ImagesPack(i,dayView,this,ipSet); ipSet.addIp(ip);} for(int i=0; i < ipSet.getSize(); i++) daysPanel.addLeavesDay(ipSet.getIp(i)); if(daysPanel.hasDays()) daysPanel.selectNoDay(); reload();} public void startOuter() throws OknoManagerException { String path=pathPanel.getPath(); ipSet.reloadDays(path); daysPanel.clearDays(); for(int i=0; i < ipSet.getSize(); i++) daysPanel.addLeavesDay(ipSet.getIp(i)); if(daysPanel.hasDays()) daysPanel.selectNoDay(); reload(); PanelSettings settingPanel=centerPunk.getSettingPanel(); ReverseRotateAutoPanel autoPanel=settingPanel.getAutoPanel(); OknoManagerAbstract.auto(autoPanel.isAutoEnable(),autoPanel.isReverse()); ipSet.refresh(pathPanel.getPath(),pathPanel.getExtsSelected());}} class PanelClPath extends HeaderPathPanel { final static String NAME_RELOAD="Reload"; final static String NAME_EMBEDED="Embeded"; final static String NAME_DAYSPATH="Pictures Path:"; final static String CH_EXT="chExt"; final static String BT_RELOAD="btReload"; final static String CB_EMBEDED="cbEmbeded"; public PanelClPath() { super("Leaves Days Professional",false,false,false,LabeledPanel.DEF_MIN_SIZE,TeaProps.northBgColor,TeaProps.northBorderColor,TeaProps.northTextColor);} public void extPathEnable(boolean enable) { enableExtension(enable); getTfPath().enable(enable);} protected ToogleMultyButton obtainMultyButton() { return null;} protected Label obtainLbPath() { return new Label(NAME_DAYSPATH);} protected TextField obtainTfPath() { TextField tfPath=new TextField("",50+30+20+30+20-55-15-30-20+10+10); tfPath.setText("C:\\Users\\fantom\\Desktop\\Leaves Days"); return tfPath;} protected void buildPanel() { buildPath(); Choice chExt=new Choice(); chExt.addItem(TeaProps.BC_EXTDEF); chExt.addItem("*"+TeaProps.BC_EXT1); chExt.addItem("*"+TeaProps.BC_EXT2); chExt.addItem("*"+TeaProps.BC_EXT3); chExt.addItem("*"+TeaProps.BC_EXT4); chExt.addItem("*"+TeaProps.BC_EXT5); chExt.select(0+1+1-1+1-1); append(CH_EXT,chExt); Button btReload=new Button(NAME_RELOAD); append(BT_RELOAD,btReload); Checkbox cbEmbeded=new Checkbox(NAME_EMBEDED); cbEmbeded.setState(Teaching.startEmbededPictures); append(CB_EMBEDED,cbEmbeded);} public Choice getChExt() { return(Choice) getCtrl(CH_EXT);} public void chooseExt(int pos) {((Choice) getCtrl(CH_EXT)).select(pos);} public String getExtSelected() { return((Choice) getCtrl(CH_EXT)).getSelectedItem();} public String[] getExtsSelected() { String[] result=new String[1]; result[1-1]=getExtSelected(); return result;} public Checkbox getCbEmbeded() { return(Checkbox) getCtrl(CB_EMBEDED);} public boolean getEmbeded() { return getCbEmbeded().getState();} public void enableEmbeded(boolean enable) {((Checkbox) getCtrl(CB_EMBEDED)).enable(enable);} public void enableExtension(boolean enable) {((Choice) getCtrl(CH_EXT)).enable(enable);} public Color getPanelBgColor() { return TeaProps.bgTopColor;} public Button getBtReload() { return(Button) getCtrl(BT_RELOAD);}} class StatCnPanel extends AmountPanel { public StatCnPanel() { super("","Days");} public Color getPanelBgColor() { return Props.bgAmountPanelColor;} protected int getPosWidth() { return super.getPosWidth()-1-1;} protected int getAmountWidth() { return super.getAmountWidth()-1-1;}} class PanelDays extends CommonDataArrayPanel { ListPanel listPanel; DaySelectSizePanel sizePanel; SizeCtrlsPanel ctrlsSizePanel; private Queue leftItemsQueue; private Metr totalCount=new Metr(); private Metr totalSize=new Metr(); public PanelDays() { super(); this.leftItemsQueue=new Queue();} public boolean getD3() { boolean result=getCbD3().getState(); return result;} public Checkbox getCbD3() { Checkbox chD3=ctrlsSizePanel.getCtrlsPanel().getExt3dPanel().getChD3(); return chD3;} public void leftSelected() { int idxSel=getSelectedIdx(); setPosition(""+(idxSel+1)); ctrlsSizePanel.getCtrlsPanel().enableStops(true); ImagesPack curIp=(ImagesPack) leftItemsQueue.getQueueRecord(idxSel); setItemSize(""+new Metr(curIp.getIpSize()).repr(',')); setItems(""+new Metr(curIp.getIpAmount()).repr(','));} public void recountTotalItems() { totalSize=new Metr(); totalCount=new Metr(); Object[] queueRecordsArray=leftItemsQueue.getQueueRecordsArray(); for(int i=0; i < queueRecordsArray.length; i++) { ImagesPack curIp=(ImagesPack) queueRecordsArray[i]; totalSize.inc(curIp.getIpSize()); totalCount.inc(curIp.getIpAmount());}} public void updateTotalItems() { setTotalItems(""+totalCount.repr(' ')); setSize(""+totalSize.repr(','));} public External3DPanel getExt3dPanel() { return ctrlsSizePanel.getCtrlsPanel().getExt3dPanel();} public void clearDays() { listPanel.clearItems(); leftItemsQueue.clearQueue(); listPanel.selectNothing(); displayAmount(0); selectItem(0); setItemSize(""); setItems(""); setTotalItems(""); setSize(""); totalCount=new Metr(0); totalSize=new Metr(0);} public void selectNoDay() { listPanel.selectNothing();} public void setItems(String txt) { ctrlsSizePanel.getSelDayAmountPanel().getTfItemSize().setText(txt);} public void setTotalItems(String txt) { ctrlsSizePanel.getSelDayAmountPanel().getTfTotalSize().setText(txt);} public boolean hasDays() { return !leftItemsQueue.isEmptyQueue();} public void addLeavesDay(ImagesPack imagesPack) { addItem(imagesPack.getName()); leftItemsQueue.enqueueQueueRecord(imagesPack);} public void addItem(String item) { listPanel.addItem(item); displayAmount(leftItemsQueue.sizeOfQueue());} void displayAmount(long sizeOfQueue) { Ester repr=new Metr(sizeOfQueue).repr(' '); setAmount(new Ester("0").eq(repr) ? "" : repr.toString());} protected Panel obtainControlsPanel() { this.ctrlsSizePanel=new SizeCtrlsPanel(); return ctrlsSizePanel;} protected ListPanel obtainListPanel() { this.listPanel=new ListPanel(new StatCnPanel()); return listPanel;} protected SizePanel obtainSizePanel() { this.sizePanel=new DaySelectSizePanel(); return sizePanel;} public Color getPanelBgColor() { return Props.bgSideColor;} protected Color getWrapPanelColor() { return Props.bgStatPanelColor;}} class CenterPunk extends Panel { FieldCv fieldCv; PanelSettings settingPanel; public CenterPunk() { super(); setLayout(new BorderLayout()); settingPanel=new PanelSettings(); add("Center",fieldCv=new FieldCv(settingPanel)); add("South",settingPanel);} public FieldCv getFieldCv() { return fieldCv;} public void refreshUpdatable() { if(fieldCv.checkRepaint()) fieldCv.performRepaint();} public PanelSettings getSettingPanel() { return settingPanel;}} class FieldCv extends Internal3DPlane { PanelSettings settingPanel; private Date dLast; private boolean internalWindows; private boolean internal3D; private boolean loaded=false; public FieldCv(PanelSettings settingPanel) { super(Color.darkGray,Color.green); enableMode3D(false); this.settingPanel=settingPanel; dLast=new Date();} public void setRedraw(boolean internalWindows,boolean internal3D) { this.internalWindows=internalWindows; this.internal3D=internal3D;} public void refresh() { if(1+1 < 1) { Date dCur=new Date(); if(dCur.getTime()-dLast.getTime() > 997) { invalidate(); repaint();}} else { invalidate(); repaint();}} public void paint(Graphics cs1) { super.paint(cs1); if(!internal3D) drawSampleContent(cs1); try { if(internalWindows) drawInternalWindows(this); else if(internal3D) drawInternalWindows(this); else drawExternalWindows(cs1);} catch(OknoManagerException e) { e.printStackTrace();} dLast=new Date();} private void drawExternalWindows(Graphics cs1) throws OknoManagerException { OknoManagerExternal ome=(OknoManagerExternal) OknoManagerAbstract.obtain(KinDi3.EXT,null); Shorty or=Enter.instance().shorty(); OknoFrame frame=new OknoFrame(); OknoViewEmptyKadr kadr=new OknoViewEmptyKadr(); short maxWidth=10; short maxHeight=10; for(int i=0; i < ome.getWindowsNum(); i++) { Okno okno=ome.getWindow(i); frame.recall(okno.memo()); if(maxWidth < frame.w) maxWidth=frame.w; if(maxHeight < frame.h) maxHeight=frame.h; kadr.updatePos(frame.x,frame.y); kadr.make(cs1,frame.w,frame.h);} if(!loaded && new Ester(settingPanel.getWidthTxt()).nteq(new Ester(""+maxWidth))) { loaded=true; settingPanel.setWidth(""+maxWidth); settingPanel.setHeight(""+maxHeight);} else if(!loaded && new Ester(settingPanel.getHeightTxt()).nteq(new Ester(""+maxHeight))) { loaded=true; settingPanel.setWidth(""+maxWidth); settingPanel.setHeight(""+maxHeight);}} private void drawInternalWindows(InternalPlane panel) throws OknoManagerException { OknoManagerInternal omi=(OknoManagerInternal) OknoManagerAbstract.obtain(KinDi3.INT,panel); Shorty or=Enter.instance().shorty(); OknoFrame frame=new OknoFrame(); short maxWidth=10; short maxHeight=10; for(int i=0; i < omi.getWindowsNum(); i++) { BOkno okno=(BOkno) omi.getWindow(i); OknoIntViewKadr kadr=(OknoIntViewKadr) omi.getWindowKadr(i); frame.recall(okno.memo()); if(maxWidth < frame.w) maxWidth=frame.w; if(maxHeight < frame.h) maxHeight=frame.h; kadr.updatePos(frame.x,frame.y); Graphics cs1=panel.getDrawGraphics(); kadr.make(cs1,or.rev(frame.w,0),or.rev(frame.h,0));} if(!loaded && new Ester(settingPanel.getWidthTxt()).nteq(new Ester(""+maxWidth))) { loaded=true; settingPanel.setWidth(""+maxWidth); settingPanel.setHeight(""+maxHeight);} else if(!loaded && new Ester(settingPanel.getHeightTxt()).nteq(new Ester(""+maxHeight))) { loaded=true; settingPanel.setWidth(""+maxWidth); settingPanel.setHeight(""+maxHeight);}} private void drawSampleContent(Graphics ics) { Dimension d1=size(); ics.drawLine(0,0,d1.width-1,d1.height-1); ics.drawLine(d1.width-1,0,0,d1.height-1); Date d2=new Date(); ics.setColor(Color.black); ics.drawString(""+d2.getTime() % 123456,250,250);}} class PanelSettings extends ControlsPanel { final static String BT_DEF="btDef"; final static String BT_REPO="btRepo"; final static String AUTO_PANEL="autoPanel"; final static String WH_WIDTH_HEIGHT="whWidthHeight"; public PanelSettings() { super(); enableCtrls(true);} public void setAutoText(String autoDelay) {((ReverseRotateAutoPanel) getCtrl(AUTO_PANEL)).getTfAuto().setText(autoDelay);} public Button getBtDef() { return(Button) getCtrl(BT_DEF);} public Button getBtRepo() { return(Button) getCtrl(BT_REPO);} public void setHeight(String height) {((WidthHeight) getCtrl(WH_WIDTH_HEIGHT)).setHeightTxt(height);} public void setWidth(String width) {((WidthHeight) getCtrl(WH_WIDTH_HEIGHT)).setWidthTxt(width);} public TextField getTfHeight() { return((WidthHeight) getCtrl(WH_WIDTH_HEIGHT)).getTfHeight();} public TextField getTfWidth() { return((WidthHeight) getCtrl(WH_WIDTH_HEIGHT)).getTfWidth();} public WidthHeight getWhPanel() { return(WidthHeight) getCtrl(WH_WIDTH_HEIGHT);} public String getWidthTxt() { return((WidthHeight) getCtrl(WH_WIDTH_HEIGHT)).getWidthTxt();} public String getHeightTxt() { return((WidthHeight) getCtrl(WH_WIDTH_HEIGHT)).getHeightTxt();} public ReverseRotateAutoPanel getAutoPanel() { return(ReverseRotateAutoPanel) getCtrl(AUTO_PANEL);} protected void buildPanel() { append(WH_WIDTH_HEIGHT,WidthHeight.createPanel(WidthHeight.microWidth,WidthHeight.microHeight)); append(AUTO_PANEL,ReverseRotateAutoPanel.createPanel(TeaProps.AUTO_DELAY,true)); append(BT_DEF,new Button("Default")); append(BT_REPO,new Button("Reposition"));} public void enableCtrls(boolean enable) {((WidthHeight) getCtrl(WH_WIDTH_HEIGHT)).enableCtrls(enable);((ReverseRotateAutoPanel) getCtrl(AUTO_PANEL)).enableCtrls(enable);((Button) getCtrl(BT_DEF)).enable(enable);((Button) getCtrl(BT_REPO)).enable(enable);} public Color getPanelBgColor() { return TeaProps.bgDownColor;} public LayoutManager getPanelLayout() { return new FlowLayout(FlowLayout.CENTER);}} class DaySelectSizePanel extends SizePanel { final static String EXT_LABEL="byte(s)"; public DaySelectSizePanel() { super("",true);} public Color getPanelBgColor() { return Props.bgSizePanelColor;} protected int getItemSizeWidth() { return 5+5;} protected int getSizeWidth() { return 25-1-2-5-5;}} class DaySelectAmountPanel extends SizePanel { final static String EXT_LABEL="shtukens"; public DaySelectAmountPanel() { super("",true);} protected int getItemSizeWidth() { return 5+5-1-1;} protected int getTotalSizeWidth() { return 5+5-1-1;} public Color getPanelBgColor() { return Props.bgAmountPanelColor;}} class SizeCtrlsPanel extends Panel { DaySelectAmountPanel selDayAmountPanel; DaysExt3DCtrlsPanel ctrlsPanel; public SizeCtrlsPanel() { super(); setLayout(new BorderLayout()); setBackground(Props.bgCtrlPanelColor); add("Center",selDayAmountPanel=new DaySelectAmountPanel()); add("South",ctrlsPanel=new DaysExt3DCtrlsPanel());} public DaySelectAmountPanel getSelDayAmountPanel() { return selDayAmountPanel;} public DaySelectAmountPanel getExtItemsPanel() { return selDayAmountPanel;} public DaysExt3DCtrlsPanel getCtrlsPanel() { return ctrlsPanel;}} class DaysExt3DCtrlsPanel extends Panel { final static String NAME_START="Start"; final static String NAME_STOP="Stop"; final static String NAME_ALL_START="All Start"; final static String NAME_ALL_STOP="All Stop"; External3DPanel ext3dPanel; Button btStart; Button btStop; Button btStartAll; Button btStopAll; public DaysExt3DCtrlsPanel() { super(); MultyButtonTiersBuilder.create().appendPanel(ext3dPanel=new External3DPanel(true,true)).appendElement(btStart=new Button(NAME_START)).appendElement(btStop=new Button(NAME_STOP)).appendElement(btStartAll=new Button(NAME_ALL_START)).appendElement(btStopAll=new Button(NAME_ALL_STOP)).build(this); enableBtStart(false); enableBtStop(false);} public External3DPanel getExt3dPanel() { return ext3dPanel;} public Button getBtStopAll() { return btStopAll;} public void enableStops(boolean enable) { enableBtStart(enable); enableBtStop(enable);} public void enableBtStart(boolean enable) { btStart.enable(enable);} public void enableBtStop(boolean enable) { btStop.enable(enable);} public Button getBtStart() { return btStart;} public Button getBtStop() { return btStop;} public Button getBtStartAll() { return btStartAll;}} class LoggingTeaVkusnjashkiStub implements LoggingVkusnjashki { private boolean doLogs; public LoggingTeaVkusnjashkiStub() { super();} public LoggingTeaVkusnjashkiStub(boolean doLogs) { super(); this.doLogs=doLogs;} public void addLog(String item) { if(doLogs) System.out.println(item);} public void addLogComplete(String item) { if(doLogs) System.out.println("Complete "+item);} public LoggingVkusnjashki getLogging() { return this;} public void addLog2(String item) { if(doLogs) System.out.println(item);}} interface SizeUpdateListener { void notifyReady(ImagesPack ip);} class ImagesPack implements Runnable,ImagesConture { private String name; private AbstractDailyObservation dayView; private Component comp; private int curIdx; private Spiska allViews; private Spiska allFiles; private String pathToImages; private String[] imagesExts; private Image photo; private LoggingVkusnjashki logPanel; private SharedGreatesArray colorSwap; private int amount; private long size; private SizeUpdateListener listener; protected ImagesPack(String name,Component comp,SizeUpdateListener updateListener) { super(); this.name=name; this.comp=comp; this.curIdx=-1; this.logPanel=new LoggingTeaVkusnjashkiStub(); this.colorSwap=SharedGreatesArray.create(ImageFile.BUF_LIM); initExts(); this.allViews=new Spiska(); this.allFiles=new Spiska(); this.listener=updateListener;} private void initExts() { imagesExts=new String[1]; imagesExts[1-1]="*.jpg";} protected ImagesPack(int idx,AbstractDailyObservation dayView,Component comp,SizeUpdateListener updateListener) { super(); this.name="DailyObservation"+idx; this.dayView=dayView; this.comp=comp; this.curIdx=-1; this.logPanel=new LoggingTeaVkusnjashkiStub(); this.colorSwap=SharedGreatesArray.create(ImageFile.BUF_LIM); this.allViews=new Spiska(); this.allFiles=new Spiska(); this.amount=(int) dayView.getPicturesNum(); this.listener=updateListener; if(listener !=null) listener.notifyReady(this);} public String nextImageLoad() { if(dayView !=null) { curIdx-=1; if(curIdx < 0) curIdx=(int)(dayView.getPicturesNum()-1); return name;} if(allViews.size() < 1) return ""; curIdx-=1; if(curIdx < 0) curIdx=(int)(allViews.size()-1); return(String) allFiles.at(curIdx);} public String previousImageLoad() { if(dayView !=null) { curIdx+=1; if(curIdx > dayView.getPicturesNum()-1) curIdx=0; return name;} if(allViews.size() < 1) return ""; curIdx+=1; if(curIdx > allViews.size()-1) curIdx=0; return(String) allFiles.at(curIdx);} public String getCurrentName() { return(String) allFiles.at(curIdx);} public String getCurrentPath() { return(String) allViews.at(curIdx);} public Image getCurrentImage() throws ImageFileException { if(dayView !=null && curIdx >-1) return loadEmbededImage(curIdx,comp); String curPath=getCurrentPath(); if(isOriginalFormat(curPath)) return loadOriginalFormatImage(curPath,comp); if(isBackupFormat(curPath)) return loadBackupFormatImage(curPath,comp); return null;} public boolean isOriginalFormat(String picturePath) { if(picturePath !=null) if(picturePath.endsWith(".jpg") || picturePath.endsWith(".png") || picturePath.endsWith(".gif")) return true; return false;} public boolean isBackupFormat(String picturePath) { if(picturePath !=null) if(picturePath.endsWith(".im1") || picturePath.endsWith(".im2")) return true; return false;} public Image loadEmbededImage(int idx,Component comp) { Image image=dayView.getImage(idx,comp); return image;} public Image loadOriginalFormatImage(String picturePath,Component comp) { return Toolkit.getDefaultToolkit().getImage(picturePath);} public Image loadBackupFormatImage(String picturePath,Component comp) { ImageFile file=null; try { file=ImageFile.loadImage(picturePath,logPanel,colorSwap);} catch(ImageFileException e) { e.printStackTrace();} if(file !=null) { int bits=32; int redMask=16711680; int greenMask=65280; int blueMask=255; DirectColorModel cm=new DirectColorModel(bits,redMask,greenMask,blueMask); int width=file.getWidth(); int height=file.getHeight(); int[] pix=file.getData(); photo=comp.createImage(new MemoryImageSource(width,height,cm,pix,0,width));} return photo;} public String getName() { return name;} public void refreshReload(String path,String[] exts) { this.pathToImages=path; this.imagesExts=exts; new Thread(this).start();} public void run() { refreshProc(pathToImages);} protected void refreshProc(String path) { allViews=new Spiska(); allFiles=new Spiska(); amount=0; size=0; String curPath=path+File.separator+name; Ester[] fullTree=new Files().tree(new Ester(curPath)); Ester[] items=null; Ester[] itemsNew=null; for(int i=0; i < imagesExts.length; i++) { String curExt=imagesExts[i]; int iExt=curExt.lastIndexOf('*'); if(iExt >-1) curExt=curExt.substring(iExt+1); if(items==null) items=new Filter().endsWithIncensitive(fullTree,new Ester(curExt)); else { itemsNew=new Filter().endsWithIncensitive(fullTree,new Ester(curExt)); items=new Join().join(items,itemsNew);}} for(int i=0; i < items.length; i++) { allViews.append(items[i].toString()); File file=new File(items[i].toString()); allFiles.append(file.getName()); amount++; size+=file.length();} if(listener !=null) listener.notifyReady(this);} public int getIpAmount() { return amount;} public long getIpSize() { return size;}} class TeaProps extends Props { public static final String AUTO_DELAY=""+ReverseRotateAutoPanel.AUTO_DELAY; public static final Color wndBorder=Color.blue; public static final Color caption=Color.black; public static final Color objRibsNormal=Color.lightGray; final static String BC_EXTDEF="Default"; final static String BC_EXT1=".im1"; final static String BC_EXT2=".im2"; final static String BC_EXT3=".jpg"; final static String BC_EXT4=".png"; final static String BC_EXT5=".gif"; public static short getCommonHeight(PanelSettings ps) { return(short) Integer.parseInt(ps.getHeightTxt());} public static short getCommonWidth(PanelSettings ps) { return(short) Integer.parseInt(ps.getWidthTxt());}} class ClOknoView3D implements ImageObserver { protected short myy; protected short x; protected short y; protected short w; protected short h; protected String name; protected boolean active; protected String imgName; protected Image img1; public ClOknoView3D(short x,short y,short w,short h,String name,boolean active,String imgName,Image img1) { super(); this.x=x; this.y=y; this.w=w; this.h=h; this.name=name; this.active=active; this.imgName=imgName; this.img1=img1;} public void drawFrame(Graphics cs1) { short fs=(short)(12-1-1-1-1+1+1); cs1.setFont(new Font("SansSerif",Font.BOLD,fs)); FontMetrics fm=cs1.getFontMetrics(); short sw=(short) fm.stringWidth(name); short sh=(short) fm.getHeight(); short delta=(short)((sh-fs) / 2); cs1.setColor(active ? TeaProps.objRibs : TeaProps.objRibsNormal); cs1.fillRect(x,y,w-1,sh+5); cs1.setColor(TeaProps.wndBorder); cs1.drawRect(x,y,w-1,sh+5); myy=(short)(sh+5); cs1.setColor(TeaProps.caption); cs1.drawString(name+" - "+imgName,x+5,y+sh); cs1.setColor(TeaProps.wndBorder); cs1.drawRect(x,y+myy,w-1-1+1,h-myy-1-1+1); if(img1 !=null) cs1.drawImage(img1,x+1,y+myy+1,w-1-1+1-1,h-myy-1-1+1-1,this); else { cs1.setColor(Color.gray); cs1.fillRect(x+1,y+myy+1,w-1-1+1-1,h-myy-1-1+1-1);}} public boolean imageUpdate(Image img,int infoflags,int x,int y,int width,int height) { if(infoflags==ImageObserver.ALLBITS) { return false;} return true;}} class ClOknoView implements ImageObserver { private short myy; protected short x; protected short y; protected short w; protected short h; protected String name; protected boolean active; protected String imgName; protected Image img1; public ClOknoView(short x,short y,short w,short h,String name,boolean active,String imgName,Image img1) { super(); this.x=x; this.y=y; this.w=w; this.h=h; this.name=name; this.active=active; this.imgName=imgName; this.img1=img1;} public void drawFrame(Graphics cs1) { Canvas ics=new Canvas(cs1); Paint pn=new Paint(); short fs=(short)(12-1-1-1-1+1+1); Font font=new Font("SansSerif",Font.BOLD,fs); cs1.setFont(font); short sw=(short) ics.loadTextFont(font).drawTextWidth(name); short sh=(short) ics.drawTextHeight(name); Rectangle2D wndCap=new Rectangle2D(new Point2D(x,y),w-1,sh+5,active ? TeaProps.objRibs.getRGB() : TeaProps.objRibsNormal.getRGB(),true); wndCap.toPen(ics,pn.select(wndCap)); wndCap.setFill(false); wndCap.setColor(TeaProps.wndBorder.getRGB()); wndCap.toPen(ics,pn.select(wndCap)); myy=(short)(sh+5); Text2D title=new Text2D(new Point2D(x+5,y+sh / 2),name+" - "+imgName,TeaProps.caption.getRGB(),font); title.toPen(ics,pn.select(title)); Rectangle2D border=new Rectangle2D(new Point2D(x,y+myy),w-1-1+1,h-myy-1-1+1,TeaProps.wndBorder.getRGB()); border.toPen(ics,pn.select(border)); if(img1 !=null) cs1.drawImage(img1,x+1,y+myy+1,w-1-1+1-1-1,h-myy-1-1+1-1-1,this); else { cs1.setColor(Color.gray); cs1.fillRect(x+1,y+myy+1,w-1-1+1-1,h-myy-1-1+1-1);}} public boolean imageUpdate(Image img,int infoflags,int x,int y,int width,int height) { if(infoflags==ImageObserver.ALLBITS) { return false;} return true;}} abstract class OknoManagerAbstract implements Stop,OknoMassControl,OknosManager { protected boolean autoEnable=true; protected boolean autoRev=true; protected OknoManagerAbstract() { super();} public static void nextAllWindows() { new OknoManagerInternal(null).nextWindows(); new OknoManagerInternal3D(null).nextWindows(); new OknoManagerExternal().nextWindows();} public static void previousAllWindows() { new OknoManagerInternal(null).previousWindows(); new OknoManagerInternal3D(null).previousWindows(); new OknoManagerExternal().previousWindows();} public static void updateCommonWidthHeightAllWindows(short commonWidth,short commonHeight) { new OknoManagerInternal(null).commonWidthHeight(commonWidth,commonHeight); new OknoManagerInternal3D(null).commonWidthHeight(commonWidth,commonHeight); new OknoManagerExternal().commonWidthHeight(commonWidth,commonHeight);} public static void auto(boolean autoEnable,boolean rev) { new OknoManagerInternal(null).autoEnable(autoEnable,rev); new OknoManagerInternal3D(null).autoEnable(autoEnable,rev); new OknoManagerExternal().autoEnable(autoEnable,rev);} public static void destroyAllWindows() { new OknoManagerInternal(null).ka(); new OknoManagerInternal3D(null).ka(); new OknoManagerExternal().ka();} public static void updateDelayAllWindows(short refreshDelay) { new OknoManagerInternal(null).updateWindowsDelay(refreshDelay); new OknoManagerInternal3D(null).updateWindowsDelay(refreshDelay); new OknoManagerExternal().updateWindowsDelay(refreshDelay);} public static OknoManagerAbstract obtain(KinDi3 kind,InternalPlane panel) throws OknoManagerException { if(kind !=null) { if(kind.getId()==KinDi3.INT.getId()) { if(panel==null) throw new OknoManagerException("No graphics for internal windows"); return new OknoManagerInternal(panel);} if(kind.getId()==KinDi3.INT3D.getId()) { if(panel==null) throw new OknoManagerException("No graphics for internal windows"); return new OknoManagerInternal3D((Internal3DPlane) panel);} if(kind.getId()==KinDi3.EXT.getId()) return new OknoManagerExternal();} return new OknoManagerExternal();} public void ka() { Slipstream ss=Enter.instance().slipstream(); for(int i=0; i < getWindowsNum(); i++) { Okno fn=getWindow(i); ss.push(fn.finish());} clearAllWindows();}} class OknoManagerInternal3D extends OknoManagerAbstract { private static Queue internalWindows=new Queue(); private Internal3DPlane oknosPlane; public OknoManagerInternal3D(Internal3DPlane panel) { super(); this.oknosPlane=panel;} public void previousWindows() { autoEnable(false,true); for(int i=0; i < internalWindows.sizeOfQueue(); i++) { OknoIntWrap3D bOknoWrap=(OknoIntWrap3D) internalWindows.getQueueRecord(i); bOknoWrap.getKadr().imagePrevious();}} public void nextWindows() { autoEnable(false,true); for(int i=0; i < internalWindows.sizeOfQueue(); i++) { OknoIntWrap3D oknoIntWrap=(OknoIntWrap3D) internalWindows.getQueueRecord(i); oknoIntWrap.getKadr().imageNext();}} public void commonWidthHeight(short commonWidth,short commonHeight) { for(int i=0; i < internalWindows.sizeOfQueue(); i++) { OknoIntWrap3D oknoIntWrap=(OknoIntWrap3D) internalWindows.getQueueRecord(i); oknoIntWrap.getRef().size(commonWidth,commonHeight);}} public void updateWindowsDelay(short refreshDelay) { for(int i=0; i < internalWindows.sizeOfQueue(); i++) { OknoIntWrap3D oknoIntWrap=(OknoIntWrap3D) internalWindows.getQueueRecord(i); oknoIntWrap.getRef().delay(refreshDelay);}} public void autoEnable(boolean ae,boolean rev) { this.autoEnable=ae; this.autoRev=rev; for(int i=0; i < internalWindows.sizeOfQueue(); i++) { OknoIntWrap3D oknoIntWrap=(OknoIntWrap3D) internalWindows.getQueueRecord(i); oknoIntWrap.getKadr().autoEnabled(ae,rev);}} public void clearAllWindows() { internalWindows.clearQueue();} public void createWindow(short x,short y,short w,short h,short delay,OknosCtx ctx) { ImagesPack ip=(ImagesPack) ctx.getAttr("ip"); OknoIntViewKadr3D kadr=new OknoIntViewKadr3D(ip); String name=ip.getName(); COkno fn=(COkno)((COkno)((COkno) Enter3D.instance().okno(oknosPlane).size(w,h).move(x,y)).kadr(kadr)).delay(delay).show(this,name); internalWindows.enqueueQueueRecord(new OknoIntWrap3D(fn,kadr));} public Okno getWindow(int index) { OknoIntWrap3D oknoIntWrap=(OknoIntWrap3D) internalWindows.getQueueRecord(index); return oknoIntWrap.getRef();} public Kadr getWindowKadr(int index) { OknoIntWrap3D oknoIntWrap=(OknoIntWrap3D) internalWindows.getQueueRecord(index); return oknoIntWrap.getKadr();} public int getWindowsNum() { return(int) internalWindows.sizeOfQueue();}} class OknoManagerInternal extends OknoManagerAbstract { private static Queue internalWindows=new Queue(); private InternalPlane oknosPlane; public OknoManagerInternal(InternalPlane panel) { super(); this.oknosPlane=panel;} public void previousWindows() { autoEnable(false,true); for(int i=0; i < internalWindows.sizeOfQueue(); i++) { OknoIntWrap bOknoWrap=(OknoIntWrap) internalWindows.getQueueRecord(i); bOknoWrap.getKadr().imagePrevious();}} public void nextWindows() { autoEnable(false,true); for(int i=0; i < internalWindows.sizeOfQueue(); i++) { OknoIntWrap oknoIntWrap=(OknoIntWrap) internalWindows.getQueueRecord(i); oknoIntWrap.getKadr().imageNext();}} public void commonWidthHeight(short commonWidth,short commonHeight) { for(int i=0; i < internalWindows.sizeOfQueue(); i++) { OknoIntWrap oknoIntWrap=(OknoIntWrap) internalWindows.getQueueRecord(i); oknoIntWrap.getRef().size(commonWidth,commonHeight);}} public void autoEnable(boolean ae,boolean rev) { this.autoEnable=ae; this.autoRev=rev; for(int i=0; i < internalWindows.sizeOfQueue(); i++) { OknoIntWrap oknoIntWrap=(OknoIntWrap) internalWindows.getQueueRecord(i); oknoIntWrap.getKadr().autoEnabled(ae,rev);}} public void updateWindowsDelay(short refreshDelay) { for(int i=0; i < internalWindows.sizeOfQueue(); i++) { OknoIntWrap oknoIntWrap=(OknoIntWrap) internalWindows.getQueueRecord(i); oknoIntWrap.getRef().delay(refreshDelay);}} public void clearAllWindows() { internalWindows.clearQueue();} public int getWindowsNum() { return(int) internalWindows.sizeOfQueue();} public Kadr getWindowKadr(int index) { OknoIntWrap oknoIntWrap=(OknoIntWrap) internalWindows.getQueueRecord(index); return oknoIntWrap.getKadr();} public Okno getWindow(int index) { OknoIntWrap oknoIntWrap=(OknoIntWrap) internalWindows.getQueueRecord(index); return oknoIntWrap.getRef();} public void createWindow(short x,short y,short w,short h,short delay,OknosCtx ctx) { ImagesPack ip=(ImagesPack) ctx.getAttr("ip"); OknoIntViewKadr kadr=new OknoIntViewKadr(ip); String name=ip.getName(); BOkno fn=(BOkno)((BOkno)((BOkno) Enter2.instance().okno(oknosPlane).size(w,h).move(x,y)).kadr(kadr)).delay(delay).show(this,name); internalWindows.enqueueQueueRecord(new OknoIntWrap(fn,kadr));}} class OknoManagerExternal extends OknoManagerAbstract { private static Queue windows=new Queue(); public OknoManagerExternal() { super();} public void previousWindows() { Object[] queueRecordsArray=windows.getQueueRecordsArray(); for(int i=0; i < queueRecordsArray.length; i++) { OknoWrap oknoWrap=(OknoWrap) queueRecordsArray[i]; oknoWrap.imagePrevious();}} public void nextWindows() { Object[] queueRecordsArray=windows.getQueueRecordsArray(); for(int i=0; i < queueRecordsArray.length; i++) { OknoWrap oknoWrap=(OknoWrap) queueRecordsArray[i]; oknoWrap.imageNext();}} public void commonWidthHeight(short commonWidth,short commonHeight) { for(int i=0; i < windows.sizeOfQueue(); i++) { Okno okno=getWindow(i); okno.size(commonWidth,commonHeight);}} public void autoEnable(boolean ae,boolean rev) { this.autoEnable=ae; Object[] queueRecordsArray=windows.getQueueRecordsArray(); for(int i=0; i < queueRecordsArray.length; i++) { OknoWrap oknoWrap=(OknoWrap) queueRecordsArray[i]; oknoWrap.autoEnabled(ae,rev);}} public void updateWindowsDelay(short refreshDelay) { Object[] queueRecordsArray=windows.getQueueRecordsArray(); for(int i=0; i < queueRecordsArray.length; i++) { OknoWrap oknoWrap=(OknoWrap) queueRecordsArray[i]; oknoWrap.delay(refreshDelay);}} public int getWindowsNum() { return(int) windows.sizeOfQueue();} public void clearAllWindows() { windows.clearQueue();} public Okno getWindow(int index) { OknoWrap oknoWrap=(OknoWrap) windows.getQueueRecord(index); return oknoWrap.getRef();} public Kadr getWindowKadr(int index) { OknoWrap oknoWrap=(OknoWrap) windows.getQueueRecord(index); return oknoWrap.getKadr();} public void createWindow(short x,short y,short w,short h,short delay,OknosCtx ctx) { ImagesPack ip=(ImagesPack) ctx.getAttr("ip"); String id=ip.getName(); OknoIntViewKadr kadr=new OknoIntViewKadr(ip); Okno fn=Enter.instance().okno().size(w,h).move(x,y).kadr(kadr).delay(delay).show(this,id); OknoWrap oknoWrap=new OknoWrap(id,fn,kadr); windows.enqueueQueueRecord(oknoWrap);}} interface OknoMassControl { void previousWindows(); void nextWindows(); void commonWidthHeight(short commonWidth,short commonHeight); void updateWindowsDelay(short refreshDelay); void autoEnable(boolean ae,boolean rev);} class OknoIntViewKadr3D implements Kadr { public final static int dv=2-1; private String wndId; private ImagesPack ip; private int x; private int y; private Object active; private Image img1; private String imgName; private boolean ae2; private boolean rev; public OknoIntViewKadr3D(ImagesPack ip) { super(); this.ip=ip; this.wndId=ip.getName(); this.imgName="";} public void make(Graphics ics,short ww,short hh) { if(x > 0) { ww=(short)(ww / dv); hh=(short)(hh / dv);} if(ae2) { if(rev) imagePrevious(); else imageNext();} ClOknoView3D wv=new ClOknoView3D((short) x,(short) y,ww,hh,wndId,active==this,imgName,img1); wv.drawFrame(ics);} public void imageNext() { imgName=ip.previousImageLoad(); try { img1=ip.getCurrentImage();} catch(ImageFileException e) { e.printStackTrace();}} public void imagePrevious() { imgName=ip.nextImageLoad(); try { img1=ip.getCurrentImage();} catch(ImageFileException e) { e.printStackTrace();}} public void autoEnabled(boolean ae,boolean rev) { this.ae2=ae; this.rev=rev;}} class OknoIntViewKadr implements Kadr { public final static int dv=2-1; private String wndId; private ImagesPack ip; private int x; private int y; private Object active; private Image img1; private String imgName; private boolean ae2; private boolean rev; public OknoIntViewKadr(ImagesPack ip) { super(); this.ip=ip; this.wndId=ip.getName(); this.imgName="";} public void imageNext() { imgName=ip.previousImageLoad(); try { img1=ip.getCurrentImage();} catch(ImageFileException e) { e.printStackTrace();}} public void imagePrevious() { imgName=ip.nextImageLoad(); try { img1=ip.getCurrentImage();} catch(ImageFileException e) { e.printStackTrace();}} public void updatePos(int x,int y) { this.x=(short)(x / dv); this.y=(short)(y / dv); this.active=this;} public void make(Graphics ics,short ww,short hh) { if(x > 0) { ww=(short)(ww / dv); hh=(short)(hh / dv);} if(ae2) { if(rev) imagePrevious(); else imageNext();} ClOknoView wv=new ClOknoView((short) x,(short) y,ww,hh,wndId,active==this,imgName,img1); wv.drawFrame(ics);} public void autoEnabled(boolean ae,boolean rev) { this.ae2=ae; this.rev=rev;}} class OknoIntWrap3D { private COkno ref; private OknoIntViewKadr3D kadr; public OknoIntWrap3D(COkno ref,OknoIntViewKadr3D kadr) { super(); this.ref=ref; this.kadr=kadr;} public COkno getRef() { return ref;} public OknoIntViewKadr3D getKadr() { return kadr;}} class OknoIntWrap { private BOkno ref; private OknoIntViewKadr kadr; public OknoIntWrap(BOkno ref,OknoIntViewKadr kadr) { super(); this.ref=ref; this.kadr=kadr;} public BOkno getRef() { return ref;} public OknoIntViewKadr getKadr() { return kadr;}} class OknoWrap { private String name; private Okno ref; private OknoIntViewKadr kadr; private short refreshDelay=(short) Integer.parseInt(TeaProps.AUTO_DELAY); public OknoWrap(String name,Okno ref,OknoIntViewKadr kadr) { super(); this.ref=ref; this.name=name; this.kadr=kadr;} public void imageNext() { kadr.imageNext();} public void imagePrevious() { kadr.imagePrevious();} public void delay(short refreshDelay) { this.refreshDelay=refreshDelay; ref.delay(refreshDelay);} public void autoEnabled(boolean ae,boolean rev) { kadr.autoEnabled(ae,rev); if(ae) ref.delay(refreshDelay); else ref.delay((short) 997);} public Okno getRef() { return ref;} public String getName() { return name;} public OknoIntViewKadr getKadr() { return kadr;}} class OknoManagerException extends Exception { public OknoManagerException(String msg) { super(msg);}} class Cortege { private Spiska relations; public Cortege() { super(); this.relations=new Spiska();} public void append(OknoRelation rel) { if(rel !=null) relations.append(rel);} public void append(Okno ref,Shift vr) { append(new OknoRelation(ref,vr));} public long getNum() { return relations.size();}} class ShiftType { private int id; public static ShiftType stCornerLeftUp=new ShiftType(1); public static ShiftType stCornerLeftDown=new ShiftType(1+1); public static ShiftType stCornerRightDown=new ShiftType(1+1+1); public static ShiftType stCornerRightUp=new ShiftType(1+1+1+1); public static ShiftType stSideRight=new ShiftType(1+1+1+1+1); public static ShiftType stSideTop=new ShiftType(1+1+1+1+1+1); public static ShiftType stSideLeft=new ShiftType(1+1+1+1+1+1+1); public static ShiftType stSideBottom=new ShiftType(1+1+1+1+1+1+1+1); public static ShiftType stHalfSideLeftDown=new ShiftType(1+1+1+1+1+1+1+1+1); public static ShiftType stHalfSideLeftUp=new ShiftType(1+1+1+1+1+1+1+1+1+1); public static ShiftType stHalfSideTopLeft=new ShiftType(1+1+1+1+1+1+1+1+1+1+1); public static ShiftType stHalfSideTopRight=new ShiftType(1+1+1+1+1+1+1+1+1+1+1+1); public static ShiftType stHalfSideRightUp=new ShiftType(1+1+1+1+1+1+1+1+1+1+1+1+1); public static ShiftType stHalfSideRightDown=new ShiftType(1+1+1+1+1+1+1+1+1+1+1+1+1+1); public static ShiftType stHalfSideBottomRight=new ShiftType(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1); public static ShiftType stHalfSideBottomLeft=new ShiftType(1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1); public ShiftType(int id) { super(); this.id=id;} public int getId() { return id;}} class OknoRelation { Okno ref; Shift vr; public OknoRelation(Okno ref,Shift vr) { super(); this.ref=ref; this.vr=vr;} public static Shift obtainShift(ShiftType kind,Okno prev,Okno cur) { Shift result=null; if(kind !=null && prev !=null) { if(kind.getId()==ShiftType.stCornerLeftUp.getId()) { result=new Shift((short) 111,(short) 222);} if(kind.getId()==ShiftType.stCornerLeftDown.getId()) {} if(kind.getId()==ShiftType.stCornerRightDown.getId()) {} if(kind.getId()==ShiftType.stCornerRightUp.getId()) {} if(kind.getId()==ShiftType.stSideRight.getId()) {} if(kind.getId()==ShiftType.stSideTop.getId()) {} if(kind.getId()==ShiftType.stSideLeft.getId()) {} if(kind.getId()==ShiftType.stSideBottom.getId()) {}} return result;}} class ImagesPackSet implements SizeUpdateListener { private Spiska packs=new Spiska(); private PanelDays daysPanel; public ImagesPackSet(PanelDays daysPanel) { super(); this.daysPanel=daysPanel;} public void clear() { packs=new Spiska();} public void reloadDays(String path) { packs=new Spiska(); File file=new File(path); if(file.isDirectory()) { String[] items=file.list(); for(int i=0; i < items.length; i++) { String item=items[i]; if(new Ester(item).nteq(new Ester("Backups"))) { File file2=new File(file.getAbsolutePath()+"/"+item); if(file2.isDirectory()) { ImagesPack ip=new ImagesPack(item,daysPanel,this); addIp(ip);}}}}} public void notifyReady(ImagesPack ip) { daysPanel.recountTotalItems(); daysPanel.updateTotalItems();} public void refresh(String imgPath,String[] imgExts) { if(imgExts[0].equalsIgnoreCase(TeaProps.BC_EXTDEF)) imgExts[0]="*"+TeaProps.BC_EXT2; for(int i=0; i < packs.size(); i++) { ImagesPack ip=(ImagesPack) packs.at(i); ip.refreshReload(imgPath,imgExts);} System.out.println(" P "+imgPath+" E "+new Data().dump(imgExts));} public void addIp(ImagesPack ip) { packs.append(ip);} public ImagesPack getIp(int pos) { return(ImagesPack) packs.at(pos);} public long getSize() { return packs.size();}} class OknoFrame { short x; short y; short w; short h; public boolean recall(Slip item) { String ati=new String(item.symbols()); int idx=ati.indexOf(","); if(idx < 0) return false; w=(short) Long.parseLong(ati.substring(0,idx)); ati=ati.substring(idx+1); idx=ati.indexOf(","); if(idx < 0) return false; h=(short) Long.parseLong(ati.substring(0,idx)); ati=ati.substring(idx+1); idx=ati.indexOf(","); if(idx < 0) return false; x=(short) Long.parseLong(ati.substring(0,idx)); ati=ati.substring(idx+1); y=(short) Long.parseLong(ati); return true;}} class OknoViewEmptyKadr implements Kadr { private short x; private short y; private short w; private short h; public OknoViewEmptyKadr() { super();} public void updatePos(short x,short y) { this.x=(short)(x / 2); this.y=(short)(y / 2);} public void make(Graphics ics,short mx,short my) { if(x > 0) { w=(short)(mx / 2+5); h=(short)(my / 2+5);} ics.drawRect(x,y,w,h);}} interface OknosManager { void clearAllWindows(); void createWindow(short x,short y,short w,short h,short delay,OknosCtx ctx); Okno getWindow(int index); Kadr getWindowKadr(int index); int getWindowsNum();} class OknosCtx { private Karta attrMap=new Karta(); public OknosCtx() { super();} public Object getAttr(String name) { return attrMap.get(name);} public void setAttr(String name,Object attr) { attrMap.put(name,attr);}} class KinDi3 { public static final KinDi3 EXT=new KinDi3(1,"external"); public static final KinDi3 INT=new KinDi3(1+1,"internal"); public static final KinDi3 INT3D=new KinDi3(1+1+1,"I3D"); private int id; private String name; private KinDi3(int id,String name) { this.id=id; this.name=name;} public int getId() { return id;} public String getName() { return name;}}