package mydev.uix; import java.awt.Color; import java.awt.Event; import mydev.about.CanvasAdapter; import mydev.about.FourCornersConture2D; import mydev.about.Line2D; import mydev.about.PaintAdapter; import mydev.about.Point2D; public class MovingsPanel extends CommonCanvas { final static Color BG_COLOR=Color.gray; final static Color BORDER_COLOR=Color.black; final static Color BTN_BACK=Color.darkGray; final static Color BTN_FACE=Color.white; final static Color BTN_PRESS=Color.black; final static short DEF_WIDTH=220; final static short DEF_HEIGHT=130; private Color hPen1; private Color hPen12; private Color hPen2; private Color hPrevPen; protected short pressForward; protected short pressBackward; protected short pressLeft; protected short pressRight; protected short pressUp; protected short pressDown; protected short pressCtrl; private CanvasAdapter cs; private PaintAdapter pn; private boolean needRepaint; private short cx; private short cy; protected short active; protected short activePrev; protected short caBot; protected short caRight; protected int side; protected int step; public MovingsPanel(short panelWidth,short panelHeight,Color bgColor,Color borderColor) { super(bgColor,borderColor); resize(panelWidth,panelHeight); this.pressForward=0x7fff; this.pressBackward=(short) Long.MIN_VALUE; drop(); this.pressCtrl=0; this.active=0; this.activePrev=0; this.caRight=panelWidth; this.caBot=panelHeight; this.needRepaint=false; this.side=caBot / 5; this.step=side * 3 / 7;} public MovingsPanel(short panelWidth,short panelHeight) { this(panelWidth,panelHeight,BG_COLOR,BORDER_COLOR);} public MovingsPanel() { this(DEF_WIDTH,DEF_HEIGHT);} protected void LineTo(int x,int y) { Line2D line=new Line2D(new Point2D(cx,cy),new Point2D(x,y)); line.toPen(cs,pn); cx=(short) x; cy=(short) y;} protected void MoveToEx(int x,int y) { cx=(short) x; cy=(short) y;} public Color RGB(int r,int g,int b) { return new Color(b,g,r);} protected Color Sq4Points(float x1,float y1,float x2,float y2,float x3,float y3,float x4,float y4,Color col) { Color c11=new Color(pn.getColor()); pn.setColor(col.getRGB()); FourCornersConture2D ps=new FourCornersConture2D(x1,y1,x2,y2,x3,y3,x4,y4,col.getRGB(),true,col.getRGB()); ps.toPen(cs,pn); return c11;} protected void drawItems(CanvasAdapter ics,PaintAdapter pn) { this.cs=ics; this.pn=pn; if(hPen1==null) { hPen1=BTN_FACE; hPen12=RGB(10,242,255); hPen2=BTN_PRESS;} hPrevPen=hPen2; buttonForwards(); buttonBackwards(); buttonLeft(); buttonRight(); buttonUp(); buttonDown();} public void clearItems() {} protected void buttonDown() { Sq4Points(caRight / 2-side+2 * side+step,caBot / 2-step / 2-2 * side,caRight / 2+side+2 * side+step,caBot / 2-step / 2-2 * side,caRight / 2+side+2 * side+step,caBot / 2-step / 2,caRight / 2-side+2 * side+step,caBot / 2-step / 2,BTN_BACK); pn.setColor((pressDown==1 ? hPen2 : active==6 ? hPen12 : hPen1).getRGB()); MoveToEx(caRight / 2-side+2 * side+step,caBot / 2-step / 2-2 * side); LineTo(caRight / 2+side+2 * side+step,caBot / 2-step / 2-2 * side); LineTo(caRight / 2+side+2 * side+step,caBot / 2-step / 2); LineTo(caRight / 2-side+2 * side+step,caBot / 2-step / 2); LineTo(caRight / 2-side+2 * side+step,caBot / 2-step / 2-2 * side); MoveToEx(caRight / 2-side+step / 2+2 * side+step,caBot / 2-step / 2-side); LineTo(caRight / 2+2 * side+step,caBot / 2-step+1); LineTo(caRight / 2+side-step / 2+2 * side+step,caBot / 2-step / 2-side); MoveToEx(caRight / 2-side+step / 2+2 * side+step,caBot / 2-2 * side); LineTo(caRight / 2+2 * side+step,caBot / 2-step-side+step / 2+1); LineTo(caRight / 2+side-step / 2+2 * side+step,caBot / 2-2 * side); pn.setColor(hPrevPen.getRGB());} protected void buttonUp() { Sq4Points(caRight / 2-side-2 * side-step,caBot / 2-step / 2-2 * side,caRight / 2+side-2 * side-step,caBot / 2-step / 2-2 * side,caRight / 2+side-2 * side-step,caBot / 2-step / 2,caRight / 2-side-2 * side-step,caBot / 2-step / 2,BTN_BACK); pn.setColor((pressUp==1 ? hPen2 : active==5 ? hPen12 : hPen1).getRGB()); MoveToEx(caRight / 2-side-2 * side-step,caBot / 2-step / 2-2 * side); LineTo(caRight / 2+side-2 * side-step,caBot / 2-step / 2-2 * side); LineTo(caRight / 2+side-2 * side-step,caBot / 2-step / 2); LineTo(caRight / 2-side-2 * side-step,caBot / 2-step / 2); LineTo(caRight / 2-side-2 * side-step,caBot / 2-step / 2-2 * side); MoveToEx(caRight / 2-side+step / 2-2 * side-step,caBot / 2-step / 2-side); LineTo(caRight / 2-2 * side-step,caBot / 2-step-2 * side+step); LineTo(caRight / 2+side-step / 2-2 * side-step,caBot / 2-step / 2-side); MoveToEx(caRight / 2-side+step / 2-2 * side-step,caBot / 2-step / 2-side+side-step / 2); LineTo(caRight / 2-2 * side-step,caBot / 2-step-2 * side+step+side-step / 2); LineTo(caRight / 2+side-step / 2-2 * side-step,caBot / 2-step / 2-side+side-step / 2); pn.setColor(hPrevPen.getRGB());} protected void buttonRight() { Sq4Points(caRight / 2-side+step+2 * side,caBot / 2-step / 2-2 * side+2 * side+step,caRight / 2+side+step+2 * side,caBot / 2-step / 2-2 * side+2 * side+step,caRight / 2+side+step+2 * side,caBot / 2-step / 2-2 * side+2 * side+2 * side+step,caRight / 2-side+step+2 * side,caBot / 2-step / 2-2 * side+2 * side+2 * side+step,BTN_BACK); pn.setColor((pressRight==1 ? hPen2 : active==4 ? hPen12 : hPen1).getRGB()); MoveToEx(caRight / 2-side+step+2 * side,caBot / 2-step / 2-2 * side+2 * side+step); LineTo(caRight / 2+side+step+2 * side,caBot / 2-step / 2-2 * side+2 * side+step); LineTo(caRight / 2+side+step+2 * side,caBot / 2-step / 2-2 * side+2 * side+2 * side+step); LineTo(caRight / 2-side+step+2 * side,caBot / 2-step / 2-2 * side+2 * side+2 * side+step); LineTo(caRight / 2-side+step+2 * side,caBot / 2-step / 2-2 * side+2 * side+step); MoveToEx(caRight / 2-side-step+3 * side,caBot / 2-step / 2+step+side); LineTo(caRight / 2-side-step+3 * side+2 * side-step,caBot / 2-step / 2+step+side); MoveToEx(caRight / 2-step-step / 2+3 * side-1,caBot / 2+step); LineTo(caRight / 2+step / 2+3 * side,caBot / 2-step / 2+step+side); LineTo(caRight / 2-step-step / 2+3 * side,caBot / 2+2 * side); pn.setColor(hPrevPen.getRGB());} protected void buttonLeft() { Sq4Points(caRight / 2-side-step-2 * side,caBot / 2-step / 2+step,caRight / 2+side-step-2 * side,caBot / 2-step / 2+step,caRight / 2+side-step-2 * side,caBot / 2-step / 2+2 * side+step,caRight / 2-side-step-2 * side,caBot / 2-step / 2+2 * side+step,BTN_BACK); pn.setColor((pressLeft==1 ? hPen2 : active==3 ? hPen12 : hPen1).getRGB()); MoveToEx(caRight / 2-side-step-2 * side,caBot / 2-step / 2+step); LineTo(caRight / 2+side-step-2 * side,caBot / 2-step / 2+step); LineTo(caRight / 2+side-step-2 * side,caBot / 2-step / 2+2 * side+step); LineTo(caRight / 2-side-step-2 * side,caBot / 2-step / 2+2 * side+step); LineTo(caRight / 2-side-step-2 * side,caBot / 2-step / 2+step); MoveToEx(caRight / 2-side-step / 2-2 * side,caBot / 2-step / 2+step+side); LineTo(caRight / 2-side-step / 2-2 * side+2 * side-step,caBot / 2-step / 2+step+side); MoveToEx(caRight / 2-step-2 * side+1,caBot / 2+step); LineTo(caRight / 2-side-step / 2-2 * side,caBot / 2-step / 2+step+side); LineTo(caRight / 2-step-2 * side,caBot / 2+2 * side); pn.setColor(hPrevPen.getRGB());} protected void buttonBackwards() { Sq4Points(caRight / 2-side,caBot / 2-step / 2-2 * side+2 * side+step,caRight / 2+side,caBot / 2-step / 2-2 * side+2 * side+step,caRight / 2+side,caBot / 2-step / 2+2 * side+step,caRight / 2-side,caBot / 2-step / 2+2 * side+step,BTN_BACK); pn.setColor((pressBackward==1 ? hPen2 : active==2 ? hPen12 : hPen1).getRGB()); MoveToEx(caRight / 2-side,caBot / 2-step / 2-2 * side+2 * side+step); LineTo(caRight / 2+side,caBot / 2-step / 2-2 * side+2 * side+step); LineTo(caRight / 2+side,caBot / 2-step / 2+2 * side+step); LineTo(caRight / 2-side,caBot / 2-step / 2+2 * side+step); LineTo(caRight / 2-side,caBot / 2-step / 2-2 * side+2 * side+step); MoveToEx(caRight / 2,caBot / 2-step+2 * side+step); LineTo(caRight / 2,caBot / 2-step-2 * side+step+2 * side+step); MoveToEx(caRight / 2-side+step / 2,caBot / 2-step / 2-side+2 * side+step); LineTo(caRight / 2,caBot / 2-step+2 * side+step+1); LineTo(caRight / 2+side-step / 2,caBot / 2-step / 2-side+2 * side+step); pn.setColor(hPrevPen.getRGB());} protected void buttonForwards() { Sq4Points(caRight / 2-side,caBot / 2-step / 2-2 * side,caRight / 2+side,caBot / 2-step / 2-2 * side,caRight / 2+side,caBot / 2-step / 2,caRight / 2-side,caBot / 2-step / 2,BTN_BACK); pn.setColor((pressForward==1 ? hPen2 : active==1 ? hPen12 : hPen1).getRGB()); MoveToEx(caRight / 2-side,caBot / 2-step / 2-2 * side); LineTo(caRight / 2+side,caBot / 2-step / 2-2 * side); LineTo(caRight / 2+side,caBot / 2-step / 2); LineTo(caRight / 2-side,caBot / 2-step / 2); LineTo(caRight / 2-side,caBot / 2-step / 2-2 * side); MoveToEx(caRight / 2,caBot / 2-step); LineTo(caRight / 2,caBot / 2-step-2 * side+step); MoveToEx(caRight / 2-side+step / 2,caBot / 2-step / 2-side); LineTo(caRight / 2,caBot / 2-step-2 * side+step); LineTo(caRight / 2+side-step / 2,caBot / 2-step / 2-side); pn.setColor(hPrevPen.getRGB());} public boolean mouseDown(Event et,int mx,int my) { drop(); if(caRight / 2-side <= mx && mx <= caRight / 2+side && caBot / 2-step / 2-2 * side <= my && my <= caBot / 2-step / 2) pressForward=1; if(caRight / 2-side <= mx && mx <= caRight / 2+side && caBot / 2-step / 2-2 * side+2 * side+step <= my && my <= caBot / 2-step / 2+2 * side+step) pressBackward=1; if(caRight / 2-side-step-2 * side <= mx && mx <= caRight / 2+side-step-2 * side && caBot / 2-step / 2+step <= my && my <= caBot / 2-step / 2+2 * side+step) pressLeft=1; if(caRight / 2-side+step+2 * side <= mx && mx <= caRight / 2+side+step+2 * side && caBot / 2-step / 2-2 * side+2 * side+step <= my && my <= caBot / 2-step / 2-2 * side+2 * side+2 * side+step) pressRight=1; if(caRight / 2-side-2 * side-step <= mx && mx <= caRight / 2+side-2 * side-step && caBot / 2-step / 2-2 * side <= my && my <= caBot / 2-step / 2) pressUp=1; if(caRight / 2-side+2 * side+step <= mx && mx <= caRight / 2+side+2 * side+step && caBot / 2-step / 2-2 * side <= my && my <= caBot / 2-step / 2) pressDown=1; prepareUpdate(); return super.mouseDown(et,mx,my);} public boolean mouseUp(Event et,int x,int y) { drop(); prepareUpdate(); return super.mouseUp(et,x,y);} public void prepareUpdate() { needRepaint=true;} public boolean mouseMove(Event et,int mx,int my) { active=0; if(caRight / 2-side <= mx && mx <= caRight / 2+side && caBot / 2-step / 2-2 * side <= my && my <= caBot / 2-step / 2) active=1; if(caRight / 2-side <= mx && mx <= caRight / 2+side && caBot / 2-step / 2-2 * side+2 * side+step <= my && my <= caBot / 2-step / 2+2 * side+step) active=2; if(caRight / 2-side-step-2 * side <= mx && mx <= caRight / 2+side-step-2 * side && caBot / 2-step / 2+step <= my && my <= caBot / 2-step / 2+2 * side+step) active=3; if(caRight / 2-side+step+2 * side <= mx && mx <= caRight / 2+side+step+2 * side && caBot / 2-step / 2-2 * side+2 * side+step <= my && my <= caBot / 2-step / 2-2 * side+2 * side+2 * side+step) active=4; if(caRight / 2-side-2 * side-step <= mx && mx <= caRight / 2+side-2 * side-step && caBot / 2-step / 2-2 * side <= my && my <= caBot / 2-step / 2) active=5; if(caRight / 2-side+2 * side+step <= mx && mx <= caRight / 2+side+2 * side+step && caBot / 2-step / 2-2 * side <= my && my <= caBot / 2-step / 2) active=6; if(activePrev !=active) prepareUpdate(); activePrev=active; return super.mouseMove(et,mx,my);} public void refreshUpdatable() { if(needRepaint) { needRepaint=false; repaint();}} public boolean isForward() { return pressForward==1;} public boolean isBackward() { return pressBackward==1;} public boolean isLeft() { return pressLeft==1;} public boolean isRight() { return pressRight==1;} public boolean isUp() { return pressUp==1;} public boolean isDown() { return pressDown==1;} public void processKeyDown(Event e1,int key) { if(key==Event.UP) { if((e1.modifiers & Event.CTRL_MASK) > 0) { pressUp=1; pressForward=0;} else { pressUp=0; pressForward=1;}} else if(key==Event.DOWN) { if((e1.modifiers & Event.CTRL_MASK) > 0) { pressDown=1; pressBackward=0;} else { pressDown=0; pressBackward=1;}} else if(key==Event.LEFT) pressLeft=1; else if(key==Event.RIGHT) pressRight=1; if((e1.modifiers & Event.CTRL_MASK) > 0) pressCtrl=1; prepareUpdate();} public void processKeyUp(Event et,int key) { if(!((et.modifiers & Event.CTRL_MASK) > 0)) pressCtrl=0; if(key==Event.UP) pressUp=0; else if(key==Event.DOWN) pressDown=0; else if(key==Event.LEFT) pressLeft=0; else if(key==Event.RIGHT) pressRight=0; if(pressCtrl==0) { pressUp=0; pressDown=0; pressForward=0; pressBackward=0;} if(pressUp==0) { pressUp=0; pressForward=0;} if(pressDown==0) { pressDown=0; pressBackward=0;} if(pressLeft==0) pressLeft=0; if(pressRight==0) pressRight=0; prepareUpdate();} public void drop() { pressForward=0; pressUp=0; pressDown=0; pressLeft=0; pressRight=0; pressBackward=0;} public String toString() { return "Presska [forward="+pressForward+", backward="+pressBackward+", left="+pressLeft+", right="+pressRight+", up="+pressUp+", down="+pressDown+"]";}}