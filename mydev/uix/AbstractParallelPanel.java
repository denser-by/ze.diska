package mydev.uix; import java.awt.Color; import java.awt.GridLayout; import java.awt.LayoutManager; import java.awt.Panel; import mydev.vutils.AverageRec; import mydev.vutils.MegaAverageRec; import mydev.vutils.Spiska; public abstract class AbstractParallelPanel extends Panel { protected Spiska sps=new Spiska(); protected MegaAverageRec mar=new MegaAverageRec(); public AbstractParallelPanel(int nWidth,int nHeight) { super(); setLayout(getParallelLayout(nWidth,nHeight)); setBackground(getBgColor()); AbstractApproachProvider panelProvider=obtainProvider(); AbstractApproach ap; for(int i=0; i < nWidth; i++) for(int j=0; j < nHeight; j++) { add(ap=panelProvider.provideApproach()); mar.addItem(ap.ar); sps.append(ap);}} public AbstractApproach getFirst() { return(AbstractApproach) sps.at(0);} public void initBackup() { for(int i=0; i < sps.size(); i++) { AbstractApproach sp=(AbstractApproach) sps.at(i); sp.initBackup("","");}} public AbstractApproach assignBackup(String name,String path) { for(int i=0; i < sps.size(); i++) { AbstractApproach sp=(AbstractApproach) sps.at(i); if(sp.isReadyFree()) { sp.readBackup(name,path); return sp;}} return null;} public void initSource() { for(int i=0; i < sps.size(); i++) { AbstractApproach sp=(AbstractApproach) sps.at(i); sp.initSource("","");}} public AbstractApproach assignSource(String curSel,String path,String looking,String relPath,int idxSel) { for(int i=0; i < sps.size(); i++) { AbstractApproach sp=(AbstractApproach) sps.at(i); if(sp.isReadyFree()) { sp.readSource(curSel,path,looking,relPath,idxSel); return sp;}} return null;} public AbstractApproach assignSource(String name,String path,String start,String relPath) { for(int i=0; i < sps.size(); i++) { AbstractApproach sp=(AbstractApproach) sps.at(i); if(sp.isReadyFree()) { sp.readSource(name,path,start,relPath); return sp;}} return null;} public AbstractApproach assignSource(String name,String path) { for(int i=0; i < sps.size(); i++) { AbstractApproach sp=(AbstractApproach) sps.at(i); if(sp.isReadyFree()) { sp.readSource(name,path); return sp;}} return null;} public void clearPanels() { for(int i=0; i < sps.size(); i++) { AbstractApproach sp=(AbstractApproach) sps.at(i); sp.clearPanel();}} public AverageRec getAverageRec() { return mar;} public void clearAverage() { mar.clearItems();} protected abstract AbstractApproachProvider obtainProvider(); public boolean hasInProgress() { boolean result=false; for(int i=0; i < sps.size(); i++) { AbstractApproach sp=(AbstractApproach) sps.at(i); if(sp.isReadyFree()==false) result=true;} return result;} public boolean hasAvailable() { for(int i=0; i < sps.size(); i++) { AbstractApproach sp=(AbstractApproach) sps.at(i); if(sp.isReadyFree()) return true;} return false;} public int getNum() { return(int) sps.size();} public Color getBgColor() { return Color.white;} public LayoutManager getParallelLayout(int nWidth,int nHeight) { return new GridLayout(nWidth,nHeight,getBorderSpace()+1,getBorderSpace());} public int getBorderSpace() { return 1+1;}}