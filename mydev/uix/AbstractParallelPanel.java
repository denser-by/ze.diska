package mydev.uix; import java.awt.Color; import java.awt.GridLayout; import java.awt.LayoutManager; import java.awt.Panel; import java.util.Enumeration; import java.util.Vector; import mydev.vutils.AverageRec; import mydev.vutils.MegaAverageRec; public abstract class AbstractParallelPanel extends Panel { protected Vector sps=new Vector(); protected MegaAverageRec mar=new MegaAverageRec(); public AbstractParallelPanel(int nWidth,int nHeight) { super(); setLayout(getParallelLayout(nWidth,nHeight)); setBackground(getBgColor()); AbstractApproachProvider panelProvider=obtainProvider(); for(int i=0; i < nWidth; i++) for(int j=0; j < nHeight; j++) { AbstractApproach ap=panelProvider.provideApproach(); add(ap); mar.addItem(ap.ar); sps.addElement(ap);}} public AbstractApproach getFirst() { return(AbstractApproach) sps.elementAt(0);} public void initBackup() { Enumeration elements=sps.elements(); while(elements.hasMoreElements()) { AbstractApproach sp=(AbstractApproach) elements.nextElement(); sp.initBackup("","");}} public AbstractApproach assignBackup(String name,String path) { Enumeration elements=sps.elements(); while(elements.hasMoreElements()) { AbstractApproach sp=(AbstractApproach) elements.nextElement(); if(sp.isReadyFree()) { sp.readBackup(name,path); return sp;}} return null;} public void initSource() { Enumeration elements=sps.elements(); while(elements.hasMoreElements()) { AbstractApproach sp=(AbstractApproach) elements.nextElement(); sp.initSource("","");}} public AbstractApproach assignSource(String curSel,String path,String looking,String relPath,int idxSel) { Enumeration elements=sps.elements(); while(elements.hasMoreElements()) { AbstractApproach sp=(AbstractApproach) elements.nextElement(); if(sp.isReadyFree()) { sp.readSource(curSel,path,looking,relPath,idxSel); return sp;}} return null;} public AbstractApproach assignSource(String name,String path,String start,String relPath) { Enumeration elements=sps.elements(); while(elements.hasMoreElements()) { AbstractApproach sp=(AbstractApproach) elements.nextElement(); if(sp.isReadyFree()) { sp.readSource(name,path,start,relPath); return sp;}} return null;} public AbstractApproach assignSource(String name,String path) { Enumeration elements=sps.elements(); while(elements.hasMoreElements()) { AbstractApproach sp=(AbstractApproach) elements.nextElement(); if(sp.isReadyFree()) { sp.readSource(name,path); return sp;}} return null;} public void clearPanels() { Enumeration elements=sps.elements(); while(elements.hasMoreElements()) { AbstractApproach sp=(AbstractApproach) elements.nextElement(); sp.clearPanel();}} public AverageRec getAverageRec() { return mar;} public void clearAverage() { mar.clearItems();} protected abstract AbstractApproachProvider obtainProvider(); public boolean hasInProgress() { boolean result=false; Enumeration elements=sps.elements(); while(elements.hasMoreElements()) { AbstractApproach sp=(AbstractApproach) elements.nextElement(); if(sp.isReadyFree()==false) result=true;} return result;} public boolean hasAvailable() { Enumeration elements=sps.elements(); while(elements.hasMoreElements()) { AbstractApproach sp=(AbstractApproach) elements.nextElement(); if(sp.isReadyFree()) return true;} return false;} public int getNum() { return(int) sps.size();} public Color getBgColor() { return Color.white;} public LayoutManager getParallelLayout(int nWidth,int nHeight) { return new GridLayout(nWidth,nHeight,getBorderSpace()+1,getBorderSpace());} public int getBorderSpace() { return 1+1;}}