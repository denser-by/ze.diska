package mydev.uix; import java.awt.Color; import java.awt.GridLayout; import java.awt.LayoutManager; import java.awt.Panel; import mydev.vutils.AverageRec; import mydev.vutils.MegaAverageRec; import mydev.vutils.Stack; public abstract class AbstractParallelPanel extends Panel { protected Stack sps=new Stack(); protected MegaAverageRec mar=new MegaAverageRec(); public AbstractParallelPanel(int nWidth,int nHeight) { super(); setLayout(getParallelLayout(nWidth,nHeight)); setBackground(getBgColor()); AbstractApproachProvider panelProvider=obtainProvider(); for(int i=0; i < nWidth; i++) for(int j=0; j < nHeight; j++) { AbstractApproach ap=panelProvider.provideApproach(); add(ap); mar.addItem(ap.ar); sps.push(ap);}} public AbstractApproach getFirst() { return(AbstractApproach) sps.getStackRecord(0);} public void initBackup() { Object[] stackRecordsArray=sps.getStackRecordsArray(); for(int i=0; i < stackRecordsArray.length; i++) { AbstractApproach sp=(AbstractApproach) stackRecordsArray[i]; sp.initBackup("","");}} public AbstractApproach assignBackup(String name,String path) { Object[] stackRecordsArray=sps.getStackRecordsArray(); for(int i=0; i < stackRecordsArray.length; i++) { AbstractApproach sp=(AbstractApproach) stackRecordsArray[i]; if(sp.isReadyFree()) { sp.readBackup(name,path); return sp;}} return null;} public void initSource() { Object[] stackRecordsArray=sps.getStackRecordsArray(); for(int i=0; i < stackRecordsArray.length; i++) { AbstractApproach sp=(AbstractApproach) stackRecordsArray[i]; sp.initSource("","");}} public AbstractApproach assignSource(String curSel,String path,String looking,String relPath,int idxSel) { Object[] stackRecordsArray=sps.getStackRecordsArray(); for(int i=0; i < stackRecordsArray.length; i++) { AbstractApproach sp=(AbstractApproach) stackRecordsArray[i]; if(sp.isReadyFree()) { sp.readSource(curSel,path,looking,relPath,idxSel); return sp;}} return null;} public void clearPanels() { Object[] stackRecordsArray=sps.getStackRecordsArray(); for(int i=0; i < stackRecordsArray.length; i++) { AbstractApproach sp=(AbstractApproach) stackRecordsArray[i]; sp.clearPanel();}} public AverageRec getAverageRec() { return mar;} public void clearAverage() { mar.clearItems();} protected abstract AbstractApproachProvider obtainProvider(); public boolean hasInProgress() { boolean result=false; Object[] stackRecordsArray=sps.getStackRecordsArray(); for(int i=0; i < stackRecordsArray.length; i++) { AbstractApproach sp=(AbstractApproach) stackRecordsArray[i]; if(sp.isReadyFree()==false) result=true;} return result;} public boolean hasAvailable() { Object[] stackRecordsArray=sps.getStackRecordsArray(); for(int i=0; i < stackRecordsArray.length; i++) { AbstractApproach sp=(AbstractApproach) stackRecordsArray[i]; if(sp.isReadyFree()) return true;} return false;} public int getNum() { return(int) sps.sizeOfStack();} public Color getBgColor() { return Color.white;} public LayoutManager getParallelLayout(int nWidth,int nHeight) { return new GridLayout(nWidth,nHeight,getBorderSpace()+1,getBorderSpace());} public int getBorderSpace() { return 1+1;}}