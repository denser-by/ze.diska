package mydev.uix; import java.awt.Button; import java.awt.Checkbox; import java.awt.Color; import java.awt.FlowLayout; import java.awt.LayoutManager; import java.awt.TextField; public class ReverseRotateAutoPanel extends ControlsPanel { public static final int AUTO_DELAY=55; final static String BT_AUTO="btAuto"; final static String BT_NEXT="btNext"; final static String BT_PREV="btPrev"; final static String CH_REV="chRev"; final static String CH_AUTO="chAuto"; final static String TF_AUTO="tfAuto"; final static String NAME_AUTO="Auto"; final static String NAME_REVERSE="Reverse"; final static String NAME_NEXT="Next"; final static String NAME_PREV="Prev"; private static String autoDelay; private static int autoDelayParsed; private static String autoDelayParsedLast; private static boolean initialState; public ReverseRotateAutoPanel() { super();} public Button getBtAuto() { return(Button) getCtrl(BT_AUTO);} public Checkbox getChAuto() { return(Checkbox) getCtrl(CH_AUTO);} public Button getBtNext() { return(Button) getCtrl(BT_NEXT);} public Button getBtPrev() { return(Button) getCtrl(BT_PREV);} public Checkbox getChRev() { return(Checkbox) getCtrl(CH_REV);} public boolean isReverse() { return((Checkbox) getCtrl(CH_REV)).getState();} public void setAutoEnable(boolean enable) {((Checkbox) getCtrl(CH_AUTO)).setState(enable);} public boolean isAutoEnable() { return((Checkbox) getCtrl(CH_AUTO)).getState();} public TextField getTfAuto() { return(TextField) getCtrl(TF_AUTO);} public void setAutoDelay(String autoDelay) { getTfAuto().setText(autoDelay); ReverseRotateAutoPanel.autoDelay=autoDelay;} public int getAutoDelay() { autoDelay=((TextField) getCtrl(TF_AUTO)).getText(); if(autoDelay !=null) { if(autoDelayParsedLast !=null && autoDelay.equalsIgnoreCase(autoDelayParsedLast)) return autoDelayParsed; else { autoDelayParsedLast=autoDelay; try { autoDelayParsed=Integer.parseInt(autoDelayParsedLast); return autoDelayParsed;} catch(NumberFormatException ex) { autoDelay=""+AUTO_DELAY; autoDelayParsed=AUTO_DELAY; autoDelayParsedLast=""+AUTO_DELAY; ex.getMessage();}}} return AUTO_DELAY;} protected void buildPanel() { append(BT_NEXT,new Button(NAME_NEXT)); append(BT_PREV,new Button(NAME_PREV)); TextField tfAuto=new TextField(5-1); tfAuto.setText(""+autoDelay); append(TF_AUTO,tfAuto); Checkbox chAuto=new Checkbox(""); chAuto.setState(initialState); chAuto.enable(false); append(CH_AUTO,chAuto); append(BT_AUTO,new Button(NAME_AUTO)); Checkbox chRev=new Checkbox(NAME_REVERSE); chRev.setState(true); append(CH_REV,chRev);} public void enableCtrls(boolean enable) {((Button) getCtrl(BT_NEXT)).enable(enable);((Button) getCtrl(BT_PREV)).enable(enable);((TextField) getCtrl(TF_AUTO)).enable(enable);((Checkbox) getCtrl(CH_AUTO)).enable(enable);((Button) getCtrl(BT_AUTO)).enable(enable);((Checkbox) getCtrl(CH_REV)).enable(enable);} public Color getPanelBgColor() { return Props.bgRotatePanelColor;} public LayoutManager getPanelLayout() { return new FlowLayout(FlowLayout.LEFT,getBorderSpace()+1,getBorderSpace());} public int getBorderSpace() { return 1+1;} public static ReverseRotateAutoPanel createPanel(String autoDelay,boolean initialState) { ReverseRotateAutoPanel.autoDelay=autoDelay; ReverseRotateAutoPanel.initialState=initialState; ReverseRotateAutoPanel rotateMassPanel=new ReverseRotateAutoPanel(); return rotateMassPanel;}}