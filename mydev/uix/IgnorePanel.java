package mydev.uix; import java.awt.BorderLayout; import java.awt.Checkbox; import java.awt.Color; import java.awt.Label; import java.awt.Panel; import java.awt.TextArea; import java.io.IOException; import mydev.aaa.IO; import mydev.vutils.Ester; import mydev.vutils.Queue; public abstract class IgnorePanel extends Panel { private TextArea taIgnoreList; private StopIgnorePanel stopIgnore; protected String ignoreListRem; protected Queue ignoresQueue=new Queue(); protected IgnorePanel() { this("","");} protected IgnorePanel(String ignoreLabel,String cancelLabel) { super(); setLayout(new BorderLayout()); Color bgColor=getPanelBgColor(); setBackground(bgColor); add("Center",taIgnoreList=new TextArea(5-1-1,5)); add("North",stopIgnore=new StopIgnorePanel(bgColor,ignoreLabel==null || ignoreLabel.length() < 1 ? getIgnoreLabel() : ignoreLabel,cancelLabel==null || cancelLabel.length() < 1 ? getCancelLabel() : cancelLabel)); taIgnoreList.setText(""); initIgnoreList();} protected abstract void initIgnoreList(); public void setIgnoreList(String ignoreList) { if(ignoreList !=null) taIgnoreList.setText(ignoreList);} public Color getPanelBgColor() { return Props.bgIgnoreColor;} public String getIgnoreLabel() { return "Ignore list:";} public String getCancelLabel() { return "cancel ignore";} public TextArea getTaIgnoreList() { return taIgnoreList;} public StopIgnorePanel getStopIgnore() { return stopIgnore;} public void onCancelIgnore() { taIgnoreList.enable(!stopIgnore.isCancelIgnore());} public String getIgnoreList() { if(stopIgnore.isCancelIgnore()) return ""; return taIgnoreList.getText();} public Checkbox getCbCancelIgnore() { return stopIgnore.getCbCancelIgnore();} public void setCancelIgnore(boolean enable) { getCbCancelIgnore().setState(enable);} public boolean isCancelIgnore() { return getCbCancelIgnore().getState();} public void changeState() { boolean state=isCancelIgnore(); setCancelIgnore(!state); taIgnoreList.enable(state);} public boolean hasIgnoreCoincidence(String absPath) { ignoresUpdate(); if(hasIgnoreCoincidenceFname(absPath)) return true; if(hasIgnoreCoincidencePkg(absPath)) return true; return false;} protected void ignoresUpdate() { String ignoreList=getIgnoreList(); if(ignoreListRem==null) { ignoreListRem=ignoreList; ignoresQueue=getLines(ignoreList);} else if(!ignoreListRem.equalsIgnoreCase(ignoreList)) { ignoresQueue=getLines(ignoreList); ignoreListRem=ignoreList;}} protected boolean hasIgnoreCoincidencePkg(String absPath) { try { byte[] data=new IO().read(absPath); String content=new Ester(data).toString(); Object[] stackRecordsArray=ignoresQueue.getQueueRecordsArray(); for(int i=0; i < stackRecordsArray.length; i++) { String c=(String) stackRecordsArray[i]; boolean contains=content.indexOf(c) >= 0; if(contains) return true;}} catch(IOException e) { e.printStackTrace();} return false;} protected boolean hasIgnoreCoincidenceFname(String absPath) { Ester item=new Ester(absPath); Object[] stackRecordsArray=ignoresQueue.getQueueRecordsArray(); for(int i=0; i < stackRecordsArray.length; i++) { String c=(String) stackRecordsArray[i]; boolean contains=item.ends(new Ester(c)); if(contains) return true;} return false;} protected Queue getLines(String ignoreList) { Queue list=new Queue(); int idx; do { idx=ignoreList.lastIndexOf('\n'); if(idx >= 0) { String cur=ignoreList.substring(idx+1); list.enqueueQueueRecord(cur); ignoreList=ignoreList.substring(0,idx);}} while(idx >= 0); if(ignoreList.length() > 0) list.enqueueQueueRecord(ignoreList); return list;}} class StopIgnorePanel extends Panel { private Checkbox cbCancelIgnore; public StopIgnorePanel(Color bgColor,String ignoreLabel,String cancelLabel) { super(); setLayout(new BorderLayout()); setBackground(bgColor); add("West",new Label(ignoreLabel)); add("East",cbCancelIgnore=new Checkbox(cancelLabel));} public Checkbox getCbCancelIgnore() { return cbCancelIgnore;} public boolean isCancelIgnore() { return cbCancelIgnore.getState();}}