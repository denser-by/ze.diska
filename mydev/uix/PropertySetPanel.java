package mydev.uix; import java.awt.Choice; import java.awt.Color; import java.awt.GridLayout; import java.awt.Label; import java.awt.LayoutManager; import java.awt.Panel; import java.awt.TextField; import mydev.vutils.Queue; public class PropertySetPanel extends Panel { protected final static int SPS=1+1+1; private Color panelBgColor=Color.white; protected Queue propertiesQueue=new Queue(); public PropertySetPanel(Color bgColor,LabeledEditPair[] pairs) { super(); setBackground(bgColor); setLayout(getPanelLayout(pairs.length,SPS)); this.panelBgColor=bgColor; for(int i=0; i < pairs.length; i++) { add(pairs[i].getLbName()); if(pairs[i].tfValue !=null) add(pairs[i].tfValue); else if(pairs[i].chVariants !=null) add(pairs[i].getChoisesCtrl()); else add(pairs[i].getCheckCtrl()); propertiesQueue.enqueueQueueRecord(pairs[i]);}} protected LayoutManager getPanelLayout(int num,int sps) { return new GridLayout(num,2,sps+1,sps);} public Color getPanelBgColor() { return panelBgColor;} public void setPanelBgColor(Color panelBgColor) { setBackground(panelBgColor); this.panelBgColor=panelBgColor;} public int getPropertyNum() { return(int) propertiesQueue.sizeOfQueue();} public Label getPropertyLbName(int idx) { if(idx >= 0 && idx < propertiesQueue.sizeOfQueue()) { LabeledEditPair editPair=(LabeledEditPair) propertiesQueue.getQueueRecord(idx); if(editPair !=null) return editPair.getLbName();} return null;} public Choice getPropertyChoisesCtrl(int idx) { if(idx >= 0 && idx < propertiesQueue.sizeOfQueue()) { LabeledEditPair editPair=(LabeledEditPair) propertiesQueue.getQueueRecord(idx); if(editPair !=null) return editPair.chVariants;} return null;} public TextField getPropertyTfValueCtrl(int idx) { if(idx >= 0 && idx < propertiesQueue.sizeOfQueue()) { LabeledEditPair editPair=(LabeledEditPair) propertiesQueue.getQueueRecord(idx); if(editPair !=null) return editPair.tfValue;} return null;} public void enableCtrls(boolean enable) { Object[] queueRecordsArray=propertiesQueue.getQueueRecordsArray(); for(int i=0; i < queueRecordsArray.length; i++) { LabeledEditPair editPair=(LabeledEditPair) queueRecordsArray[i]; if(editPair.tfValue !=null) editPair.tfValue.enable(enable); else if(editPair.chVariants !=null) editPair.chVariants.enable(enable);}} public void enableCtrl(boolean enable,int idx) { if(idx >= 0 && idx < propertiesQueue.sizeOfQueue()) { LabeledEditPair editPair=(LabeledEditPair) propertiesQueue.getQueueRecord(idx); if(editPair !=null) { if(editPair.tfValue !=null) editPair.tfValue.enable(enable); else if(editPair.chVariants !=null) editPair.chVariants.enable(enable);}}} public String getText(int idx) { if(idx >= 0 && idx < propertiesQueue.sizeOfQueue()) { LabeledEditPair editPair=(LabeledEditPair) propertiesQueue.getQueueRecord(idx); if(editPair !=null) { if(editPair.tfValue !=null) return editPair.tfValue.getText(); else if(editPair.chVariants !=null) return editPair.chVariants.getSelectedItem();}} return "";} public void setText(String text,int idx) { if(idx >= 0 && idx < propertiesQueue.sizeOfQueue()) { LabeledEditPair editPair=(LabeledEditPair) propertiesQueue.getQueueRecord(idx); if(editPair !=null && text !=null) { if(editPair.tfValue !=null) editPair.tfValue.setText(text); else if(editPair.chVariants !=null) editPair.chVariants.select(text);}}} public PropertySetPanel cookingLabels(Color bgLabelColor,Color textLabelColor,Color bgPanelColor) { Object[] queueRecordsArray=propertiesQueue.getQueueRecordsArray(); for(int i=0; i < queueRecordsArray.length; i++) { LabeledEditPair editPair=(LabeledEditPair) queueRecordsArray[i]; editPair.getLbName().setBackground(bgLabelColor); editPair.getLbName().setForeground(textLabelColor); editPair.setPanelBgColor(bgPanelColor);} setPanelBgColor(bgPanelColor); return this;}}