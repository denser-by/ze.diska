package mydev.uix; import java.awt.Button; import java.awt.Color; import java.awt.Dimension; import java.awt.Event; import java.awt.FlowLayout; import java.awt.LayoutManager; import java.awt.Panel; import java.awt.TextField; public class PagesPanel extends Panel { private Button btFirst; private Button btPrev; private Button btNext; private Button btLast; private TextField tfCurrent; private int pageSize; private int curPage; private int pagesNum; private boolean b2=true; private boolean b3=true; private boolean b4=true; private boolean b5=true; private ListPanelPagesOpener listPanelPagesOpener; private boolean enabled=true; public PagesPanel(int pageSize) { super(); setLayout(getPanelLayout()); setBackground(getPanelBgColor()); this.pageSize=pageSize; this.curPage=1; this.pagesNum=1; add(btFirst=new Button("1")); btFirst.enable(false); add(btPrev=new Button("<")); btPrev.enable(false); add(tfCurrent=new TextField(getCurWidth())); tfCurrent.setEditable(false); tfCurrent.setText(""+this.curPage); add(btNext=new Button(">")); btNext.enable(false); add(btLast=new Button(""+this.pagesNum)); btLast.enable(false); refreshCtrlsOnUpdate();} void setPagesOpener(ListPanelPagesOpener listener) { this.listPanelPagesOpener=listener;} public Color getPanelBgColor() { return Props.bgPagesPanelColor;} public LayoutManager getPanelLayout() { return new FlowLayout(FlowLayout.CENTER);} public int getCurPage() { return this.curPage;} public int getPagesNum() { return this.pagesNum;} public int getPageSize() { return this.pageSize;} public boolean handleEvent(Event et) { if(et.id==Event.ACTION_EVENT && et.target==this.btFirst) handleFirst(); if(et.id==Event.ACTION_EVENT && et.target==this.btPrev) handlePrev(); if(et.id==Event.ACTION_EVENT && et.target==this.btNext) handleNext(); if(et.id==Event.ACTION_EVENT && et.target==this.btLast) handleLast(); return super.handleEvent(et);} protected int getCurWidth() { return 5-1-1;} protected void handleFirst() { setPosFirst(); if(listPanelPagesOpener !=null) listPanelPagesOpener.openFirstPage();} protected void handlePrev() { decrPos(); if(listPanelPagesOpener !=null) listPanelPagesOpener.openPrevPage();} protected void handleNext() { incrPos(); if(listPanelPagesOpener !=null) listPanelPagesOpener.openNextPage();} protected void handleLast() { setPosLast(); if(listPanelPagesOpener !=null) listPanelPagesOpener.openLastPage();} private void incrPos() { if(curPage < pagesNum) { curPage=curPage+1; refreshCtrlsOnUpdate();}} private void decrPos() { if(curPage > 1) { curPage=curPage-1; refreshCtrlsOnUpdate();}} private void setPosFirst() { if(curPage > 1) { curPage=1; refreshCtrlsOnUpdate();}} private void setPosLast() { if(curPage < pagesNum) { curPage=pagesNum; refreshCtrlsOnUpdate();}} protected void refreshCtrlsOnUpdate() { if(tfCurrent !=null) tfCurrent.setText(""+curPage); if(enabled==false) { btNext.enable(false); btLast.enable(false); btPrev.enable(false); btFirst.enable(false); return;} btNext.enable(pagesNum !=curPage); btLast.enable(pagesNum !=curPage); btPrev.enable(curPage !=1); btFirst.enable(curPage !=1);} public int setPos(String posParam) { String pos=posParam.replaceAll(" ",""); if(pos !=null && pos.length() > 0) { int newPos=Integer.parseInt(pos); int curPageFirst=(curPage-1) * pageSize+1; int curPageLast=curPage * pageSize; if(newPos < curPageFirst || newPos > curPageLast) { curPage=newPos / pageSize+1; refreshCtrlsOnUpdate(); return curPage;}} return ListPanel.PAGE_NOT_CHANGES;} private void incrementLastWidth() { Dimension d1=btLast.getSize(); d1.width+=10; btLast.setSize(d1);} public void setAmount(String amountParam) { String amount=amountParam.replaceAll(" ",""); if(amount !=null && amount.length() > 0) { int newAmount=Integer.parseInt(amount); if(newAmount > pagesNum * pageSize) { pagesNum=newAmount / pageSize+1; if(btLast !=null) { btLast.setLabel(""+pagesNum); if(pagesNum >= 10 && b2) { b2=false; incrementLastWidth();} if(pagesNum >= 100 && b3) { b3=false; incrementLastWidth();} if(pagesNum >= 1000 && b4) { b4=false; incrementLastWidth();} if(pagesNum >= 10000 && b5) { b5=false; incrementLastWidth();} refreshCtrlsOnUpdate();}}}} public boolean isLastPageOpened() { return curPage==pagesNum;} public int getIndexCurentPage(int idx) { int indexesTillThisPage=(curPage-1) * pageSize; return idx-indexesTillThisPage;} public void clear() { this.curPage=1; this.pagesNum=1; b2=true; b3=true; b4=true; b5=true;} public void listEnable(boolean enable) { this.enabled=enable; refreshCtrlsOnUpdate();}}
