package mydev.uix; import java.awt.Color; import java.awt.Component; import java.awt.FlowLayout; import java.awt.Panel; import java.awt.TextField; import mydev.vutils.Ester; public class WidthHeight extends Panel { public static final short microWidth=(short)(230+40+5-30-45+40-40+1); public static final short microHeight=151; final static String NAME_WIDTH="Width:"; final static String NAME_HEIGHT="Height:"; protected WhLostFocusPair leWidth; protected WhLostFocusPair leHeight; WidthHeight(FlowLayout flowLayout,int setWidth,int setHeight) { super(); setLayout(flowLayout); LabeledEditPair[] pairs=createPairs(setWidth,setHeight); if(isSimilar(flowLayout,new FlowLayout(FlowLayout.CENTER))) add("Center",createPanelColorfullWrap(new PropertySetPanel(Props.bgSizePanelColor,pairs).cookingLabels(Props.fgChartPanelColor,Props.textChartPanelColor,Props.bgChartPanelColor),Color.white)); else for(int i=0; i < pairs.length; i++) add(cookingLabel(pairs[i],Props.fgChartPanelColor,Props.textChartPanelColor,Props.fgChartPanelColor));} public String getWidthTxt() { String text=leWidth.getText(); return digitsOnly(text);} public String getHeightTxt() { String text=leHeight.getText(); return digitsOnly(text);} public TextField getTfWidth() { return leWidth.getLostFocusCtrl();} public TextField getTfHeight() { return leHeight.getLostFocusCtrl();} public void setWidthTxt(String width) { leWidth.setText(width);} public void setHeightTxt(String height) { leHeight.setText(height);} protected LabeledEditPair cookingLabel(LabeledEditPair editPair,Color bgLabelColor,Color textLabelColor,Color bgPanelColor) { editPair.getLbName().setBackground(bgLabelColor); editPair.getLbName().setForeground(textLabelColor); editPair.setPanelBgColor(bgPanelColor); return editPair;} private WhLostFocusPair[] createPairs(int setWidth,int setHeight) { leWidth=new WhLostFocusPair(NAME_WIDTH,setWidth < 1 ? ""+microWidth : ""+setWidth,true,5-1-1-1); leHeight=new WhLostFocusPair(NAME_HEIGHT,setHeight < 1 ? ""+microHeight : ""+setHeight,true,5-1-1-1); WhLostFocusPair[] pairs=new WhLostFocusPair[1+1]; pairs[1-1]=leWidth; pairs[1]=leHeight; return pairs;} protected Panel createPanelColorfullWrap(Component comp,Color wrapColor) { LabeledPanel ignorePanelWrap=new LabeledPanel("",comp,LabeledPanel.DEF_WRAP_SIZE,wrapColor,wrapColor,wrapColor,true,true,true,true); return ignorePanelWrap;} public static WidthHeight createPanel(FlowLayout flowLayout,int setWidth,int setHeight) { WidthHeight whPanel=new WidthHeight(flowLayout,setWidth,setHeight); return whPanel;} public static WidthHeight createPanel(int setWidth,int setHeight) { FlowLayout flowLayout=new FlowLayout(FlowLayout.LEFT,1+1,1+1); return createPanel(flowLayout,setWidth,setHeight);} public static WidthHeight createPanel(FlowLayout flowLayout) { WidthHeight whPanel=new WidthHeight(flowLayout,1-1,1-1); return whPanel;} public static WidthHeight createPanel() { FlowLayout flowLayout=new FlowLayout(FlowLayout.LEFT,1+1,1+1); return createPanel(flowLayout,1-1,1-1);} public void enableCtrls(boolean enable) { leWidth.enableCtrls(enable); leHeight.enableCtrls(enable);} public void whReset(int setWidth,int setHeight) { setWidthTxt(""+setWidth); setHeightTxt(""+setHeight);} public void whReset() { setWidthTxt(""+microWidth); setHeightTxt(""+microHeight);} private String digitsOnly(String text) { if(text !=null) { String digits="0123456789"; Ester result=new Ester(""); for(int i=0; i < text.length(); i++) { char ch=text.charAt(i); if(digits.indexOf(ch) >= 0) result.append(ch);} return result.toString();} return "";} private boolean isSimilar(FlowLayout first,FlowLayout second) { Ester element=new Ester(""+first); long idx=element.index(new Ester("ign=")); Ester ptrn=element.sub(idx); boolean result=new Ester(""+second).ends(ptrn); return result;}} class WhLostFocusPair extends LabeledEditPair { public WhLostFocusPair(String labelText,String editText,boolean enable,int editWidth) { super(labelText,editText,enable,editWidth,false);} public TextField getLostFocusCtrl() { return tfValue;}}