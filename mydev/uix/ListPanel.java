package mydev.uix; import java.awt.BorderLayout; import java.awt.Color; import java.awt.Event; import java.awt.List; import java.awt.Panel; import mydev.vutils.Queue; public class ListPanel extends Panel { public static final int FIRST_PLACE=0; public static final int PAGE_NOT_CHANGES=-1; private AmountPanel amountPanelCda; private PagesPanel pagesPanelCda; protected ListWrap lsItems; protected ListPanelItemSelected selectListener; protected ListPanelPagesOpener pagesOpener; public ListPanel(AmountPanel amountPanel) { this(amountPanel,null);} public ListPanel(AmountPanel amountPanel,PagesPanel pagesPanel) { super(); setLayout(new BorderLayout()); setBackground(getPanelBgColor()); this.amountPanelCda=amountPanel; this.pagesPanelCda=pagesPanel; createLayout(); if(pagesPanel !=null) pagesPanel.setPagesOpener(lsItems);} public boolean isItemsCtrl(Object targetObj) { if(targetObj !=null && lsItems !=null && lsItems.isItemsCtrl(targetObj)) return true; return false;} public AmountPanel getAmountPanel() { return amountPanelCda;} public PagesPanel getPagesPanel() { return pagesPanelCda;} public void addItem(String item) { lsItems.addItem(item);} public void addItemFirst(String item) { lsItems.addItemFirst(item);} public void clearItems() { lsItems.clear();} public Color getPanelBgColor() { return Color.lightGray;} public void setPosition(String pos) { if(amountPanelCda !=null) amountPanelCda.setPos(pos); if(pagesPanelCda !=null) pagesPanelCda.setPos(pos);} public void setAmount(String amount) { if(amountPanelCda !=null) amountPanelCda.setAmount(amount); if(pagesPanelCda !=null) pagesPanelCda.setAmount(amount);} protected void createLayout() { if(amountPanelCda !=null) add("North",amountPanelCda); this.lsItems=new ListWrap(22,false,pagesPanelCda); add("Center",lsItems.lsItems); if(pagesPanelCda !=null) add("South",pagesPanelCda);} public String getItem(int idx) { return lsItems.getItem(idx);} public void selectItem(int idx) { lsItems.select(idx); if(amountPanelCda !=null && amountPanelCda.getTfPos() !=null) amountPanelCda.setPos(""+(idx+1)); if(pagesPanelCda !=null) pagesPanelCda.setPos(""+(idx+1));} public void selectNothing() { int idxSel=lsItems.getSelectedIndex(); if(idxSel >-1) { if(amountPanelCda !=null && amountPanelCda.getTfPos() !=null) amountPanelCda.setPos(""); lsItems.deselect(idxSel); if(pagesPanelCda !=null) pagesPanelCda.setPos("");}} public int getSelectedIndex() { return lsItems.getSelectedIndex();} public String getItemSelected() { return lsItems.getSelectedItem();} public int itemsNum() { return lsItems.countItems();} public boolean handleEvent(Event et) { if(et.id==Event.LIST_SELECT && et.target==lsItems) { if(selectListener !=null) selectListener.onSelect();} return super.handleEvent(et);} public void listEnable(boolean enable) { lsItems.enable(enable); if(pagesPanelCda !=null) pagesPanelCda.listEnable(enable);}} class ListWrap implements ListPanelPagesOpener { List lsItems; Queue items; PagesPanel pagesPanel; public ListWrap(int r,boolean mult,PagesPanel pagesPanel) { super(); this.lsItems=new List(r,mult); this.items=new Queue(); this.pagesPanel=pagesPanel;} public boolean isItemsCtrl(Object targetObj) { if(targetObj !=null && lsItems !=null && targetObj.equals(lsItems)) return true; return false;} public synchronized void addItemFirst(String newItem) { items.insert(ListPanel.FIRST_PLACE,newItem); if(pagesPanel !=null) { openFirstPage();} else lsItems.addItem(newItem,ListPanel.FIRST_PLACE);} public synchronized void addItem(String item) { items.enqueueQueueRecord(item); if(pagesPanel !=null) { if(pagesPanel.getCurPage()==1 && items.sizeOfQueue() <= pagesPanel.getPageSize()) { lsItems.addItem(item);}} else lsItems.addItem(item);} public void openFirstPage() { loadPageItems(1);} public void openLastPage() { if(pagesPanel !=null) { int lastPage=pagesPanel.getPagesNum(); loadPageItems(lastPage);}} public void openNextPage() { if(pagesPanel !=null) { int lastPage=pagesPanel.getPagesNum(); int nextPage=pagesPanel.getCurPage(); if(nextPage <= lastPage) loadPageItems(nextPage);}} public void openPrevPage() { if(pagesPanel !=null) { int nextPage=pagesPanel.getCurPage(); if(nextPage >= 1) loadPageItems(nextPage);}} public synchronized void clear() { lsItems.clear(); items.clearQueue(); if(pagesPanel !=null) pagesPanel.clear();} public synchronized void deselect(int idxSel) { lsItems.deselect(idxSel);} public synchronized void select(int idx) { if(pagesPanel !=null) { String pos=""+(idx+1); int pageChanges=pagesPanel.setPos(pos); if(pageChanges !=ListPanel.PAGE_NOT_CHANGES) { loadPageItems(pageChanges);} int indexOnCurrentPage=pagesPanel.getIndexCurentPage(idx); lsItems.select(indexOnCurrentPage);} else lsItems.select(idx);} public synchronized String getItem(int idx) { select(idx); return(String) items.getQueueRecord(idx);} synchronized void loadPageItems(int curPage) { if(!(pagesPanel.getCurPage()==1 && items.sizeOfQueue() < pagesPanel.getPageSize())) lsItems.clear(); int pageSize=pagesPanel.getPageSize(); int curPageFirst=(curPage-1) * pageSize+1-1; int curPageLast=curPage * pageSize-1; for(int i=curPageFirst; i <= curPageLast && i < items.sizeOfQueue(); i++) { String item=(String) items.getQueueRecord(i); lsItems.addItem(item);}} public synchronized String getSelectedItem() { return lsItems.getSelectedItem();} public synchronized int getSelectedIndex() { if(pagesPanel !=null) { int curPageSelectedItemIdx=lsItems.getSelectedIndex(); int pageIndexShift=(pagesPanel.getCurPage()-1) * pagesPanel.getPageSize(); return pageIndexShift+curPageSelectedItemIdx;} return lsItems.getSelectedIndex();} public synchronized int countItems() { return(int) items.sizeOfQueue();} synchronized void enable(boolean enable) { lsItems.enable(enable);}}