package mydev.uix; import java.awt.Canvas; import java.awt.Color; import java.awt.Dimension; import java.awt.Graphics; import java.awt.Image; import mydev.about.CanvasAdapter; import mydev.about.CanvasAdapterAboutImpl; import mydev.about.Colorfull; import mydev.about.ColorsArray; import mydev.about.Line2D; import mydev.about.PaintAdapter; import mydev.about.PaintAdapterAboutImpl; import mydev.about.Point2D; import mydev.about.Rectangle2D; public abstract class CommonCanvas extends Canvas { private boolean changes; private Image imPaint; private PaintAdapter pn; private CanvasAdapter ics; protected Dimension sPrev; protected Dimension sCur; protected Color bgColor; protected Color borderColor; protected Point2D uc; protected CommonCanvas() { this(10,10,Color.white,null);} protected CommonCanvas(Color bgColor) { this(10,10,bgColor,null);} protected CommonCanvas(Color bgColor,Color borderColor) { this(10,10,bgColor,borderColor);} protected CommonCanvas(int width,int height,Color bgColor,Color borderColor) { super(); this.bgColor=bgColor; this.borderColor=borderColor; this.uc=new Point2D(0,0); setBackground(bgColor); resize(width,height);} public void paint(Graphics cs1) { super.paint(cs1); sCur=size(); if(sPrev==null) { sPrev=sCur; markChanges(); newSizeArrive((short) sCur.width,(short) sCur.height);} else if(notEq(sCur,sPrev)) { markChanges(); newSizeArrive((short) sCur.width,(short) sCur.height);} if(imPaint==null) initDrawCtx((short) sCur.width,(short) sCur.height); if(bgColor !=null) drawBg(ics,pn); drawItems(ics,pn); if(borderColor !=null) drawBorder(ics,pn); cs1.drawImage(imPaint,uc.getX(),uc.getY(),null); sPrev=sCur; clearChangesMark();} protected void newSizeArrive(short width,short height) { initDrawCtx(width,height);} void initDrawCtx(short width,short height) { imPaint=createImage(width,height); pn=new PaintAdapterAboutImpl(this); ics=new CanvasAdapterAboutImpl(imPaint.getGraphics(),this);} public static boolean notEq(Dimension d1,Dimension other) { if(d1.width !=other.width) return true; if(d1.height !=other.height) return true; return false;} public void markChanges() { changes=true;} public void clearChangesMark() { changes=false;} public boolean hasChanges() { return changes;} public Color getBgColor() { return bgColor;} public void setBgColor(Color bgColor) { this.bgColor=bgColor; setBackground(bgColor);} public Color getBorderColor() { return borderColor;} public void setBorderColor(Color borderColor) { this.borderColor=borderColor;} public abstract void clearItems(); protected abstract void drawItems(CanvasAdapter ics,PaintAdapter pn); void drawBg(CanvasAdapter ics,PaintAdapter pn) { Colorfull cf=new Rectangle2D(uc,getCcWidth(),getCcHeight(),bgColor.getRGB(),true); cf.toPen(ics,pn.select(cf));} protected void drawBorder(CanvasAdapter ics,PaintAdapter pn) { Colorfull cf=new Rectangle2D(uc,getCcWidth(),getCcHeight(),borderColor.getRGB()); cf.toPen(ics,pn.select(cf));} public short getCcWidth() { if(sCur==null) return(short) 0; return(short) sCur.width;} public short getCcHeight() { if(sCur==null) return(short) 0; return(short) sCur.height;} public short getCcMinWidthOrHeight() { if(sCur==null) return(short) 0; return(short)(sCur.width < sCur.height ? sCur.width : sCur.height);} public Point2D obtainCenter() { return new Point2D(getCcHalfWidth(),getCcHalfHeight(),ColorsArray.blackPoint.ic());} public short getCcHalfWidth() { if(sCur==null) return(short) 0; return(short)(sCur.width / 2);} public short getCcHalfHeight() { if(sCur==null) return(short) 0; return(short)(sCur.height / 2);} public short getCcHalfMinWidthOrHeight() { if(sCur==null) return(short) 0; return(short)((sCur.width < sCur.height ? sCur.width : sCur.height) / 2);} public void refreshUpdatable() { invalidate(); repaint();} public void drawLine(int x1,int y1,int x2,int y2,int color,CanvasAdapter ics,PaintAdapter pn) { Line2D line=new Line2D(new Point2D(x1,y1),new Point2D(x2,y2),color); line.toPen(ics,pn.select(line));}}